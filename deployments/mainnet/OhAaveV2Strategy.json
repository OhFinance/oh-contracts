{
  "address": "0x858ff4Dfd113c98af0A791845E524C287b5A9ed4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Sweep",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derivativeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentivesController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bank_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "derivative_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakedToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "incentivesController_",
          "type": "address"
        }
      ],
      "name": "initializeAaveV2Strategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea976d7f746a2dcaca1ff62c83e8dec00963c27659788d5ca8b200f45bde949c",
  "receipt": {
    "to": null,
    "from": "0x000000010b5AFA32AB82B72625D68571B11EAE13",
    "contractAddress": "0x858ff4Dfd113c98af0A791845E524C287b5A9ed4",
    "transactionIndex": 5,
    "gasUsed": "1736929",
    "logsBloom": "0x
    "blockHash": "0x06e179a66564e899539e0dc387a6708dab36111b26ac8ec913f71d9c977f8011",
    "transactionHash": "0xea976d7f746a2dcaca1ff62c83e8dec00963c27659788d5ca8b200f45bde949c",
    "logs": [],
    "blockNumber": 13491797,
    "cumulativeGasUsed": "1914753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2ae1fbaa0a2bdfe558222a1906c1c210",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derivativeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentivesController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bank_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"derivative_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakedToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController_\",\"type\":\"address\"}],\"name\":\"initializeAaveV2Strategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Underlying: USDC, USDT, etc.Derivative: aToken, 1:1 ratio with underlyinghttps://docs.aave.com/developers/the-core-protocol/atokens\",\"kind\":\"dev\",\"methods\":{\"derivativeBalance()\":{\"details\":\"Balance of derivative tokens received from Strategy, if applicable\",\"returns\":{\"_0\":\"The balance of derivative tokens\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"initializeAaveV2Strategy(address,address,address,address,address,address,address,address)\":{\"details\":\"The function should be called at time of deployment\",\"params\":{\"bank_\":\"the bank associated with the strategy\",\"derivative_\":\"the aToken address received from Aave\",\"incentivesController_\":\"the AaveV2 rewards contract\",\"lendingPool_\":\"the AaveV2 lending pool that we lend to\",\"registry_\":\"the registry contract\",\"reward_\":\"the address of the reward token stkAAVE\",\"underlying_\":\"the underlying token that is deposited\"}},\"invest()\":{\"details\":\"Compound by claiming stkAAVE, then unwrapping + liquidating if cooldown permitsDeposit all underlying to receive aTokens\"},\"investedBalance()\":{\"details\":\"aTokens are 1:1 with underlying, they are continuously distributed to users\"},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"rewardBalance()\":{\"details\":\"Balance of reward tokens awaiting liquidation, if applicable\"},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"stakedBalance()\":{\"details\":\"Rewards are first received in stkAAVe, then must undergo 10 day cooldownBefore batch claiming.\"},\"sweep(address,uint256,address)\":{\"params\":{\"amount\":\"The amount of tokens to sweep\",\"recipient\":\"The address to send the sweeped tokens to\",\"token\":\"The address of the token to sweep\"}},\"underlyingBalance()\":{\"details\":\"Balance of underlying awaiting Strategy investment\"}},\"title\":\"Oh! Finance Aave V2 Strategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bank()\":{\"notice\":\"The Bank that the Strategy is associated with\"},\"constructor\":{\"notice\":\"Initialize the AaveV2 Strategy Logic\"},\"derivative()\":{\"notice\":\"The derivative token received from AaveV2 (aToken)\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"initializeAaveV2Strategy(address,address,address,address,address,address,address,address)\":{\"notice\":\"Initialize the AaveV2 Strategy Proxy\"},\"invest()\":{\"notice\":\"Invest in the AaveV2 Strategy\"},\"investedBalance()\":{\"notice\":\"Balance of underlying invested in AaveV2\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"reward()\":{\"notice\":\"The reward token received from AaveV2 (stkAave)\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"stakedBalance()\":{\"notice\":\"Balance of stkAAVE await liquidation\"},\"sweep(address,uint256,address)\":{\"notice\":\"Governance function to sweep any stuck / airdrop tokens to a given recipient\"},\"underlying()\":{\"notice\":\"The underlying token the Strategy invests in AaveV2\"}},\"notice\":\"Standard strategy using Aave V2 Protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/aave/OhAaveV2Strategy.sol\":\"OhAaveV2Strategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyBase} from \\\"./IStrategyBase.sol\\\";\\r\\n\\r\\ninterface IStrategy is IStrategyBase {\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function invest() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ddfe37d38ab5c1f10e649025c31f04bdadd42fb93e9ab422799925624494fb\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyStorage} from \\\"./IStrategyStorage.sol\\\";\\r\\n\\r\\ninterface IStrategyBase is IStrategyStorage {\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function derivativeBalance() external view returns (uint256);\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2b099e226a7b99500af8c9c2beb5cf8a8da9a6675c6ca9f89ba229a270764\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStrategyStorage {\\r\\n    function bank() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivative() external view returns (address);\\r\\n\\r\\n    function reward() external view returns (address);\\r\\n\\r\\n    // function investedBalance() external view returns (uint256);\\r\\n\\r\\n    // function invest() external;\\r\\n\\r\\n    // function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    // function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe02fa4951275170cfea55e68ec215048a1d2453255563cea3aae5d27d1248f93\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/aave/IAaveV2StrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IAaveV2StrategyStorage {\\r\\n    function stakedToken() external view returns (address);\\r\\n\\r\\n    function lendingPool() external view returns (address);\\r\\n\\r\\n    function incentivesController() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x16c08882d956a59611fb2de429f19d0cf1374c403108201313e4eb4af4e07ea5\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"contracts/proxy/OhUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @title Oh! Finance Base Upgradeable\\r\\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\\r\\nabstract contract OhUpgradeable {\\r\\n    function getAddress(bytes32 slot) internal view returns (address _address) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _address := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\\r\\n        uint256 bool_;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            bool_ := sload(slot)\\r\\n        }\\r\\n        _bool = bool_ == 1;\\r\\n    }\\r\\n\\r\\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _bytes32 := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _uint := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 slot, address _address) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _address)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _bytes32)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Set a boolean storage variable in a given slot\\r\\n    /// @dev Convert to a uint to take up an entire contract storage slot\\r\\n    function setBoolean(bytes32 slot, bool _bool) internal {\\r\\n        uint256 bool_ = _bool ? 1 : 0;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, bool_)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _uint)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dd7d929b429b1987fd0b51a6cd2fa6d65eba8fcea83c08885ba594c14f7bf4e\",\"license\":\"MIT\"},\"contracts/registry/OhSubscriberUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber Upgradeable\\r\\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\\r\\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verify the registry storage slot is correct\\r\\n    constructor() {\\r\\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.subscriber.registry\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Subscriber\\r\\n    /// @param registry_ The Registry contract address\\r\\n    /// @dev Always call this method in the initializer function for any derived classes\\r\\n    function initializeSubscriber(address registry_) internal initializer {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _setRegistry(registry_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        _setRegistry(registry_);\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return getAddress(_REGISTRY_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address registry_) private {\\r\\n        setAddress(_REGISTRY_SLOT, registry_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32f5c681a6a387937e51f03e9e45762fb0a7d73fa060f9eb6746d273c792e215\",\"license\":\"MIT\"},\"contracts/strategies/OhStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {IStrategyBase} from \\\"../interfaces/strategies/IStrategyBase.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriberUpgradeable} from \\\"../registry/OhSubscriberUpgradeable.sol\\\";\\r\\nimport {OhStrategyStorage} from \\\"./OhStrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Strategy\\r\\n/// @notice Base Upgradeable Strategy Contract to build strategies on\\r\\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\\r\\n    event Sweep(address indexed token, uint256 amount, address recipient);\\r\\n\\r\\n    /// @notice Only the Bank can execute these functions\\r\\n    modifier onlyBank() {\\r\\n        require(msg.sender == bank(), \\\"Strategy: Only Bank\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the base Strategy\\r\\n    /// @param registry_ Address of the Registry\\r\\n    /// @param bank_ Address of Bank\\r\\n    /// @param underlying_ Underying token that is deposited\\r\\n    /// @param derivative_ Derivative token received from protocol, or address(0)\\r\\n    /// @param reward_ Reward token received from protocol, or address(0)\\r\\n    function initializeStrategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        initializeSubscriber(registry_);\\r\\n        initializeStorage(bank_, underlying_, derivative_, reward_);\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of underlying awaiting Strategy investment\\r\\n    function underlyingBalance() public view override returns (uint256) {\\r\\n        return IERC20(underlying()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\\r\\n    /// @return The balance of derivative tokens\\r\\n    function derivativeBalance() public view override returns (uint256) {\\r\\n        if (derivative() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(derivative()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\\r\\n    function rewardBalance() public view override returns (uint256) {\\r\\n        if (reward() == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return IERC20(reward()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\\r\\n    /// @param token The address of the token to sweep\\r\\n    /// @param amount The amount of tokens to sweep\\r\\n    /// @param recipient The address to send the sweeped tokens to\\r\\n    function sweep(\\r\\n        address token,\\r\\n        uint256 amount,\\r\\n        address recipient\\r\\n    ) external onlyGovernance {\\r\\n        // require(!_protected[token], \\\"Strategy: Cannot sweep\\\");\\r\\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\\r\\n        emit Sweep(token, amount, recipient);\\r\\n    }\\r\\n\\r\\n    /// @dev Liquidation function to swap rewards for underlying\\r\\n    function liquidate(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        // if (amount > minimumSell())\\r\\n\\r\\n        // find the liquidator to use\\r\\n        address manager = manager();\\r\\n        address liquidator = IManager(manager).liquidators(from, to);\\r\\n\\r\\n        // increase allowance and liquidate to the manager\\r\\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\\r\\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\\r\\n\\r\\n        // notify revenue and transfer proceeds back to strategy\\r\\n        IManager(manager).accrueRevenue(bank(), to, received);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9736e9a693e027f9931a6420d572cb170c369922571592a6ef3439f176a6a8a\",\"license\":\"MIT\"},\"contracts/strategies/OhStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IStrategyStorage} from \\\"../interfaces/strategies/IStrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\\r\\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\\r\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\\r\\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\\r\\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.bank\\\")) - 1));\\r\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.underlying\\\")) - 1));\\r\\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.derivative\\\")) - 1));\\r\\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\\\"eip1967.strategy.reward\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeStorage(\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_\\r\\n    ) internal initializer {\\r\\n        _setBank(bank_);\\r\\n        _setUnderlying(underlying_);\\r\\n        _setDerivative(derivative_);\\r\\n        _setReward(reward_);\\r\\n    }\\r\\n\\r\\n    /// @notice The Bank that the Strategy is associated with\\r\\n    function bank() public view override returns (address) {\\r\\n        return getAddress(_BANK_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The underlying token the Strategy invests in AaveV2\\r\\n    function underlying() public view override returns (address) {\\r\\n        return getAddress(_UNDERLYING_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The derivative token received from AaveV2 (aToken)\\r\\n    function derivative() public view override returns (address) {\\r\\n        return getAddress(_DERIVATIVE_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The reward token received from AaveV2 (stkAave)\\r\\n    function reward() public view override returns (address) {\\r\\n        return getAddress(_REWARD_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setBank(address _address) internal {\\r\\n        setAddress(_BANK_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setUnderlying(address _address) internal {\\r\\n        setAddress(_UNDERLYING_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setDerivative(address _address) internal {\\r\\n        setAddress(_DERIVATIVE_SLOT, _address);\\r\\n    }\\r\\n\\r\\n    function _setReward(address _address) internal {\\r\\n        setAddress(_REWARD_SLOT, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb844858c0fdd73fdb58f6920a1d6a1cc4b192678f630fa4d0f35133624edbaa5\",\"license\":\"MIT\"},\"contracts/strategies/aave/OhAaveV2Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {ILendingPoolV2} from \\\"./interfaces/ILendingPoolV2.sol\\\";\\r\\nimport {ILendingPoolAddressesProviderV2} from \\\"./interfaces/ILendingPoolAddressesProviderV2.sol\\\";\\r\\nimport {IAaveIncentivesController} from \\\"./interfaces/IAaveIncentivesController.sol\\\";\\r\\nimport {IAaveProtocolDataProviderV2} from \\\"./interfaces/IAaveProtocolDataProviderV2.sol\\\";\\r\\nimport {IStakedToken} from \\\"./interfaces/IStakedToken.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance AaveV2 Helper\\r\\n/// @notice Helper functions to interact with the AaveV2\\r\\n/// @dev https://docs.aave.com/portal/\\r\\nabstract contract OhAaveV2Helper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Get the AaveV2 aToken for a given underlying\\r\\n    /// @param dataProvider The AaveV2 Data Provider\\r\\n    /// @param underlying The underlying token to check\\r\\n    /// @return The address of the associated aToken\\r\\n    function aToken(address dataProvider, address underlying) internal view returns (address) {\\r\\n        (address aTokenAddress, , ) = IAaveProtocolDataProviderV2(dataProvider).getReserveTokensAddresses(underlying);\\r\\n        return aTokenAddress;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the AaveV2 Lending Pool\\r\\n    /// @param addressProvider The AaveV2 Address Provider\\r\\n    /// @return The address of the AaveV2 Lending Pool\\r\\n    function lendingPool(address addressProvider) internal view returns (address) {\\r\\n        return ILendingPoolAddressesProviderV2(addressProvider).getLendingPool();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the cooldown timestamp start for this contract\\r\\n    /// @param stakedToken The address of stkAAVE\\r\\n    /// @return The timestamp the cooldown started on\\r\\n    function stakersCooldown(address stakedToken) internal view returns (uint256) {\\r\\n        uint256 stakerCooldown = IStakedToken(stakedToken).stakersCooldowns(address(this));\\r\\n        return stakerCooldown;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the cooldown window in seconds for unstaking stkAAVE to AAVE before cooldown expires\\r\\n    /// @dev 864000 - 10 days\\r\\n    /// @param stakedToken The address of stkAAVE\\r\\n    /// @return The cooldown seconds to wait before unstaking\\r\\n    function cooldownWindow(address stakedToken) internal view returns (uint256) {\\r\\n        uint256 window = IStakedToken(stakedToken).COOLDOWN_SECONDS();\\r\\n        return window;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the unstake window in seconds for unstaking stkAAVE to AAVE after cooldown passes\\r\\n    /// @dev 172800 - 2 days\\r\\n    /// @param stakedToken The address of stkAAVE\\r\\n    /// @return The unstake window seconds we have to unwrap stkAAVE to AAVE\\r\\n    function unstakingWindow(address stakedToken) internal view returns (uint256) {\\r\\n        uint256 window = IStakedToken(stakedToken).UNSTAKE_WINDOW();\\r\\n        return window;\\r\\n    }\\r\\n\\r\\n    /// @notice Initiate a claim cooldown to swap stkAAVE to AAVE\\r\\n    /// @param stakedToken The address of stkAAVE\\r\\n    function cooldown(address stakedToken) internal {\\r\\n        IStakedToken(stakedToken).cooldown();\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem an amount of stkAAVE for AAVE\\r\\n    /// @param stakedToken The address of stkAAVE\\r\\n    /// @param amount The amount of stkAAVE to redeem\\r\\n    function redeem(address stakedToken, uint256 amount) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IStakedToken(stakedToken).redeem(address(this), amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Claim stkAAVE from the AaveV2 Incentive Controller\\r\\n    /// @dev Claim all available rewards, return if none available\\r\\n    /// @param incentivesController The AaveV2 Incentive Controller\\r\\n    /// @param token The aToken to claim rewards for\\r\\n    function claimRewards(address incentivesController, address token) internal {\\r\\n        address[] memory tokens = new address[](1);\\r\\n        tokens[0] = token;\\r\\n\\r\\n        uint256 rewards = IAaveIncentivesController(incentivesController).getRewardsBalance(tokens, address(this));\\r\\n\\r\\n        if (rewards > 0) {\\r\\n            IAaveIncentivesController(incentivesController).claimRewards(tokens, rewards, address(this));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Lend underlying to Aave V2 Lending Pool, receive aTokens\\r\\n    /// @param pool The AaveV2 Lending Pool\\r\\n    /// @param underlying The underlying ERC20 to lend\\r\\n    /// @param amount The amount of underlying to lend\\r\\n    function lend(\\r\\n        address pool,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\\r\\n        ILendingPoolV2(pool).deposit(\\r\\n            underlying,\\r\\n            amount,\\r\\n            address(this),\\r\\n            0 // referral code\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Reclaim underlying by sending aTokens to Aave V2 Lending Pool\\r\\n    /// @param pool The AaveV2 Lending Pool\\r\\n    /// @param token The aToken to redeem for underlying\\r\\n    /// @param amount The amount of aTokens to send\\r\\n    function reclaim(\\r\\n        address pool,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).safeIncreaseAllowance(pool, amount);\\r\\n        uint256 withdrawn = ILendingPoolV2(pool).withdraw(token, amount, address(this));\\r\\n        require(withdrawn == amount || withdrawn == balance, \\\"AaveV2: Withdraw failed\\\");\\r\\n        return withdrawn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb7027fc7b245ad25e2d42f6ee035cfa9aaa441677045cc7fb302bb1993bdba4\",\"license\":\"MIT\"},\"contracts/strategies/aave/OhAaveV2Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {IStrategy} from \\\"../../interfaces/strategies/IStrategy.sol\\\";\\r\\nimport {TransferHelper} from \\\"../../libraries/TransferHelper.sol\\\";\\r\\nimport {OhStrategy} from \\\"../OhStrategy.sol\\\";\\r\\nimport {OhAaveV2Helper} from \\\"./OhAaveV2Helper.sol\\\";\\r\\nimport {OhAaveV2StrategyStorage} from \\\"./OhAaveV2StrategyStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Aave V2 Strategy\\r\\n/// @notice Standard strategy using Aave V2 Protocol\\r\\n/// @dev Underlying: USDC, USDT, etc.\\r\\n/// @dev Derivative: aToken, 1:1 ratio with underlying\\r\\n/// @dev https://docs.aave.com/developers/the-core-protocol/atokens\\r\\ncontract OhAaveV2Strategy is IStrategy, OhAaveV2Helper, OhStrategy, OhAaveV2StrategyStorage {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Initialize the AaveV2 Strategy Logic\\r\\n    constructor() initializer {\\r\\n        assert(registry() == address(0));\\r\\n        assert(bank() == address(0));\\r\\n        assert(underlying() == address(0));\\r\\n        assert(reward() == address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the AaveV2 Strategy Proxy\\r\\n    /// @param registry_ the registry contract\\r\\n    /// @param bank_ the bank associated with the strategy\\r\\n    /// @param underlying_ the underlying token that is deposited\\r\\n    /// @param derivative_ the aToken address received from Aave\\r\\n    /// @param reward_ the address of the reward token stkAAVE\\r\\n    /// @param lendingPool_ the AaveV2 lending pool that we lend to\\r\\n    /// @param incentivesController_ the AaveV2 rewards contract\\r\\n    /// @dev The function should be called at time of deployment\\r\\n    function initializeAaveV2Strategy(\\r\\n        address registry_,\\r\\n        address bank_,\\r\\n        address underlying_,\\r\\n        address derivative_,\\r\\n        address reward_,\\r\\n        address stakedToken_,\\r\\n        address lendingPool_,\\r\\n        address incentivesController_\\r\\n    ) public initializer {\\r\\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\\r\\n        initializeAaveV2Storage(stakedToken_, lendingPool_, incentivesController_);\\r\\n    }\\r\\n\\r\\n    /// @notice Balance of underlying invested in AaveV2\\r\\n    /// @dev aTokens are 1:1 with underlying, they are continuously distributed to users\\r\\n    function investedBalance() public view override returns (uint256) {\\r\\n        return derivativeBalance();\\r\\n    }\\r\\n\\r\\n    /// @notice Balance of stkAAVE await liquidation\\r\\n    /// @dev Rewards are first received in stkAAVe, then must undergo 10 day cooldown\\r\\n    /// @dev Before batch claiming.\\r\\n    function stakedBalance() public view returns (uint256) {\\r\\n        return IERC20(stakedToken()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Invest in the AaveV2 Strategy\\r\\n    /// @dev Compound by claiming stkAAVE, then unwrapping + liquidating if cooldown permits\\r\\n    /// @dev Deposit all underlying to receive aTokens\\r\\n    function invest() external override onlyBank {\\r\\n        _compound();\\r\\n        _deposit();\\r\\n    }\\r\\n\\r\\n    /// @notice\\r\\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\\r\\n        uint256 withdrawn = _withdraw(msg.sender, amount);\\r\\n        return withdrawn;\\r\\n    }\\r\\n\\r\\n    /// @notice\\r\\n    function withdrawAll() external override onlyBank {\\r\\n        uint256 amount = derivativeBalance();\\r\\n        _withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Compound stkAAVE rewards on a alternating cooldown schedule\\r\\n    function _compound() internal {\\r\\n        uint256 currentCooldown = rewardCooldown();\\r\\n\\r\\n        // if the current cooldown has passed\\r\\n        if (block.timestamp > currentCooldown) {\\r\\n            // save state variables\\r\\n            uint256 balance = stakedBalance();\\r\\n            address staked = stakedToken();\\r\\n            uint256 expiration = currentCooldown.add(unstakingWindow(staked));\\r\\n\\r\\n            // if we have stkAAVE and the unstaking window hasn't passed\\r\\n            if (balance > 0 && block.timestamp < expiration) {\\r\\n                // redeem all available AAVE\\r\\n                redeem(staked, balance);\\r\\n\\r\\n                // validate we received AAVE\\r\\n                uint256 amount = rewardBalance();\\r\\n                if (amount > 0) {\\r\\n                    // liquidate for underlying\\r\\n                    liquidate(reward(), underlying(), amount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // claim new batch of available stkAAVE rewards\\r\\n            claimRewards(incentivesController(), derivative());\\r\\n\\r\\n            balance = stakedBalance();\\r\\n            if (balance > 0) {\\r\\n                // initiate a new cooldown\\r\\n                cooldown(staked);\\r\\n\\r\\n                // validate the cooldown was set\\r\\n                uint256 newCooldown = stakersCooldown(staked);\\r\\n                require(newCooldown == block.timestamp, \\\"AaveV2: Cooldown failed\\\");\\r\\n\\r\\n                // find reward cooldown, new timestamp when rewards are claimable\\r\\n                uint256 newRewardCooldown = newCooldown.add(cooldownWindow(staked));\\r\\n                _setRewardCooldown(newRewardCooldown);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _deposit() internal {\\r\\n        uint256 amount = underlyingBalance();\\r\\n        if (amount > 0) {\\r\\n            lend(lendingPool(), underlying(), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // withdraw tokens from protocol after converting aTokens to underlying\\r\\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 reclaimed = reclaim(lendingPool(), underlying(), amount);\\r\\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), reclaimed);\\r\\n        return withdrawn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74f9dcca58e3974a2feb5700080ae2fcd3a0cd813c37d13f2fada9f5a9c3c4f8\",\"license\":\"MIT\"},\"contracts/strategies/aave/OhAaveV2StrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IAaveV2StrategyStorage} from \\\"../../interfaces/strategies/aave/IAaveV2StrategyStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\ncontract OhAaveV2StrategyStorage is Initializable, OhUpgradeable, IAaveV2StrategyStorage {\\r\\n    bytes32 internal constant _STAKED_TOKEN_SLOT = 0x6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa89;\\r\\n    bytes32 internal constant _LENDING_POOL_SLOT = 0x32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b;\\r\\n    bytes32 internal constant _INCENTIVES_CONTROLLER_SLOT = 0x8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda15;\\r\\n    bytes32 internal constant _REWARD_COOLDOWN_SLOT = 0x29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b3923;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_STAKED_TOKEN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveV2Strategy.stakedToken\\\")) - 1));\\r\\n        assert(_LENDING_POOL_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveV2Strategy.lendingPool\\\")) - 1));\\r\\n        assert(_INCENTIVES_CONTROLLER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveV2Strategy.incentivesController\\\")) - 1));\\r\\n        assert(_REWARD_COOLDOWN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.aaveV2Strategy.rewardCooldown\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeAaveV2Storage(\\r\\n        address stakedToken_,\\r\\n        address lendingPool_,\\r\\n        address incentiveController_\\r\\n    ) internal initializer {\\r\\n        _setStakedToken(stakedToken_);\\r\\n        _setLendingPool(lendingPool_);\\r\\n        _setIncentiveController(incentiveController_);\\r\\n        _setRewardCooldown(block.timestamp + 864000); // initialize with 10 day reward lag\\r\\n    }\\r\\n\\r\\n    function stakedToken() public view override returns (address) {\\r\\n        return getAddress(_STAKED_TOKEN_SLOT);\\r\\n    }\\r\\n\\r\\n    function lendingPool() public view override returns (address) {\\r\\n        return getAddress(_LENDING_POOL_SLOT);\\r\\n    }\\r\\n\\r\\n    function incentivesController() public view override returns (address) {\\r\\n        return getAddress(_INCENTIVES_CONTROLLER_SLOT);\\r\\n    }\\r\\n\\r\\n    function rewardCooldown() public view returns (uint256) {\\r\\n        return getUInt256(_REWARD_COOLDOWN_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setStakedToken(address stakedToken_) internal {\\r\\n        setAddress(_STAKED_TOKEN_SLOT, stakedToken_);\\r\\n    }\\r\\n\\r\\n    function _setLendingPool(address lendingPool_) internal {\\r\\n        setAddress(_LENDING_POOL_SLOT, lendingPool_);\\r\\n    }\\r\\n\\r\\n    function _setIncentiveController(address incentiveController_) internal {\\r\\n        setAddress(_INCENTIVES_CONTROLLER_SLOT, incentiveController_);\\r\\n    }\\r\\n\\r\\n    function _setRewardCooldown(uint256 rewardCooldown_) internal {\\r\\n        setUInt256(_REWARD_COOLDOWN_SLOT, rewardCooldown_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1462807ce8f1755da40d0229467d54ed9afcf29dc6c1bc6c2bb76d209b75e771\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/IAaveDistributionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {DistributionTypes} from \\\"../libraries/DistributionTypes.sol\\\";\\r\\n\\r\\ninterface IAaveDistributionManager {\\r\\n    event AssetConfigUpdated(address indexed asset, uint256 emission);\\r\\n    event AssetIndexUpdated(address indexed asset, uint256 index);\\r\\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\\r\\n    event DistributionEndUpdated(uint256 newDistributionEnd);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the end date for the distribution\\r\\n     * @param distributionEnd The end date timestamp\\r\\n     **/\\r\\n    function setDistributionEnd(uint256 distributionEnd) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the end date for the distribution\\r\\n     * @return The end of the distribution\\r\\n     **/\\r\\n    function getDistributionEnd() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev for backwards compatibility with the previous DistributionManager used\\r\\n     * @return The end of the distribution\\r\\n     **/\\r\\n    function DISTRIBUTION_END() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the data of an user on a distribution\\r\\n     * @param user Address of the user\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The new index\\r\\n     **/\\r\\n    function getUserAssetData(address user, address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the configuration of the distribution for a certain asset\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The asset index, the emission per second and the last updated timestamp\\r\\n     **/\\r\\n    function getAssetData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xa0e7fbfd0d8363956961f6c30cfe83afa2fe616da01472e27b4afc5b862bd13f\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {IAaveDistributionManager} from \\\"./IAaveDistributionManager.sol\\\";\\r\\n\\r\\ninterface IAaveIncentivesController {\\r\\n    event RewardsAccrued(address indexed user, uint256 amount);\\r\\n\\r\\n    event RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\r\\n\\r\\n    event ClaimerSet(address indexed user, address indexed claimer);\\r\\n\\r\\n    /**\\r\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\r\\n     * @param user The address of the user\\r\\n     * @param claimer The address of the claimer\\r\\n     */\\r\\n    function setClaimer(address user, address claimer) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\r\\n     * @param user The address of the user\\r\\n     * @return The claimer address\\r\\n     */\\r\\n    function getClaimer(address user) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Configure assets for a certain rewards emission\\r\\n     * @param assets The assets to incentivize\\r\\n     * @param emissionsPerSecond The emission for each asset\\r\\n     */\\r\\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\r\\n     * @param asset The address of the user\\r\\n     * @param userBalance The balance of the user of the asset in the lending pool\\r\\n     * @param totalSupply The total supply of the asset in the lending pool\\r\\n     **/\\r\\n    function handleAction(\\r\\n        address asset,\\r\\n        uint256 userBalance,\\r\\n        uint256 totalSupply\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\r\\n     * @return The rewards\\r\\n     **/\\r\\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\r\\n     * @param amount Amount of rewards to claim\\r\\n     * @param to Address that will be receiving the rewards\\r\\n     * @return Rewards claimed\\r\\n     **/\\r\\n    function claimRewards(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\r\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n     * @param amount Amount of rewards to claim\\r\\n     * @param user Address to check and claim rewards\\r\\n     * @param to Address that will be receiving the rewards\\r\\n     * @return Rewards claimed\\r\\n     **/\\r\\n    function claimRewardsOnBehalf(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address user,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev returns the unclaimed rewards of the user\\r\\n     * @param user the address of the user\\r\\n     * @return the unclaimed user rewards\\r\\n     */\\r\\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\r\\n     */\\r\\n    function REWARD_TOKEN() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x03355b335cecd87182d8da4bd5db6b1682bf45d3d8c0a38e6492b3c399dbf957\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/IAaveProtocolDataProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IAaveProtocolDataProviderV2 {\\r\\n    function getReserveTokensAddresses(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address aTokenAddress,\\r\\n            address stableDebtTokenAddress,\\r\\n            address variableDebtTokenAddress\\r\\n        );\\r\\n\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 availableLiquidity,\\r\\n            uint256 totalStableDebt,\\r\\n            uint256 totalVariableDebt,\\r\\n            uint256 liquidityRate,\\r\\n            uint256 variableBorrowRate,\\r\\n            uint256 stableBorrowRate,\\r\\n            uint256 averageStableBorrowRate,\\r\\n            uint256 liquidityIndex,\\r\\n            uint256 variableBorrowIndex,\\r\\n            uint40 lastUpdateTimestamp\\r\\n        );\\r\\n\\r\\n    function getUserReserveData(address asset, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 currentATokenBalance,\\r\\n            uint256 currentStableDebt,\\r\\n            uint256 currentVariableDebt,\\r\\n            uint256 principalStableDebt,\\r\\n            uint256 scaledVariableDebt,\\r\\n            uint256 stableBorrowRate,\\r\\n            uint256 liquidityRate,\\r\\n            uint40 stableRateLastUpdated,\\r\\n            bool usageAsCollateralEnabled\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xc88e6d347acb6f0b74f6a6959ca60cc3ad87348aefd740bee9bfe1f5ebe7ede9\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/ILendingPoolAddressesProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILendingPoolAddressesProviderV2 {\\r\\n    event MarketIdSet(string newMarketId);\\r\\n    event LendingPoolUpdated(address indexed newAddress);\\r\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n    event EmergencyAdminUpdated(address indexed newAddress);\\r\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\r\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\r\\n    event PriceOracleUpdated(address indexed newAddress);\\r\\n    event LendingRateOracleUpdated(address indexed newAddress);\\r\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\r\\n\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    function setMarketId(string calldata marketId) external;\\r\\n\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\r\\n\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    function getLendingPool() external view returns (address);\\r\\n\\r\\n    function setLendingPoolImpl(address pool) external;\\r\\n\\r\\n    function getLendingPoolConfigurator() external view returns (address);\\r\\n\\r\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\r\\n\\r\\n    function getLendingPoolCollateralManager() external view returns (address);\\r\\n\\r\\n    function setLendingPoolCollateralManager(address manager) external;\\r\\n\\r\\n    function getPoolAdmin() external view returns (address);\\r\\n\\r\\n    function setPoolAdmin(address admin) external;\\r\\n\\r\\n    function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n    function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    function setPriceOracle(address priceOracle) external;\\r\\n\\r\\n    function getLendingRateOracle() external view returns (address);\\r\\n\\r\\n    function setLendingRateOracle(address lendingRateOracle) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xdd1d8e7febc761bc9f311aea0aec07953c9d64e499b86d3990675060bbdbbff0\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/ILendingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\r\\nimport {DataTypes} from \\\"../libraries/DataTypes.sol\\\";\\r\\n\\r\\ninterface ILendingPoolV2 {\\r\\n    /**\\r\\n     * @dev Emitted on deposit()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the deposit\\r\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\r\\n     * @param amount The amount deposited\\r\\n     * @param referral The referral code used\\r\\n     **/\\r\\n    event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlyng asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to Address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed\\r\\n     * @param referral The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 borrowRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referral\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     **/\\r\\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param rateMode The rate mode that the user wants to swap to\\r\\n     **/\\r\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address indexed initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        uint256 premium,\\r\\n        uint16 referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered.\\r\\n     */\\r\\n    event Paused();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted.\\r\\n     */\\r\\n    event Unpaused();\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\r\\n     * LendingPoolCollateral manager using a DELEGATECALL\\r\\n     * This allows to have the events in the generated ABI for LendingPool.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\r\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\r\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\r\\n     * gets added to the LendingPool ABI\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The new liquidity rate\\r\\n     * @param stableBorrowRate The new stable borrow rate\\r\\n     * @param variableBorrowRate The new variable borrow rate\\r\\n     * @param liquidityIndex The new liquidity index\\r\\n     * @param variableBorrowIndex The new variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to deposit\\r\\n     * @param amount The amount to be deposited\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 rateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param rateMode The rate mode that the user wants to swap to\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\r\\n     *        borrowed at a stable rate and depositors are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\r\\n     * @param asset The address of the underlying asset deposited\\r\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\r\\n     * For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts amounts being flash-borrowed\\r\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata modes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralETH the total collateral in ETH of the user\\r\\n     * @return totalDebtETH the total debt in ETH of the user\\r\\n     * @return availableBorrowsETH the borrowing power left of the user\\r\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\r\\n     * @return ltv the loan to value of the user\\r\\n     * @return healthFactor the current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralETH,\\r\\n            uint256 totalDebtETH,\\r\\n            uint256 availableBorrowsETH,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    function initReserve(\\r\\n        address reserve,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\r\\n\\r\\n    function setConfiguration(address reserve, uint256 configuration) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromAfter,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\\r\\n\\r\\n    function setPause(bool val) external;\\r\\n\\r\\n    function paused() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x6bbd654098a41abf740dba340d80d86910f2b074c4019fb0f55919ab9d843234\",\"license\":\"MIT\"},\"contracts/strategies/aave/interfaces/IStakedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStakedToken {\\r\\n    function stake(address to, uint256 amount) external;\\r\\n\\r\\n    function redeem(address to, uint256 amount) external;\\r\\n\\r\\n    function cooldown() external;\\r\\n\\r\\n    function claimRewards(address to, uint256 amount) external;\\r\\n\\r\\n    function stakersCooldowns(address staker) external view returns (uint256);\\r\\n\\r\\n    function COOLDOWN_SECONDS() external view returns (uint256);\\r\\n\\r\\n    function UNSTAKE_WINDOW() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xfc04b11f978762da1438b327a30eef3fd77c732081e9a29e86e5b24357d78c63\",\"license\":\"MIT\"},\"contracts/strategies/aave/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\r\\n    struct ReserveData {\\r\\n        //stores the reserve configuration\\r\\n        ReserveConfigurationMap configuration;\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        //the current stable borrow rate. Expressed in ray\\r\\n        uint128 currentStableBorrowRate;\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        //tokens addresses\\r\\n        address aTokenAddress;\\r\\n        address stableDebtTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n        //the id of the reserve. Represents the position in the list of the active reserves\\r\\n        uint8 id;\\r\\n    }\\r\\n\\r\\n    struct ReserveConfigurationMap {\\r\\n        //bit 0-15: LTV\\r\\n        //bit 16-31: Liq. threshold\\r\\n        //bit 32-47: Liq. bonus\\r\\n        //bit 48-55: Decimals\\r\\n        //bit 56: Reserve is active\\r\\n        //bit 57: reserve is frozen\\r\\n        //bit 58: borrowing is enabled\\r\\n        //bit 59: stable rate borrowing enabled\\r\\n        //bit 60-63: reserved\\r\\n        //bit 64-79: reserve factor\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    struct UserConfigurationMap {\\r\\n        uint256 data;\\r\\n    }\\r\\n\\r\\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\\r\\n}\\r\\n\",\"keccak256\":\"0x5481cc6914a47146083dcc6876b8c110487d5fa6940c392968e0a01b141ad430\",\"license\":\"MIT\"},\"contracts/strategies/aave/libraries/DistributionTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary DistributionTypes {\\r\\n    struct AssetConfigInput {\\r\\n        uint104 emissionPerSecond;\\r\\n        uint256 totalStaked;\\r\\n        address underlyingAsset;\\r\\n    }\\r\\n\\r\\n    struct UserStakeInput {\\r\\n        address underlyingAsset;\\r\\n        uint256 stakedByUser;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x91be4ca41547ff32bbca981a799213a64c0975ef7f195093ddc6a75ec355b01e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002e57506200002e62000134565b806200003d575060005460ff16155b6200007a5760405162461bcd60e51b815260040180806020018281038252602e81526020018062001fe4602e913960400191505060405180910390fd5b600054610100900460ff16158015620000a6576000805460ff1961ff0019909116610100171660011790555b6000620000b262000152565b6001600160a01b031614620000c357fe5b6000620000cf62000184565b6001600160a01b031614620000e057fe5b6000620000ec620001b1565b6001600160a01b031614620000fd57fe5b600062000109620001de565b6001600160a01b0316146200011a57fe5b80156200012d576000805461ff00191690555b5062000215565b60006200014c306200020b60201b620009b01760201c565b15905090565b60006200017f7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c62000211565b905090565b60006200017f7fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7462000211565b60006200017f7f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81262000211565b60006200017f7faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c62000211565b3b151590565b5490565b611dbf80620002256000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637b103999116100b8578063af1df2551161007c578063af1df25514610281578063c9168a5914610289578063cc7a262e14610291578063dc2c256f14610299578063e8b5e51f146102cf578063f43d19b9146102d757610142565b80637b1039991461023b578063853828b614610243578063a59a99731461024b578063a91ee0dc14610253578063aa5c3ab41461027957610142565b806359356c5c1161010a57806359356c5c146101b25780635aa6e675146101ba5780635b9f0016146101c257806365111f3e146101ca5780636f307dc31461022b57806376cdb03b1461023357610142565b806319776d8e146101475780631985a89f14610161578063228cb733146101855780632e1a7d4d1461018d578063481c6a75146101aa575b600080fd5b61014f6102df565b60408051918252519081900360200190f35b610169610387565b604080516001600160a01b039092168252519081900360200190f35b6101696103b7565b61014f600480360360208110156101a357600080fd5b50356103e2565b61016961045a565b61014f61049c565b6101696104a6565b61014f6104e8565b61022960048036036101008110156101e157600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e00135166104f2565b005b6101696105b4565b6101696105df565b61016961060a565b610229610635565b6101696106b2565b6102296004803603602081101561026957600080fd5b50356001600160a01b03166106dd565b61014f6107c3565b6101696107ed565b61014f610818565b610169610822565b610229600480360360608110156102af57600080fd5b506001600160a01b0381358116916020810135916040909101351661084d565b610229610910565b61014f610985565b6000806102ea610387565b6001600160a01b0316141561030157506000610384565b610309610387565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d602081101561037f57600080fd5b505190505b90565b60006103b27f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d36109b6565b905090565b60006103b27faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c6109b6565b60006103ec6105df565b6001600160a01b0316336001600160a01b031614610447576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b600061045333846109ba565b9392505050565b600061046461060a565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b60006103096105b4565b60006104b061060a565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b6000610309610822565b600054610100900460ff168061050b575061050b610a05565b80610519575060005460ff16155b6105545760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561057f576000805460ff1961ff0019909116610100171660011790555b61058c8989898989610a16565b610597848484610ad2565b80156105a9576000805461ff00191690555b505050505050505050565b60006103b27f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc8126109b6565b60006103b27fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c746109b6565b60006103b27f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c6109b6565b61063d6105df565b6001600160a01b0316336001600160a01b031614610698576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006106a26102df565b90506106ae33826109ba565b5050565b60006103b27f32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b6109b6565b6106e56104a6565b6001600160a01b0316336001600160a01b03161461074a576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61075381610ba0565b61075b6104a6565b6001600160a01b0316336001600160a01b0316146107c0576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6000806107ce6103b7565b6001600160a01b031614156107e557506000610384565b6103096103b7565b60006103b27f8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda156109b6565b60006103b26102df565b60006103b27f6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa896109b6565b6108556104a6565b6001600160a01b0316336001600160a01b0316146108ba576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b6108c5818484610bca565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b6109186105df565b6001600160a01b0316336001600160a01b031614610973576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b61097b610c96565b610983610dd6565b565b60006103b27f29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b39236109b6565b3b151590565b5490565b6000816109c9575060006109ff565b60006109e46109d66106b2565b6109de6105b4565b85610e01565b905060006109fa856109f46105b4565b84610bca565b925050505b92915050565b6000610a10306109b0565b15905090565b600054610100900460ff1680610a2f5750610a2f610a05565b80610a3d575060005460ff16155b610a785760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015610aa3576000805460ff1961ff0019909116610100171660011790555b610aac86610f8f565b610ab885858585611094565b8015610aca576000805461ff00191690555b505050505050565b600054610100900460ff1680610aeb5750610aeb610a05565b80610af9575060005460ff16155b610b345760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015610b5f576000805460ff1961ff0019909116610100171660011790555b610b688461115e565b610b7183611188565b610b7a826111b2565b610b8842620d2f00016111dc565b8015610b9a576000805461ff00191690555b50505050565b6107c07f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c82611202565b600081610bd957506000610453565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d6020811015610c5257600080fd5b5051905082811015610c7957610c726001600160a01b0385168683611206565b9050610453565b610c8d6001600160a01b0385168685611206565b50909392505050565b6000610ca0610985565b9050804211156107c0576000610cb46104e8565b90506000610cc0610822565b90506000610cd7610cd08361125d565b85906112cc565b9050600083118015610ce857508042105b15610d2457610cf78284611326565b6000610d016107c3565b90508015610d2257610d22610d146103b7565b610d1c6105b4565b83611392565b505b610d3c610d2f6107ed565b610d37610387565b61155f565b610d446104e8565b92508215610b9a57610d558261173f565b6000610d608361178e565b9050428114610db6576040805162461bcd60e51b815260206004820152601760248201527f4161766556323a20436f6f6c646f776e206661696c6564000000000000000000604482015290519081900360640190fd5b6000610dcb610dc4856117de565b83906112cc565b9050610aca816111dc565b6000610de061049c565b905080156107c0576107c0610df36106b2565b610dfb6105b4565b8361181a565b600081610e1057506000610453565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e5f57600080fd5b505afa158015610e73573d6000803e3d6000fd5b505050506040513d6020811015610e8957600080fd5b50519050610ea16001600160a01b03851686856118b1565b60408051631a4ca37b60e21b81526001600160a01b0386811660048301526024820186905230604483015291516000928816916369328dec91606480830192602092919082900301818787803b158015610efa57600080fd5b505af1158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b5051905083811480610f3557508181145b610f86576040805162461bcd60e51b815260206004820152601760248201527f4161766556323a205769746864726177206661696c6564000000000000000000604482015290519081900360640190fd5b95945050505050565b600054610100900460ff1680610fa85750610fa8610a05565b80610fb6575060005460ff16155b610ff15760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561101c576000805460ff1961ff0019909116610100171660011790555b611025826109b0565b611076576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61107f82610ba0565b80156106ae576000805461ff00191690555050565b600054610100900460ff16806110ad57506110ad610a05565b806110bb575060005460ff16155b6110f65760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015611121576000805460ff1961ff0019909116610100171660011790555b61112a8561199c565b611133846119c6565b61113c836119f0565b61114582611a1a565b8015611157576000805461ff00191690555b5050505050565b6107c07f6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa8982611202565b6107c07f32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b82611202565b6107c07f8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda1582611202565b6107c07f29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b3923825b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611258908490611a44565b505050565b600080826001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561129957600080fd5b505afa1580156112ad573d6000803e3d6000fd5b505050506040513d60208110156112c357600080fd5b50519392505050565b600082820183811015610453576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80611330576106ae565b604080516301e9a69560e41b81523060048201526024810183905290516001600160a01b03841691631e9a695091604480830192600092919082900301818387803b15801561137e57600080fd5b505af1158015610aca573d6000803e3d6000fd5b600061139c61045a565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b50519050611437818685610bca565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050506040513d60208110156114cc57600080fd5b505190506001600160a01b03831663489304286114e76105df565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b50505050505050505050565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061158f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000836001600160a01b0316638b599f2683306040518363ffffffff1660e01b81526004018080602001836001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611620578181015183820152602001611608565b50505050905001935050505060206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b505190508015610b9a57836001600160a01b0316633111e7b38383306040518463ffffffff1660e01b81526004018080602001848152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019060200280838360005b838110156116ee5781810151838201526020016116d6565b50505050905001945050505050602060405180830381600087803b15801561171557600080fd5b505af1158015611729573d6000803e3d6000fd5b505050506040513d6020811015610aca57600080fd5b806001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177a57600080fd5b505af1158015611157573d6000803e3d6000fd5b600080826001600160a01b031663091030c3306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561129957600080fd5b600080826001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b15801561129957600080fd5b8061182457611258565b6118386001600160a01b03831684836118b1565b6040805163e8eda9df60e01b81526001600160a01b0384811660048301526024820184905230604483015260006064830181905292519086169263e8eda9df926084808201939182900301818387803b15801561189457600080fd5b505af11580156118a8573d6000803e3d6000fd5b50505050505050565b600061194782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561191557600080fd5b505afa158015611929573d6000803e3d6000fd5b505050506040513d602081101561193f57600080fd5b5051906112cc565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610b9a908590611a44565b6107c07fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7482611202565b6107c07f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81282611202565b6107c07f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d382611202565b6107c07faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c82611202565b6000611a99826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611af59092919063ffffffff16565b80519091501561125857808060200190516020811015611ab857600080fd5b50516112585760405162461bcd60e51b815260040180806020018281038252602a815260200180611d60602a913960400191505060405180910390fd5b6060611b048484600085611b0c565b949350505050565b606082471015611b4d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611d0c6026913960400191505060405180910390fd5b611b56856109b0565b611ba7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611be55780518252601f199092019160209182019101611bc6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c47576040519150601f19603f3d011682016040523d82523d6000602084013e611c4c565b606091505b5091509150611c5c828286611c67565b979650505050505050565b60608315611c76575081610453565b825115611c865782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611cd0578181015183820152602001611cb8565b50505050905090810190601f168015611cfd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122008be227ddda265c9abd2a09543259823a4e05332b837d9809df085e534bd1b2d64736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637b103999116100b8578063af1df2551161007c578063af1df25514610281578063c9168a5914610289578063cc7a262e14610291578063dc2c256f14610299578063e8b5e51f146102cf578063f43d19b9146102d757610142565b80637b1039991461023b578063853828b614610243578063a59a99731461024b578063a91ee0dc14610253578063aa5c3ab41461027957610142565b806359356c5c1161010a57806359356c5c146101b25780635aa6e675146101ba5780635b9f0016146101c257806365111f3e146101ca5780636f307dc31461022b57806376cdb03b1461023357610142565b806319776d8e146101475780631985a89f14610161578063228cb733146101855780632e1a7d4d1461018d578063481c6a75146101aa575b600080fd5b61014f6102df565b60408051918252519081900360200190f35b610169610387565b604080516001600160a01b039092168252519081900360200190f35b6101696103b7565b61014f600480360360208110156101a357600080fd5b50356103e2565b61016961045a565b61014f61049c565b6101696104a6565b61014f6104e8565b61022960048036036101008110156101e157600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a081013582169160c082013581169160e00135166104f2565b005b6101696105b4565b6101696105df565b61016961060a565b610229610635565b6101696106b2565b6102296004803603602081101561026957600080fd5b50356001600160a01b03166106dd565b61014f6107c3565b6101696107ed565b61014f610818565b610169610822565b610229600480360360608110156102af57600080fd5b506001600160a01b0381358116916020810135916040909101351661084d565b610229610910565b61014f610985565b6000806102ea610387565b6001600160a01b0316141561030157506000610384565b610309610387565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561035557600080fd5b505afa158015610369573d6000803e3d6000fd5b505050506040513d602081101561037f57600080fd5b505190505b90565b60006103b27f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d36109b6565b905090565b60006103b27faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c6109b6565b60006103ec6105df565b6001600160a01b0316336001600160a01b031614610447576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b600061045333846109ba565b9392505050565b600061046461060a565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b60006103096105b4565b60006104b061060a565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561035557600080fd5b6000610309610822565b600054610100900460ff168061050b575061050b610a05565b80610519575060005460ff16155b6105545760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561057f576000805460ff1961ff0019909116610100171660011790555b61058c8989898989610a16565b610597848484610ad2565b80156105a9576000805461ff00191690555b505050505050505050565b60006103b27f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc8126109b6565b60006103b27fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c746109b6565b60006103b27f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c6109b6565b61063d6105df565b6001600160a01b0316336001600160a01b031614610698576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b60006106a26102df565b90506106ae33826109ba565b5050565b60006103b27f32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b6109b6565b6106e56104a6565b6001600160a01b0316336001600160a01b03161461074a576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61075381610ba0565b61075b6104a6565b6001600160a01b0316336001600160a01b0316146107c0576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6000806107ce6103b7565b6001600160a01b031614156107e557506000610384565b6103096103b7565b60006103b27f8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda156109b6565b60006103b26102df565b60006103b27f6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa896109b6565b6108556104a6565b6001600160a01b0316336001600160a01b0316146108ba576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b6108c5818484610bca565b50604080518381526001600160a01b0383811660208301528251908616927f8d71d334346acd8aade4cdca3af39a37fca2620cd870d28ccf94ae4ade61c8f3928290030190a2505050565b6109186105df565b6001600160a01b0316336001600160a01b031614610973576040805162461bcd60e51b815260206004820152601360248201527253747261746567793a204f6e6c792042616e6b60681b604482015290519081900360640190fd5b61097b610c96565b610983610dd6565b565b60006103b27f29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b39236109b6565b3b151590565b5490565b6000816109c9575060006109ff565b60006109e46109d66106b2565b6109de6105b4565b85610e01565b905060006109fa856109f46105b4565b84610bca565b925050505b92915050565b6000610a10306109b0565b15905090565b600054610100900460ff1680610a2f5750610a2f610a05565b80610a3d575060005460ff16155b610a785760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015610aa3576000805460ff1961ff0019909116610100171660011790555b610aac86610f8f565b610ab885858585611094565b8015610aca576000805461ff00191690555b505050505050565b600054610100900460ff1680610aeb5750610aeb610a05565b80610af9575060005460ff16155b610b345760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015610b5f576000805460ff1961ff0019909116610100171660011790555b610b688461115e565b610b7183611188565b610b7a826111b2565b610b8842620d2f00016111dc565b8015610b9a576000805461ff00191690555b50505050565b6107c07f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c82611202565b600081610bd957506000610453565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c2857600080fd5b505afa158015610c3c573d6000803e3d6000fd5b505050506040513d6020811015610c5257600080fd5b5051905082811015610c7957610c726001600160a01b0385168683611206565b9050610453565b610c8d6001600160a01b0385168685611206565b50909392505050565b6000610ca0610985565b9050804211156107c0576000610cb46104e8565b90506000610cc0610822565b90506000610cd7610cd08361125d565b85906112cc565b9050600083118015610ce857508042105b15610d2457610cf78284611326565b6000610d016107c3565b90508015610d2257610d22610d146103b7565b610d1c6105b4565b83611392565b505b610d3c610d2f6107ed565b610d37610387565b61155f565b610d446104e8565b92508215610b9a57610d558261173f565b6000610d608361178e565b9050428114610db6576040805162461bcd60e51b815260206004820152601760248201527f4161766556323a20436f6f6c646f776e206661696c6564000000000000000000604482015290519081900360640190fd5b6000610dcb610dc4856117de565b83906112cc565b9050610aca816111dc565b6000610de061049c565b905080156107c0576107c0610df36106b2565b610dfb6105b4565b8361181a565b600081610e1057506000610453565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e5f57600080fd5b505afa158015610e73573d6000803e3d6000fd5b505050506040513d6020811015610e8957600080fd5b50519050610ea16001600160a01b03851686856118b1565b60408051631a4ca37b60e21b81526001600160a01b0386811660048301526024820186905230604483015291516000928816916369328dec91606480830192602092919082900301818787803b158015610efa57600080fd5b505af1158015610f0e573d6000803e3d6000fd5b505050506040513d6020811015610f2457600080fd5b5051905083811480610f3557508181145b610f86576040805162461bcd60e51b815260206004820152601760248201527f4161766556323a205769746864726177206661696c6564000000000000000000604482015290519081900360640190fd5b95945050505050565b600054610100900460ff1680610fa85750610fa8610a05565b80610fb6575060005460ff16155b610ff15760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff1615801561101c576000805460ff1961ff0019909116610100171660011790555b611025826109b0565b611076576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61107f82610ba0565b80156106ae576000805461ff00191690555050565b600054610100900460ff16806110ad57506110ad610a05565b806110bb575060005460ff16155b6110f65760405162461bcd60e51b815260040180806020018281038252602e815260200180611d32602e913960400191505060405180910390fd5b600054610100900460ff16158015611121576000805460ff1961ff0019909116610100171660011790555b61112a8561199c565b611133846119c6565b61113c836119f0565b61114582611a1a565b8015611157576000805461ff00191690555b5050505050565b6107c07f6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa8982611202565b6107c07f32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b82611202565b6107c07f8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda1582611202565b6107c07f29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b3923825b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611258908490611a44565b505050565b600080826001600160a01b031663359c4a966040518163ffffffff1660e01b815260040160206040518083038186803b15801561129957600080fd5b505afa1580156112ad573d6000803e3d6000fd5b505050506040513d60208110156112c357600080fd5b50519392505050565b600082820183811015610453576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b80611330576106ae565b604080516301e9a69560e41b81523060048201526024810183905290516001600160a01b03841691631e9a695091604480830192600092919082900301818387803b15801561137e57600080fd5b505af1158015610aca573d6000803e3d6000fd5b600061139c61045a565b90506000816001600160a01b031663921c86d286866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b50519050611437818685610bca565b5060408051636f70e66f60e01b81526001600160a01b0384811660048301528781166024830152868116604483015260648201869052600160848301529151600092841691636f70e66f9160a480830192602092919082900301818787803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b505050506040513d60208110156114cc57600080fd5b505190506001600160a01b03831663489304286114e76105df565b87846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b50505050505050505050565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061158f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000836001600160a01b0316638b599f2683306040518363ffffffff1660e01b81526004018080602001836001600160a01b03168152602001828103825284818151815260200191508051906020019060200280838360005b83811015611620578181015183820152602001611608565b50505050905001935050505060206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b505190508015610b9a57836001600160a01b0316633111e7b38383306040518463ffffffff1660e01b81526004018080602001848152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019060200280838360005b838110156116ee5781810151838201526020016116d6565b50505050905001945050505050602060405180830381600087803b15801561171557600080fd5b505af1158015611729573d6000803e3d6000fd5b505050506040513d6020811015610aca57600080fd5b806001600160a01b031663787a08a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561177a57600080fd5b505af1158015611157573d6000803e3d6000fd5b600080826001600160a01b031663091030c3306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561129957600080fd5b600080826001600160a01b03166372b49d636040518163ffffffff1660e01b815260040160206040518083038186803b15801561129957600080fd5b8061182457611258565b6118386001600160a01b03831684836118b1565b6040805163e8eda9df60e01b81526001600160a01b0384811660048301526024820184905230604483015260006064830181905292519086169263e8eda9df926084808201939182900301818387803b15801561189457600080fd5b505af11580156118a8573d6000803e3d6000fd5b50505050505050565b600061194782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561191557600080fd5b505afa158015611929573d6000803e3d6000fd5b505050506040513d602081101561193f57600080fd5b5051906112cc565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610b9a908590611a44565b6107c07fd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c7482611202565b6107c07f0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc81282611202565b6107c07f4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d382611202565b6107c07faeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c82611202565b6000611a99826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611af59092919063ffffffff16565b80519091501561125857808060200190516020811015611ab857600080fd5b50516112585760405162461bcd60e51b815260040180806020018281038252602a815260200180611d60602a913960400191505060405180910390fd5b6060611b048484600085611b0c565b949350505050565b606082471015611b4d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611d0c6026913960400191505060405180910390fd5b611b56856109b0565b611ba7576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611be55780518252601f199092019160209182019101611bc6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611c47576040519150601f19603f3d011682016040523d82523d6000602084013e611c4c565b606091505b5091509150611c5c828286611c67565b979650505050505050565b60608315611c76575081610453565b825115611c865782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611cd0578181015183820152602001611cb8565b50505050905090810190601f168015611cfd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122008be227ddda265c9abd2a09543259823a4e05332b837d9809df085e534bd1b2d64736f6c63430007060033",
  "devdoc": {
    "details": "Underlying: USDC, USDT, etc.Derivative: aToken, 1:1 ratio with underlyinghttps://docs.aave.com/developers/the-core-protocol/atokens",
    "kind": "dev",
    "methods": {
      "derivativeBalance()": {
        "details": "Balance of derivative tokens received from Strategy, if applicable",
        "returns": {
          "_0": "The balance of derivative tokens"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "initializeAaveV2Strategy(address,address,address,address,address,address,address,address)": {
        "details": "The function should be called at time of deployment",
        "params": {
          "bank_": "the bank associated with the strategy",
          "derivative_": "the aToken address received from Aave",
          "incentivesController_": "the AaveV2 rewards contract",
          "lendingPool_": "the AaveV2 lending pool that we lend to",
          "registry_": "the registry contract",
          "reward_": "the address of the reward token stkAAVE",
          "underlying_": "the underlying token that is deposited"
        }
      },
      "invest()": {
        "details": "Compound by claiming stkAAVE, then unwrapping + liquidating if cooldown permitsDeposit all underlying to receive aTokens"
      },
      "investedBalance()": {
        "details": "aTokens are 1:1 with underlying, they are continuously distributed to users"
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "rewardBalance()": {
        "details": "Balance of reward tokens awaiting liquidation, if applicable"
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "stakedBalance()": {
        "details": "Rewards are first received in stkAAVe, then must undergo 10 day cooldownBefore batch claiming."
      },
      "sweep(address,uint256,address)": {
        "params": {
          "amount": "The amount of tokens to sweep",
          "recipient": "The address to send the sweeped tokens to",
          "token": "The address of the token to sweep"
        }
      },
      "underlyingBalance()": {
        "details": "Balance of underlying awaiting Strategy investment"
      }
    },
    "title": "Oh! Finance Aave V2 Strategy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bank()": {
        "notice": "The Bank that the Strategy is associated with"
      },
      "constructor": {
        "notice": "Initialize the AaveV2 Strategy Logic"
      },
      "derivative()": {
        "notice": "The derivative token received from AaveV2 (aToken)"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "initializeAaveV2Strategy(address,address,address,address,address,address,address,address)": {
        "notice": "Initialize the AaveV2 Strategy Proxy"
      },
      "invest()": {
        "notice": "Invest in the AaveV2 Strategy"
      },
      "investedBalance()": {
        "notice": "Balance of underlying invested in AaveV2"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "reward()": {
        "notice": "The reward token received from AaveV2 (stkAave)"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "stakedBalance()": {
        "notice": "Balance of stkAAVE await liquidation"
      },
      "sweep(address,uint256,address)": {
        "notice": "Governance function to sweep any stuck / airdrop tokens to a given recipient"
      },
      "underlying()": {
        "notice": "The underlying token the Strategy invests in AaveV2"
      }
    },
    "notice": "Standard strategy using Aave V2 Protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 847,
        "contract": "contracts/strategies/aave/OhAaveV2Strategy.sol:OhAaveV2Strategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 850,
        "contract": "contracts/strategies/aave/OhAaveV2Strategy.sol:OhAaveV2Strategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}