{
  "address": "0x98816EB4c559F2006eDb860e7ff6cb9C68d0C324",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "ExitAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Invest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "Unpause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "exitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        }
      ],
      "name": "initializeBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "investAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "strategyBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "virtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8e7f3ac26c105cadd15162670134bbdc760e828803b68c3905f5312f2ff7309",
  "receipt": {
    "to": null,
    "from": "0x000000010b5AFA32AB82B72625D68571B11EAE13",
    "contractAddress": "0x98816EB4c559F2006eDb860e7ff6cb9C68d0C324",
    "transactionIndex": 115,
    "gasUsed": "3175885",
    "logsBloom": "0x
    "blockHash": "0xc50df38673098260df9f338919ef9f45543f125c2a96807ea7103e30e6c6273f",
    "transactionHash": "0xe8e7f3ac26c105cadd15162670134bbdc760e828803b68c3905f5312f2ff7309",
    "logs": [],
    "blockNumber": 13490522,
    "cumulativeGasUsed": "11230998",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e2f886b8a24d1a496d54c6b0fef6217b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ExitAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"exitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"name\":\"initializeBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"investAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"strategyBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Base Upgradeable Bank Contract\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"Deposits for the caller\",\"params\":{\"amount\":\"The amount of underlying to deposit\"}},\"depositFor(uint256,address)\":{\"details\":\"Deposits for any address except the burn address\",\"params\":{\"amount\":\"The amount of underlying to deposit\",\"recipient\":\"The address to receive Bank shares\"}},\"depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount of undelrying to deposit\",\"deadline\":\"The UNIX timestamp the permit expires at\",\"r\":\"Half of the ECDSA signature pair\",\"recipient\":\"The address to receive Bank shares\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"exit(address,uint256)\":{\"params\":{\"strategy\":\"The address of the Strategy to exit\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initializeBank(string,string,address,address)\":{\"details\":\"Should be called when deploying the proxy contract\",\"params\":{\"name_\":\"The name of the Bank Token\",\"registry_\":\"Rhe address of the registry\",\"symbol_\":\"The symbol of the Bank Token\",\"underlying_\":\"Rhe address of the underlying token that is deposited\"}},\"invest(address,uint256)\":{\"details\":\"Only callable by Governance or Manager\",\"params\":{\"amount\":\"The amount of underlying to invest in the Strategy\",\"strategy\":\"The address of the Strategy to invest in\"}},\"investAll(address)\":{\"details\":\"Only callable by Governance or Manager\",\"params\":{\"strategy\":\"The address of the Strategy to invest all underlying in\"}},\"investedBalance()\":{\"returns\":{\"amount\":\"The virtual balance invested in all Strategies\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"paused()\":{\"returns\":{\"_0\":\"Boolean for if Bank is paused\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"strategies(uint256)\":{\"params\":{\"i\":\"The Strategy index\"},\"returns\":{\"_0\":\"The address of the Strategy\"}},\"strategyBalance(uint256)\":{\"details\":\"Virtual Balance represents the amount of underlying available if we withdrew all\",\"params\":{\"i\":\"The Strategy Index\"},\"returns\":{\"_0\":\"The virtual balance of underlying invested in the Strategy\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalStrategies()\":{\"returns\":{\"_0\":\"The number of Strategies this Bank uses\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"underlying()\":{\"returns\":{\"_0\":\"The underlying token address\"}},\"underlyingBalance()\":{\"returns\":{\"_0\":\"Underlying token balance\"}},\"virtualBalance()\":{\"returns\":{\"_0\":\"The balance of underlying if we were to exit all Strategies\"}},\"virtualPrice()\":{\"returns\":{\"_0\":\"The amount of underlying each token represents\"}}},\"title\":\"Oh! Finance Bank\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Emitted when a user deposits an amount of underlying\"},\"Exit(address,uint256)\":{\"notice\":\"Event emitted when an amount is withdrawn and exits a strategy\"},\"ExitAll(address)\":{\"notice\":\"Event emitted when all capital is withdrawn and exitted from a strategy\"},\"Invest(address,uint256)\":{\"notice\":\"Emitted when the Bank invests in a Strategy\"},\"Pause(address)\":{\"notice\":\"Event emitted when an amount is withdrawn and exits a strategy\"},\"Unpause(address)\":{\"notice\":\"Event emitted when all capital is withdrawn and exitted from a strategy\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted when a user withdraws an amount of underlying\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize the Bank Logic\"},\"deposit(uint256)\":{\"notice\":\"Deposit an amount of underlying to receive Bank shares\"},\"depositFor(uint256,address)\":{\"notice\":\"Deposit an amount of underlying for a given recipient\"},\"depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit with Permit for ERC712 Compliant Tokens\"},\"exit(address,uint256)\":{\"notice\":\"Exit and withdraw a given amount from a strategy\"},\"exitAll(address)\":{\"notice\":\"Exit and withdraw all underlying from a given strategy\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"initializeBank(string,string,address,address)\":{\"notice\":\"Initialize the Bank Proxy\"},\"invest(address,uint256)\":{\"notice\":\"Invest a given amount underlying into a given strategy\"},\"investAll(address)\":{\"notice\":\"Invest all available underlying into a given strategy\"},\"investedBalance()\":{\"notice\":\"Get the total virtual amount invested in all Strategies\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"pause()\":{\"notice\":\"Pause the Bank\"},\"paused()\":{\"notice\":\"Pause status for this Bank\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"strategies(uint256)\":{\"notice\":\"The Bank Strategy at index i\"},\"strategyBalance(uint256)\":{\"notice\":\"Get the virtual balance invested in the Strategy at a given index\"},\"totalStrategies()\":{\"notice\":\"Total Strategies for this Bank\"},\"underlying()\":{\"notice\":\"The underlying token that is deposited\"},\"underlyingBalance()\":{\"notice\":\"Get the underlying balance on the Bank\"},\"unpause()\":{\"notice\":\"Unpause the Bank\"},\"virtualBalance()\":{\"notice\":\"Get the total virtual amount available to the bank\"},\"virtualPrice()\":{\"notice\":\"The virtual price of each token\"}},\"notice\":\"ERC-20 Token that represents user share ownership\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bank/OhBank.sol\":\"OhBank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0xe348c45df01e0705c50ede5063d77111a996722ffb83f0a22979338a32b06887\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport \\\"../token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../utils/CountersUpgradeable.sol\\\";\\nimport \\\"./EIP712Upgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                _nonces[owner].current(),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb30c40eb91411e29d23c8184b19fd37e6c2447f685631b798af2871ede483157\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x30c000f3a68d252b09a738c782e0fc9dbf168b81021a195de6102f8d095681ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../math/SafeMathUpgradeable.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary CountersUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\",\"keccak256\":\"0xe0162cc9b4d619790be38ce4c184a1cd33d41698629ae6bcac00049f24f6cce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/drafts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1aab7754719ba764a8a05bec47e975001400f62986474945eb3dbee6d871259f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/bank/OhBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/drafts/IERC20Permit.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {IStrategy} from \\\"../interfaces/strategies/IStrategy.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriberUpgradeable} from \\\"../registry/OhSubscriberUpgradeable.sol\\\";\\r\\nimport {OhBankStorage} from \\\"./OhBankStorage.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Bank\\r\\n/// @notice ERC-20 Token that represents user share ownership\\r\\n/// @dev Base Upgradeable Bank Contract\\r\\ncontract OhBank is ERC20Upgradeable, ERC20PermitUpgradeable, OhSubscriberUpgradeable, OhBankStorage, IBank {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Emitted when the Bank invests in a Strategy\\r\\n    event Invest(address strategy, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when a user deposits an amount of underlying\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when a user withdraws an amount of underlying\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when an amount is withdrawn and exits a strategy\\r\\n    event Exit(address indexed strategy, uint256 amount);\\r\\n\\r\\n    /// @notice Event emitted when all capital is withdrawn and exitted from a strategy\\r\\n    event ExitAll(address indexed strategy);\\r\\n\\r\\n    /// @notice Event emitted when an amount is withdrawn and exits a strategy\\r\\n    event Pause(address indexed governance);\\r\\n\\r\\n    /// @notice Event emitted when all capital is withdrawn and exitted from a strategy\\r\\n    event Unpause(address indexed governance);\\r\\n\\r\\n    /// @notice Protocol defense modifier\\r\\n    /// @dev Only allow user-facing functions to be called by EOA or be whitelisted\\r\\n    modifier defense {\\r\\n        require(msg.sender == tx.origin || IManager(manager()).whitelisted(msg.sender), \\\"Bank: Only EOA or whitelisted\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Bank Logic\\r\\n    constructor() initializer {\\r\\n        assert(registry() == address(0));\\r\\n        assert(underlying() == address(0));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Bank Proxy\\r\\n    /// @param name_ The name of the Bank Token\\r\\n    /// @param symbol_ The symbol of the Bank Token\\r\\n    /// @param registry_ Rhe address of the registry\\r\\n    /// @param underlying_ Rhe address of the underlying token that is deposited\\r\\n    /// @dev Should be called when deploying the proxy contract\\r\\n    function initializeBank(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address registry_,\\r\\n        address underlying_\\r\\n    ) public initializer {\\r\\n        // setup token first, use same token decimals\\r\\n        uint8 decimals_ = ERC20Upgradeable(underlying_).decimals();\\r\\n        __ERC20_init(name_, symbol_);\\r\\n        _setupDecimals(decimals_);\\r\\n\\r\\n        // setup permit\\r\\n        __ERC20Permit_init(name_);\\r\\n\\r\\n        // initialize subscriber and storage\\r\\n        initializeSubscriber(registry_);\\r\\n        initializeStorage(underlying_);\\r\\n    }\\r\\n\\r\\n    /// @notice The Bank Strategy at index i\\r\\n    /// @param i The Strategy index\\r\\n    /// @return The address of the Strategy\\r\\n    function strategies(uint256 i) public view override returns (address) {\\r\\n        return IManager(manager()).strategies(address(this), i);\\r\\n    }\\r\\n\\r\\n    /// @notice Total Strategies for this Bank\\r\\n    /// @return The number of Strategies this Bank uses\\r\\n    function totalStrategies() public view override returns (uint256) {\\r\\n        return IManager(manager()).totalStrategies(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Get the underlying balance on the Bank\\r\\n    /// @return Underlying token balance\\r\\n    function underlyingBalance() public view override returns (uint256) {\\r\\n        return IERC20(underlying()).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Get the virtual balance invested in the Strategy at a given index\\r\\n    /// @dev Virtual Balance represents the amount of underlying available if we withdrew all\\r\\n    /// @param i The Strategy Index\\r\\n    /// @return The virtual balance of underlying invested in the Strategy\\r\\n    function strategyBalance(uint256 i) public view override returns (uint256) {\\r\\n        address strategy = strategies(i);\\r\\n        return IStrategy(strategy).investedBalance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total virtual amount invested in all Strategies\\r\\n    /// @return amount The virtual balance invested in all Strategies\\r\\n    function investedBalance() public view override returns (uint256 amount) {\\r\\n        uint256 length = totalStrategies();\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            amount = amount.add(strategyBalance(i));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total virtual amount available to the bank\\r\\n    /// @return The balance of underlying if we were to exit all Strategies\\r\\n    function virtualBalance() public view override returns (uint256) {\\r\\n        return underlyingBalance().add(investedBalance());\\r\\n    }\\r\\n\\r\\n    /// @notice The virtual price of each token\\r\\n    /// @return The amount of underlying each token represents\\r\\n    function virtualPrice() public view override returns (uint256) {\\r\\n        uint256 totalSupply = totalSupply();\\r\\n        uint256 unit = 10**decimals();\\r\\n        return totalSupply == 0 ? unit : virtualBalance().mul(unit).div(totalSupply);\\r\\n    }\\r\\n\\r\\n    /// @notice Invest a given amount underlying into a given strategy\\r\\n    /// @dev Only callable by Governance or Manager\\r\\n    /// @param strategy The address of the Strategy to invest in\\r\\n    /// @param amount The amount of underlying to invest in the Strategy\\r\\n    function invest(address strategy, uint256 amount) external override onlyAuthorized {\\r\\n        _invest(strategy, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Invest all available underlying into a given strategy\\r\\n    /// @dev Only callable by Governance or Manager\\r\\n    /// @param strategy The address of the Strategy to invest all underlying in\\r\\n    function investAll(address strategy) external override onlyAuthorized {\\r\\n        _invest(strategy, underlyingBalance());\\r\\n    }\\r\\n\\r\\n    /// @notice Exit and withdraw a given amount from a strategy\\r\\n    /// @param strategy The address of the Strategy to exit\\r\\n    function exit(address strategy, uint256 amount) external override onlyAuthorized {\\r\\n        IStrategy(strategy).withdraw(amount);\\r\\n        emit Exit(strategy, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Exit and withdraw all underlying from a given strategy\\r\\n    function exitAll(address strategy) external override onlyAuthorized {\\r\\n        IStrategy(strategy).withdrawAll();\\r\\n        emit ExitAll(strategy);\\r\\n    }\\r\\n\\r\\n    /// @notice Pause the Bank\\r\\n    function pause() external override onlyGovernance {\\r\\n        _setPaused(true);\\r\\n        emit Pause(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Unpause the Bank\\r\\n    function unpause() external override onlyGovernance {\\r\\n        _setPaused(false);\\r\\n        emit Unpause(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit an amount of underlying to receive Bank shares\\r\\n    /// @dev Deposits for the caller\\r\\n    /// @param amount The amount of underlying to deposit\\r\\n    function deposit(uint256 amount) external override defense {\\r\\n        _deposit(amount, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit an amount of underlying for a given recipient\\r\\n    /// @dev Deposits for any address except the burn address\\r\\n    /// @param amount The amount of underlying to deposit\\r\\n    /// @param recipient The address to receive Bank shares\\r\\n    function depositFor(uint256 amount, address recipient) external override defense {\\r\\n        require(recipient != address(0), \\\"Bank: Invalid Recipient\\\");\\r\\n        _deposit(amount, msg.sender, recipient);\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit with Permit for ERC712 Compliant Tokens\\r\\n    /// @param amount The amount of undelrying to deposit\\r\\n    /// @param recipient The address to receive Bank shares\\r\\n    /// @param deadline The UNIX timestamp the permit expires at\\r\\n    /// @param v The recovery byte of the signature\\r\\n    /// @param r Half of the ECDSA signature pair\\r\\n    /// @param s Half of the ECDSA signature pair\\r\\n    function depositWithPermit(\\r\\n        uint256 amount,\\r\\n        address recipient,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external defense {\\r\\n        require(recipient != address(0), \\\"Bank: Invalid Recipient\\\");\\r\\n        IERC20Permit(underlying()).permit(msg.sender, address(this), amount, deadline, v, r, s);\\r\\n        _deposit(amount, msg.sender, recipient);\\r\\n    }\\r\\n\\r\\n    // withdraw an amount of shares for underlying\\r\\n    function withdraw(uint256 shares) external override defense {\\r\\n        _withdraw(msg.sender, shares);\\r\\n    }\\r\\n\\r\\n    /// @dev Invest an amount into a strategy\\r\\n    function _invest(address strategy, uint256 amount) internal {\\r\\n        // transfer to strategy if amount > 0\\r\\n        if (amount > 0) {\\r\\n            TransferHelper.safeTokenTransfer(strategy, underlying(), amount);\\r\\n        }\\r\\n        // perform strategy investment, handle no new underlying in strategy\\r\\n        IStrategy(strategy).invest();\\r\\n        emit Invest(strategy, amount);\\r\\n    }\\r\\n\\r\\n    // deposit underlying to receive shares\\r\\n    function _deposit(\\r\\n        uint256 amount,\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal {\\r\\n        require(totalStrategies() > 0, \\\"Bank: No Strategies\\\");\\r\\n        require(amount > 0, \\\"Bank: Invalid Deposit\\\");\\r\\n\\r\\n        uint256 totalSupply = totalSupply();\\r\\n        uint256 mintAmount = totalSupply == 0 ? amount : amount.mul(totalSupply).div(virtualBalance());\\r\\n\\r\\n        _mint(recipient, mintAmount);\\r\\n        IERC20(underlying()).safeTransferFrom(sender, address(this), amount);\\r\\n\\r\\n        emit Deposit(recipient, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw shares for underlying\\r\\n    /// @dev 3 scenarios can occur\\r\\n    /// @dev   1. If we have enough underlying on the Bank to cover the withdrawal, transfer from Bank\\r\\n    /// @dev   2. Else if we are withdrawing all shares, withdraw all underlying tokens\\r\\n    /// @dev   3. Else, transfer from each Strategy until the withdrawal is satisfied\\r\\n    function _withdraw(address user, uint256 shares) internal {\\r\\n        require(shares > 0, \\\"Bank: Invalid withdrawal\\\");\\r\\n        uint256 totalSupply = totalSupply();\\r\\n        _burn(user, shares);\\r\\n\\r\\n        uint256 balance = underlyingBalance();\\r\\n        uint256 withdrawAmount = virtualBalance().mul(shares).div(totalSupply);\\r\\n        if (withdrawAmount > balance) {\\r\\n            if (shares == totalSupply) {\\r\\n                _withdrawAll();\\r\\n            } else {\\r\\n                _withdrawRemaining(withdrawAmount.sub(balance));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTokenTransfer(user, underlying(), withdrawAmount);\\r\\n        emit Withdraw(user, withdrawAmount);\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw all underlying to the bank\\r\\n    function _withdrawAll() internal {\\r\\n        uint256 length = totalStrategies();\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            IStrategy(strategies(i)).withdrawAll();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Withdraw from each strategy until remaining amount is reached\\r\\n    function _withdrawRemaining(uint256 amount) internal {\\r\\n        address manager = manager();\\r\\n        uint256 index = IManager(manager).withdrawIndex(address(this));\\r\\n        uint256 length = totalStrategies();\\r\\n        uint256 i = 0;\\r\\n\\r\\n        // while we haven't withdrawn from each Strategy and we haven't withdrawn the total amount\\r\\n        while (i < length && amount > 0) {\\r\\n            // perform the Strategy withdrawal\\r\\n            uint256 withdrawn = IStrategy(strategies(index)).withdraw(amount);\\r\\n\\r\\n            // update variables\\r\\n            amount = amount.sub(withdrawn);\\r\\n            i = i + 1;\\r\\n\\r\\n            // increment Strategy index or restart\\r\\n            if (index - 1 == length) {\\r\\n                index = 0;\\r\\n            } else {\\r\\n                index = index + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update withdrawal index\\r\\n        IManager(manager).setWithdrawIndex(index);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x20befec0a49257f87b53b138d9dfc6c0e1d964bcc29e4f5b0b117d13e85d60f2\",\"license\":\"MIT\"},\"contracts/bank/OhBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {IBankStorage} from \\\"../interfaces/bank/IBankStorage.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract OhBankStorage is Initializable, OhUpgradeable, IBankStorage {\\r\\n    bytes32 internal constant _UNDERLYING_SLOT = 0x90773825e4bc2bc5b176633f3046da46e88d251c6a1ff0816162f0a2ed8410ce;\\r\\n    bytes32 internal constant _PAUSED_SLOT = 0x260da1bd0b3277b5df511eb3ee2570300c0d5002c849b8340104d112bb42b5be;\\r\\n\\r\\n    constructor() {\\r\\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\\\"eip1967.bank.underlying\\\")) - 1));\\r\\n        assert(_PAUSED_SLOT == bytes32(uint256(keccak256(\\\"eip1967.bank.paused\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    function initializeStorage(address underlying_) internal initializer {\\r\\n        _setPaused(false);\\r\\n        _setUnderlying(underlying_);\\r\\n    }\\r\\n\\r\\n    /// @notice Pause status for this Bank\\r\\n    /// @return Boolean for if Bank is paused\\r\\n    function paused() public view override returns (bool) {\\r\\n        return getBoolean(_PAUSED_SLOT);\\r\\n    }\\r\\n\\r\\n    /// @notice The underlying token that is deposited\\r\\n    /// @return The underlying token address\\r\\n    function underlying() public view override returns (address) {\\r\\n        return getAddress(_UNDERLYING_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setPaused(bool paused_) internal {\\r\\n        setBoolean(_PAUSED_SLOT, paused_);\\r\\n    }\\r\\n\\r\\n    function _setUnderlying(address underlying_) internal {\\r\\n        setAddress(_UNDERLYING_SLOT, underlying_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0b708b0a21eda02fb853c7a27a133e78cb47932c383b4936c197ec568fccca59\",\"license\":\"MIT\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyBase} from \\\"./IStrategyBase.sol\\\";\\r\\n\\r\\ninterface IStrategy is IStrategyBase {\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function invest() external;\\r\\n\\r\\n    function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb8ddfe37d38ab5c1f10e649025c31f04bdadd42fb93e9ab422799925624494fb\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IStrategyStorage} from \\\"./IStrategyStorage.sol\\\";\\r\\n\\r\\ninterface IStrategyBase is IStrategyStorage {\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function derivativeBalance() external view returns (uint256);\\r\\n\\r\\n    function rewardBalance() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc9d2b099e226a7b99500af8c9c2beb5cf8a8da9a6675c6ca9f89ba229a270764\",\"license\":\"MIT\"},\"contracts/interfaces/strategies/IStrategyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IStrategyStorage {\\r\\n    function bank() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivative() external view returns (address);\\r\\n\\r\\n    function reward() external view returns (address);\\r\\n\\r\\n    // function investedBalance() external view returns (uint256);\\r\\n\\r\\n    // function invest() external;\\r\\n\\r\\n    // function withdraw(uint256 amount) external returns (uint256);\\r\\n\\r\\n    // function withdrawAll() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe02fa4951275170cfea55e68ec215048a1d2453255563cea3aae5d27d1248f93\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"contracts/proxy/OhUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @title Oh! Finance Base Upgradeable\\r\\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\\r\\nabstract contract OhUpgradeable {\\r\\n    function getAddress(bytes32 slot) internal view returns (address _address) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _address := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\\r\\n        uint256 bool_;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            bool_ := sload(slot)\\r\\n        }\\r\\n        _bool = bool_ == 1;\\r\\n    }\\r\\n\\r\\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _bytes32 := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            _uint := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAddress(bytes32 slot, address _address) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _address)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _bytes32)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Set a boolean storage variable in a given slot\\r\\n    /// @dev Convert to a uint to take up an entire contract storage slot\\r\\n    function setBoolean(bytes32 slot, bool _bool) internal {\\r\\n        uint256 bool_ = _bool ? 1 : 0;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, bool_)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            sstore(slot, _uint)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5dd7d929b429b1987fd0b51a6cd2fa6d65eba8fcea83c08885ba594c14f7bf4e\",\"license\":\"MIT\"},\"contracts/registry/OhSubscriberUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhUpgradeable} from \\\"../proxy/OhUpgradeable.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber Upgradeable\\r\\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\\r\\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Verify the registry storage slot is correct\\r\\n    constructor() {\\r\\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\\\"eip1967.subscriber.registry\\\")) - 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Initialize the Subscriber\\r\\n    /// @param registry_ The Registry contract address\\r\\n    /// @dev Always call this method in the initializer function for any derived classes\\r\\n    function initializeSubscriber(address registry_) internal initializer {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _setRegistry(registry_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        _setRegistry(registry_);\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return getAddress(_REGISTRY_SLOT);\\r\\n    }\\r\\n\\r\\n    function _setRegistry(address registry_) private {\\r\\n        setAddress(_REGISTRY_SLOT, registry_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x32f5c681a6a387937e51f03e9e45762fb0a7d73fa060f9eb6746d273c792e215\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff16806200002e57506200002e620000fa565b806200003d575060005460ff16155b6200007a5760405162461bcd60e51b815260040180806020018281038252602e81526020018062003977602e913960400191505060405180910390fd5b600054610100900460ff16158015620000a6576000805460ff1961ff0019909116610100171660011790555b6000620000b262000118565b6001600160a01b031614620000c357fe5b6000620000cf6200014a565b6001600160a01b031614620000e057fe5b8015620000f3576000805461ff00191690555b5062000181565b600062000112306200017760201b62001baa1760201c565b15905090565b6000620001457f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c6200017d565b905090565b6000620001457f90773825e4bc2bc5b176633f3046da46e88d251c6a1ff0816162f0a2ed8410ce6200017d565b3b151590565b5490565b6137e680620001916000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80637b10399911610130578063b9b8c246116100b8578063dcd2af171161007c578063dcd2af17146107a3578063dd62ed3e146107ab578063eb0dff66146107d9578063ef693bed146107ff578063f96d7b801461082b57610232565b8063b9b8c246146106e4578063c343a19d14610710578063c9168a591461072d578063d505accf14610735578063d574ea3d1461078657610232565b806395d89b41116100ff57806395d89b4114610641578063a457c2d714610649578063a9059cbb14610675578063a91ee0dc146106a1578063b6b55f25146106c757610232565b80637b103999146106035780637ecebe001461060b5780638456cb59146106315780638ea875f31461063957610232565b80633f4ba83a116101be5780635aa6e675116101825780635aa6e6751461059f5780635c975abb146105a75780636f307dc3146105af57806370a08231146105b7578063753842db146105dd57610232565b80633f4ba83a146103e157806347076ae1146103e9578063481c6a751461052c57806350921b231461055057806359356c5c1461059757610232565b80632e1a7d4d116102055780632e1a7d4d14610344578063313ce567146103635780633644e5151461038157806336efd16f1461038957806339509351146103b557610232565b806306fdde0314610237578063095ea7b3146102b457806318160ddd146102f457806323b872dd1461030e575b600080fd5b61023f610833565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610279578181015183820152602001610261565b50505050905090810190601f1680156102a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102e0600480360360408110156102ca57600080fd5b506001600160a01b0381351690602001356108c9565b604080519115158252519081900360200190f35b6102fc6108e7565b60408051918252519081900360200190f35b6102e06004803603606081101561032457600080fd5b506001600160a01b038135811691602081013590911690604001356108ed565b6103616004803603602081101561035a57600080fd5b5035610975565b005b61036b610a4b565b6040805160ff9092168252519081900360200190f35b6102fc610a54565b6103616004803603604081101561039f57600080fd5b50803590602001356001600160a01b0316610a63565b6102e0600480360360408110156103cb57600080fd5b506001600160a01b038135169060200135610b90565b610361610bde565b610361600480360360808110156103ff57600080fd5b81019060208101813564010000000081111561041a57600080fd5b82018360208201111561042c57600080fd5b8035906020019184600183028401116401000000008311171561044e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156104a157600080fd5b8201836020820111156104b357600080fd5b803590602001918460018302840111640100000000831117156104d557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335811694506020909301359092169150610c829050565b610534610dc0565b604080516001600160a01b039092168252519081900360200190f35b610361600480360360c081101561056657600080fd5b508035906001600160a01b036020820135169060408101359060ff6060820135169060808101359060a00135610e33565b6102fc610ff9565b61053461104f565b6102e0611091565b6105346110bc565b6102fc600480360360208110156105cd57600080fd5b50356001600160a01b03166110e7565b610361600480360360208110156105f357600080fd5b50356001600160a01b0316611102565b610534611191565b6102fc6004803603602081101561062157600080fd5b50356001600160a01b03166111bc565b6103616111dd565b6102fc611281565b61023f6112d0565b6102e06004803603604081101561065f57600080fd5b506001600160a01b038135169060200135611331565b6102e06004803603604081101561068b57600080fd5b506001600160a01b038135169060200135611399565b610361600480360360208110156106b757600080fd5b50356001600160a01b03166113ad565b610361600480360360208110156106dd57600080fd5b5035611490565b610361600480360360408110156106fa57600080fd5b506001600160a01b038135169060200135611564565b6102fc6004803603602081101561072657600080fd5b50356115ec565b6102fc611666565b610361600480360360e081101561074b57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356116a0565b6105346004803603602081101561079c57600080fd5b5035611843565b6102fc6118d3565b6102fc600480360360408110156107c157600080fd5b506001600160a01b03813581169160200135166118ee565b610361600480360360208110156107ef57600080fd5b50356001600160a01b0316611919565b6103616004803603604081101561081557600080fd5b506001600160a01b038135169060200135611a21565b6102fc611b54565b60368054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b60006108dd6108d6611bb0565b8484611bb4565b5060015b92915050565b60355490565b60006108fa848484611ca0565b61096a84610906611bb0565b61096585604051806060016040528060288152602001613690602891396001600160a01b038a16600090815260346020526040812090610944611bb0565b6001600160a01b031681526020810191909152604001600020549190611dfd565b611bb4565b5060015b9392505050565b333214806109ff5750610986610dc0565b6001600160a01b031663d936547e336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d60208110156109fc57600080fd5b50515b610a3e576040805162461bcd60e51b815260206004820152601d6024820152600080516020613722833981519152604482015290519081900360640190fd5b610a483382611e94565b50565b60385460ff1690565b6000610a5e611fa7565b905090565b33321480610aed5750610a74610dc0565b6001600160a01b031663d936547e336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d6020811015610aea57600080fd5b50515b610b2c576040805162461bcd60e51b815260206004820152601d6024820152600080516020613722833981519152604482015290519081900360640190fd5b6001600160a01b038116610b81576040805162461bcd60e51b815260206004820152601760248201527610985b9ace88125b9d985b1a5908149958da5c1a595b9d604a1b604482015290519081900360640190fd5b610b8c823383611fe2565b5050565b60006108dd610b9d611bb0565b846109658560346000610bae611bb0565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490612122565b610be661104f565b6001600160a01b0316336001600160a01b031614610c4b576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610c55600061217c565b60405133907faeb196d352664784d1900b0e7414a8face7d29f4dae8c4b0cf68ed477423bbf490600090a2565b600054610100900460ff1680610c9b5750610c9b6121a6565b80610ca9575060005460ff16155b610ce45760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015610d0f576000805460ff1961ff0019909116610100171660011790555b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4a57600080fd5b505afa158015610d5e573d6000803e3d6000fd5b505050506040513d6020811015610d7457600080fd5b50519050610d8286866121b7565b610d8b8161226d565b610d9486612283565b610d9d84612359565b610da683612449565b508015610db9576000805461ff00191690555b5050505050565b6000610dca611191565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d6020811015610e2c57600080fd5b5051905090565b33321480610ebd5750610e44610dc0565b6001600160a01b031663d936547e336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e9057600080fd5b505afa158015610ea4573d6000803e3d6000fd5b505050506040513d6020811015610eba57600080fd5b50515b610efc576040805162461bcd60e51b815260206004820152601d6024820152600080516020613722833981519152604482015290519081900360640190fd5b6001600160a01b038516610f51576040805162461bcd60e51b815260206004820152601760248201527610985b9ace88125b9d985b1a5908149958da5c1a595b9d604a1b604482015290519081900360640190fd5b610f596110bc565b6040805163d505accf60e01b8152336004820152306024820152604481018990526064810187905260ff8616608482015260a4810185905260c4810184905290516001600160a01b03929092169163d505accf9160e48082019260009290919082900301818387803b158015610fce57600080fd5b505af1158015610fe2573d6000803e3d6000fd5b50505050610ff1863387611fe2565b505050505050565b60006110036110bc565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0257600080fd5b6000611059611191565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0257600080fd5b6000610a5e7f260da1bd0b3277b5df511eb3ee2570300c0d5002c849b8340104d112bb42b5be6124e9565b6000610a5e7f90773825e4bc2bc5b176633f3046da46e88d251c6a1ff0816162f0a2ed8410ce6124f0565b6001600160a01b031660009081526033602052604090205490565b61110a61104f565b6001600160a01b0316336001600160a01b03161480611141575061112c610dc0565b6001600160a01b0316336001600160a01b0316145b611180576040805162461bcd60e51b815260206004820152601b602482015260008051602061376c833981519152604482015290519081900360640190fd5b610a488161118c610ff9565b6124f4565b6000610a5e7f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c6124f0565b6001600160a01b03811660009081526099602052604081206108e1906124f0565b6111e561104f565b6001600160a01b0316336001600160a01b03161461124a576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b611254600161217c565b60405133907f5ee71a369c8672edded508e624ffc9257fa1ae6886ef32905c18e60196bca39990600090a2565b60008061128c6108e7565b90506000611298610a4b565b60ff16600a0a905081156112c7576112c2826112bc836112b66118d3565b906125a3565b906125fc565b6112c9565b805b9250505090565b60378054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108bf5780601f10610894576101008083540402835291602001916108bf565b60006108dd61133e611bb0565b846109658560405180606001604052806025815260200161378c6025913960346000611368611bb0565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611dfd565b60006108dd6113a6611bb0565b8484611ca0565b6113b561104f565b6001600160a01b0316336001600160a01b03161461141a576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b61142381612663565b61142b61104f565b6001600160a01b0316336001600160a01b031614610a48576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b3332148061151a57506114a1610dc0565b6001600160a01b031663d936547e336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156114ed57600080fd5b505afa158015611501573d6000803e3d6000fd5b505050506040513d602081101561151757600080fd5b50515b611559576040805162461bcd60e51b815260206004820152601d6024820152600080516020613722833981519152604482015290519081900360640190fd5b610a48813333611fe2565b61156c61104f565b6001600160a01b0316336001600160a01b031614806115a3575061158e610dc0565b6001600160a01b0316336001600160a01b0316145b6115e2576040805162461bcd60e51b815260206004820152601b602482015260008051602061376c833981519152604482015290519081900360640190fd5b610b8c82826124f4565b6000806115f883611843565b9050806001600160a01b031663c9168a596040518163ffffffff1660e01b815260040160206040518083038186803b15801561163357600080fd5b505afa158015611647573d6000803e3d6000fd5b505050506040513d602081101561165d57600080fd5b50519392505050565b600080611671611b54565b905060005b8181101561169b5761169161168a826115ec565b8490612122565b9250600101611676565b505090565b834211156116f5576040805162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015290519081900360640190fd5b6000609a5488888861172a609960008e6001600160a01b03166001600160a01b031681526020019081526020016000206124f0565b8960405160200180878152602001866001600160a01b03168152602001856001600160a01b03168152602001848152602001838152602001828152602001965050505050505060405160208183030381529060405280519060200120905060006117938261268d565b905060006117a3828787876126d9565b9050896001600160a01b0316816001600160a01b03161461180b576040805162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015290519081900360640190fd5b6001600160a01b038a16600090815260996020526040902061182c90612857565b6118378a8a8a611bb4565b50505050505050505050565b600061184d610dc0565b6001600160a01b0316639f8f324430846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156118a157600080fd5b505afa1580156118b5573d6000803e3d6000fd5b505050506040513d60208110156118cb57600080fd5b505192915050565b6000610a5e6118e0611666565b6118e8610ff9565b90612122565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61192161104f565b6001600160a01b0316336001600160a01b031614806119585750611943610dc0565b6001600160a01b0316336001600160a01b0316145b611997576040805162461bcd60e51b815260206004820152601b602482015260008051602061376c833981519152604482015290519081900360640190fd5b806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119d257600080fd5b505af11580156119e6573d6000803e3d6000fd5b50506040516001600160a01b03841692507fd6ef475a5774b79c35f05422ab4da23b86c302dc3c2235165302499432562f999150600090a250565b611a2961104f565b6001600160a01b0316336001600160a01b03161480611a605750611a4b610dc0565b6001600160a01b0316336001600160a01b0316145b611a9f576040805162461bcd60e51b815260206004820152601b602482015260008051602061376c833981519152604482015290519081900360640190fd5b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611ae557600080fd5b505af1158015611af9573d6000803e3d6000fd5b505050506040513d6020811015611b0f57600080fd5b50506040805182815290516001600160a01b038416917f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b299631919081900360200190a25050565b6000611b5e610dc0565b6001600160a01b031663b19c0aa3306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610e0257600080fd5b3b151590565b3390565b6001600160a01b038316611bf95760405162461bcd60e51b81526004018080602001828103825260248152602001806136fe6024913960400191505060405180910390fd5b6001600160a01b038216611c3e5760405162461bcd60e51b815260040180806020018281038252602281526020018061358f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316611ce55760405162461bcd60e51b81526004018080602001828103825260258152602001806136d96025913960400191505060405180910390fd5b6001600160a01b038216611d2a5760405162461bcd60e51b815260040180806020018281038252602381526020018061354a6023913960400191505060405180910390fd5b611d35838383612268565b611d72816040518060600160405280602681526020016135b1602691396001600160a01b0386166000908152603360205260409020549190611dfd565b6001600160a01b038085166000908152603360205260408082209390935590841681522054611da19082612122565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611e8c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e51578181015183820152602001611e39565b50505050905090810190601f168015611e7e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008111611ee9576040805162461bcd60e51b815260206004820152601860248201527f42616e6b3a20496e76616c6964207769746864726177616c0000000000000000604482015290519081900360640190fd5b6000611ef36108e7565b9050611eff8383612860565b6000611f09610ff9565b90506000611f1d836112bc866112b66118d3565b905081811115611f4e5782841415611f3c57611f3761295c565b611f4e565b611f4e611f4982846129da565b612a37565b611f6085611f5a6110bc565b83612bf9565b506040805182815290516001600160a01b038716917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050505050565b6000610a5e7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611fd5612cc5565b611fdd612ccb565b612cd1565b6000611fec611b54565b11612034576040805162461bcd60e51b815260206004820152601360248201527242616e6b3a204e6f205374726174656769657360681b604482015290519081900360640190fd5b60008311612081576040805162461bcd60e51b815260206004820152601560248201527410985b9ace88125b9d985b1a590811195c1bdcda5d605a1b604482015290519081900360640190fd5b600061208b6108e7565b9050600081156120af576120aa6120a06118d3565b6112bc87856125a3565b6120b1565b845b90506120bd8382612d33565b6120dc8430876120cb6110bc565b6001600160a01b0316929190612e25565b6040805186815290516001600160a01b038516917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050505050565b60008282018381101561096e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b610a487f260da1bd0b3277b5df511eb3ee2570300c0d5002c849b8340104d112bb42b5be82612e85565b60006121b130611baa565b15905090565b600054610100900460ff16806121d057506121d06121a6565b806121de575060005460ff16155b6122195760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015612244576000805460ff1961ff0019909116610100171660011790555b61224c612ea0565b6122568383612f41565b8015612268576000805461ff00191690555b505050565b6038805460ff191660ff92909216919091179055565b600054610100900460ff168061229c575061229c6121a6565b806122aa575060005460ff16155b6122e55760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015612310576000805460ff1961ff0019909116610100171660011790555b612318612ea0565b61233b82604051806040016040528060018152602001603160f81b815250613019565b612344826130d9565b8015610b8c576000805461ff00191690555050565b600054610100900460ff168061237257506123726121a6565b80612380575060005460ff16155b6123bb5760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff161580156123e6576000805460ff1961ff0019909116610100171660011790555b6123ef82611baa565b612440576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b61234482612663565b600054610100900460ff168061246257506124626121a6565b80612470575060005460ff16155b6124ab5760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff161580156124d6576000805460ff1961ff0019909116610100171660011790555b6124e0600061217c565b6123448261319f565b5460011490565b5490565b80156125085761250682611f5a6110bc565b505b816001600160a01b031663e8b5e51f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561254357600080fd5b505af1158015612557573d6000803e3d6000fd5b5050604080516001600160a01b03861681526020810185905281517fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e9450908190039091019150a15050565b6000826125b2575060006108e1565b828202828482816125bf57fe5b041461096e5760405162461bcd60e51b815260040180806020018281038252602181526020018061366f6021913960400191505060405180910390fd5b6000808211612652576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161265b57fe5b049392505050565b610a487f1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c826131c5565b6000612697611fa7565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561273a5760405162461bcd60e51b81526004018080602001828103825260228152602001806135d76022913960400191505060405180910390fd5b8360ff16601b148061274f57508360ff16601c145b61278a5760405162461bcd60e51b815260040180806020018281038252602281526020018061364d6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156127e6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661284e576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b80546001019055565b6001600160a01b0382166128a55760405162461bcd60e51b81526004018080602001828103825260218152602001806136b86021913960400191505060405180910390fd5b6128b182600083612268565b6128ee8160405180606001604052806022815260200161356d602291396001600160a01b0385166000908152603360205260409020549190611dfd565b6001600160a01b03831660009081526033602052604090205560355461291490826129da565b6035556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000612966611b54565b905060005b81811015610b8c5761297c81611843565b6001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156129b657600080fd5b505af11580156129ca573d6000803e3d6000fd5b50506001909201915061296b9050565b600082821115612a31576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612a41610dc0565b90506000816001600160a01b031663f697a036306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a9257600080fd5b505afa158015612aa6573d6000803e3d6000fd5b505050506040513d6020811015612abc57600080fd5b505190506000612aca611b54565b905060005b8181108015612ade5750600085115b15612b94576000612aee84611843565b6001600160a01b0316632e1a7d4d876040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015612b3357600080fd5b505af1158015612b47573d6000803e3d6000fd5b505050506040513d6020811015612b5d57600080fd5b50519050612b6b86826129da565b955081600101915082600185031415612b875760009350612b8e565b8360010193505b50612acf565b836001600160a01b0316630e3da0b8846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612bda57600080fd5b505af1158015612bee573d6000803e3d6000fd5b505050505050505050565b600081612c085750600061096e565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c5757600080fd5b505afa158015612c6b573d6000803e3d6000fd5b505050506040513d6020811015612c8157600080fd5b5051905082811015612ca857612ca16001600160a01b03851686836131c9565b905061096e565b612cbc6001600160a01b03851686856131c9565b8291505061096e565b60655490565b60665490565b6000838383612cde61321b565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b6001600160a01b038216612d8e576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612d9a60008383612268565b603554612da79082612122565b6035556001600160a01b038216600090815260336020526040902054612dcd9082612122565b6001600160a01b03831660008181526033602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052612e7f90859061321f565b50505050565b600081612e93576000612e96565b60015b60ff169092555050565b600054610100900460ff1680612eb95750612eb96121a6565b80612ec7575060005460ff16155b612f025760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015612f2d576000805460ff1961ff0019909116610100171660011790555b8015610a48576000805461ff001916905550565b600054610100900460ff1680612f5a5750612f5a6121a6565b80612f68575060005460ff16155b612fa35760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015612fce576000805460ff1961ff0019909116610100171660011790555b8251612fe19060369060208601906134a8565b508151612ff59060379060208501906134a8565b506038805460ff191660121790558015612268576000805461ff0019169055505050565b600054610100900460ff168061303257506130326121a6565b80613040575060005460ff16155b61307b5760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff161580156130a6576000805460ff1961ff0019909116610100171660011790555b82516020808501919091208351918401919091206065919091556066558015612268576000805461ff0019169055505050565b600054610100900460ff16806130f257506130f26121a6565b80613100575060005460ff16155b61313b5760405162461bcd60e51b815260040180806020018281038252602e81526020018061361f602e913960400191505060405180910390fd5b600054610100900460ff16158015613166576000805460ff1961ff0019909116610100171660011790555b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9609a558015610b8c576000805461ff00191690555050565b610a487f90773825e4bc2bc5b176633f3046da46e88d251c6a1ff0816162f0a2ed8410ce825b9055565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261226890849061321f565b4690565b6000613274826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166132d09092919063ffffffff16565b8051909150156122685780806020019051602081101561329357600080fd5b50516122685760405162461bcd60e51b815260040180806020018281038252602a815260200180613742602a913960400191505060405180910390fd5b60606132df84846000856132e7565b949350505050565b6060824710156133285760405162461bcd60e51b81526004018080602001828103825260268152602001806135f96026913960400191505060405180910390fd5b61333185611baa565b613382576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106133c05780518252601f1990920191602091820191016133a1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613422576040519150601f19603f3d011682016040523d82523d6000602084013e613427565b606091505b5091509150613437828286613442565b979650505050505050565b6060831561345157508161096e565b8251156134615782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611e51578181015183820152602001611e39565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826134de5760008555613524565b82601f106134f757805160ff1916838001178555613524565b82800160010185558215613524579182015b82811115613524578251825591602001919060010190613509565b50613530929150613534565b5090565b5b80821115613530576000815560010161353556fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545434453413a20696e76616c6964207369676e6174757265202773272076616c7565416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737342616e6b3a204f6e6c7920454f41206f722077686974656c69737465640000005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564537562736372696265723a204f6e6c7920417574686f72697a6564000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220d1dfc17b14519279b295e30f20f800e0b7da32c4f483e641430dde4c6d55ee2d64736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Base Upgradeable Bank Contract",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "details": "Deposits for the caller",
        "params": {
          "amount": "The amount of underlying to deposit"
        }
      },
      "depositFor(uint256,address)": {
        "details": "Deposits for any address except the burn address",
        "params": {
          "amount": "The amount of underlying to deposit",
          "recipient": "The address to receive Bank shares"
        }
      },
      "depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "The amount of undelrying to deposit",
          "deadline": "The UNIX timestamp the permit expires at",
          "r": "Half of the ECDSA signature pair",
          "recipient": "The address to receive Bank shares",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "exit(address,uint256)": {
        "params": {
          "strategy": "The address of the Strategy to exit"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initializeBank(string,string,address,address)": {
        "details": "Should be called when deploying the proxy contract",
        "params": {
          "name_": "The name of the Bank Token",
          "registry_": "Rhe address of the registry",
          "symbol_": "The symbol of the Bank Token",
          "underlying_": "Rhe address of the underlying token that is deposited"
        }
      },
      "invest(address,uint256)": {
        "details": "Only callable by Governance or Manager",
        "params": {
          "amount": "The amount of underlying to invest in the Strategy",
          "strategy": "The address of the Strategy to invest in"
        }
      },
      "investAll(address)": {
        "details": "Only callable by Governance or Manager",
        "params": {
          "strategy": "The address of the Strategy to invest all underlying in"
        }
      },
      "investedBalance()": {
        "returns": {
          "amount": "The virtual balance invested in all Strategies"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "paused()": {
        "returns": {
          "_0": "Boolean for if Bank is paused"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "strategies(uint256)": {
        "params": {
          "i": "The Strategy index"
        },
        "returns": {
          "_0": "The address of the Strategy"
        }
      },
      "strategyBalance(uint256)": {
        "details": "Virtual Balance represents the amount of underlying available if we withdrew all",
        "params": {
          "i": "The Strategy Index"
        },
        "returns": {
          "_0": "The virtual balance of underlying invested in the Strategy"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalStrategies()": {
        "returns": {
          "_0": "The number of Strategies this Bank uses"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "underlying()": {
        "returns": {
          "_0": "The underlying token address"
        }
      },
      "underlyingBalance()": {
        "returns": {
          "_0": "Underlying token balance"
        }
      },
      "virtualBalance()": {
        "returns": {
          "_0": "The balance of underlying if we were to exit all Strategies"
        }
      },
      "virtualPrice()": {
        "returns": {
          "_0": "The amount of underlying each token represents"
        }
      }
    },
    "title": "Oh! Finance Bank",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "Emitted when a user deposits an amount of underlying"
      },
      "Exit(address,uint256)": {
        "notice": "Event emitted when an amount is withdrawn and exits a strategy"
      },
      "ExitAll(address)": {
        "notice": "Event emitted when all capital is withdrawn and exitted from a strategy"
      },
      "Invest(address,uint256)": {
        "notice": "Emitted when the Bank invests in a Strategy"
      },
      "Pause(address)": {
        "notice": "Event emitted when an amount is withdrawn and exits a strategy"
      },
      "Unpause(address)": {
        "notice": "Event emitted when all capital is withdrawn and exitted from a strategy"
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted when a user withdraws an amount of underlying"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize the Bank Logic"
      },
      "deposit(uint256)": {
        "notice": "Deposit an amount of underlying to receive Bank shares"
      },
      "depositFor(uint256,address)": {
        "notice": "Deposit an amount of underlying for a given recipient"
      },
      "depositWithPermit(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit with Permit for ERC712 Compliant Tokens"
      },
      "exit(address,uint256)": {
        "notice": "Exit and withdraw a given amount from a strategy"
      },
      "exitAll(address)": {
        "notice": "Exit and withdraw all underlying from a given strategy"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "initializeBank(string,string,address,address)": {
        "notice": "Initialize the Bank Proxy"
      },
      "invest(address,uint256)": {
        "notice": "Invest a given amount underlying into a given strategy"
      },
      "investAll(address)": {
        "notice": "Invest all available underlying into a given strategy"
      },
      "investedBalance()": {
        "notice": "Get the total virtual amount invested in all Strategies"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "pause()": {
        "notice": "Pause the Bank"
      },
      "paused()": {
        "notice": "Pause status for this Bank"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "strategies(uint256)": {
        "notice": "The Bank Strategy at index i"
      },
      "strategyBalance(uint256)": {
        "notice": "Get the virtual balance invested in the Strategy at a given index"
      },
      "totalStrategies()": {
        "notice": "Total Strategies for this Bank"
      },
      "underlying()": {
        "notice": "The underlying token that is deposited"
      },
      "underlyingBalance()": {
        "notice": "Get the underlying balance on the Bank"
      },
      "unpause()": {
        "notice": "Unpause the Bank"
      },
      "virtualBalance()": {
        "notice": "Get the total virtual amount available to the bank"
      },
      "virtualPrice()": {
        "notice": "The virtual price of each token"
      }
    },
    "notice": "ERC-20 Token that represents user share ownership",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 847,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 850,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1802,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 926,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 932,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 934,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 936,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 938,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 940,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_decimals",
        "offset": 0,
        "slot": "56",
        "type": "t_uint8"
      },
      {
        "astId": 1435,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "101",
        "type": "t_bytes32"
      },
      {
        "astId": 125,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "102",
        "type": "t_bytes32"
      },
      {
        "astId": 274,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 299,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_nonces",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_struct(Counter)1813_storage)"
      },
      {
        "astId": 301,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "_PERMIT_TYPEHASH",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 448,
        "contract": "contracts/bank/OhBank.sol:OhBank",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)1813_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1813_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1813_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1812,
            "contract": "contracts/bank/OhBank.sol:OhBank",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}