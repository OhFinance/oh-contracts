{
  "language": "Solidity",
  "sources": {
    "contracts/bank/OhBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport {ERC20PermitUpgradeable} from \"@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IERC20Permit} from \"@openzeppelin/contracts/drafts/IERC20Permit.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {IStrategy} from \"../interfaces/strategies/IStrategy.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\nimport {TransferHelper} from \"../libraries/TransferHelper.sol\";\r\nimport {OhSubscriberUpgradeable} from \"../registry/OhSubscriberUpgradeable.sol\";\r\nimport {OhBankStorage} from \"./OhBankStorage.sol\";\r\n\r\n/// @title Oh! Finance Bank\r\n/// @notice ERC-20 Token that represents user share ownership\r\n/// @dev Base Upgradeable Bank Contract\r\ncontract OhBank is ERC20Upgradeable, ERC20PermitUpgradeable, OhSubscriberUpgradeable, OhBankStorage, IBank {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Emitted when the Bank invests in a Strategy\r\n    event Invest(address strategy, uint256 amount);\r\n\r\n    /// @notice Emitted when a user deposits an amount of underlying\r\n    event Deposit(address indexed user, uint256 amount);\r\n\r\n    /// @notice Emitted when a user withdraws an amount of underlying\r\n    event Withdraw(address indexed user, uint256 amount);\r\n\r\n    /// @notice Event emitted when an amount is withdrawn and exits a strategy\r\n    event Exit(address indexed strategy, uint256 amount);\r\n\r\n    /// @notice Event emitted when all capital is withdrawn and exitted from a strategy\r\n    event ExitAll(address indexed strategy);\r\n\r\n    /// @notice Event emitted when an amount is withdrawn and exits a strategy\r\n    event Pause(address indexed governance);\r\n\r\n    /// @notice Event emitted when all capital is withdrawn and exitted from a strategy\r\n    event Unpause(address indexed governance);\r\n\r\n    /// @notice Protocol defense modifier\r\n    /// @dev Only allow user-facing functions to be called by EOA or be whitelisted\r\n    modifier defense {\r\n        require(msg.sender == tx.origin || IManager(manager()).whitelisted(msg.sender), \"Bank: Only EOA or whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the Bank Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(underlying() == address(0));\r\n    }\r\n\r\n    /// @notice Initialize the Bank Proxy\r\n    /// @param name_ The name of the Bank Token\r\n    /// @param symbol_ The symbol of the Bank Token\r\n    /// @param registry_ Rhe address of the registry\r\n    /// @param underlying_ Rhe address of the underlying token that is deposited\r\n    /// @dev Should be called when deploying the proxy contract\r\n    function initializeBank(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        address registry_,\r\n        address underlying_\r\n    ) public initializer {\r\n        // setup token first, use same token decimals\r\n        uint8 decimals_ = ERC20Upgradeable(underlying_).decimals();\r\n        __ERC20_init(name_, symbol_);\r\n        _setupDecimals(decimals_);\r\n\r\n        // setup permit\r\n        __ERC20Permit_init(name_);\r\n\r\n        // initialize subscriber and storage\r\n        initializeSubscriber(registry_);\r\n        initializeStorage(underlying_);\r\n    }\r\n\r\n    /// @notice The Bank Strategy at index i\r\n    /// @param i The Strategy index\r\n    /// @return The address of the Strategy\r\n    function strategies(uint256 i) public view override returns (address) {\r\n        return IManager(manager()).strategies(address(this), i);\r\n    }\r\n\r\n    /// @notice Total Strategies for this Bank\r\n    /// @return The number of Strategies this Bank uses\r\n    function totalStrategies() public view override returns (uint256) {\r\n        return IManager(manager()).totalStrategies(address(this));\r\n    }\r\n\r\n    /// @notice Get the underlying balance on the Bank\r\n    /// @return Underlying token balance\r\n    function underlyingBalance() public view override returns (uint256) {\r\n        return IERC20(underlying()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Get the virtual balance invested in the Strategy at a given index\r\n    /// @dev Virtual Balance represents the amount of underlying available if we withdrew all\r\n    /// @param i The Strategy Index\r\n    /// @return The virtual balance of underlying invested in the Strategy\r\n    function strategyBalance(uint256 i) public view override returns (uint256) {\r\n        address strategy = strategies(i);\r\n        return IStrategy(strategy).investedBalance();\r\n    }\r\n\r\n    /// @notice Get the total virtual amount invested in all Strategies\r\n    /// @return amount The virtual balance invested in all Strategies\r\n    function investedBalance() public view override returns (uint256 amount) {\r\n        uint256 length = totalStrategies();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            amount = amount.add(strategyBalance(i));\r\n        }\r\n    }\r\n\r\n    /// @notice Get the total virtual amount available to the bank\r\n    /// @return The balance of underlying if we were to exit all Strategies\r\n    function virtualBalance() public view override returns (uint256) {\r\n        return underlyingBalance().add(investedBalance());\r\n    }\r\n\r\n    /// @notice The virtual price of each token\r\n    /// @return The amount of underlying each token represents\r\n    function virtualPrice() public view override returns (uint256) {\r\n        uint256 totalSupply = totalSupply();\r\n        uint256 unit = 10**decimals();\r\n        return totalSupply == 0 ? unit : virtualBalance().mul(unit).div(totalSupply);\r\n    }\r\n\r\n    /// @notice Invest a given amount underlying into a given strategy\r\n    /// @dev Only callable by Governance or Manager\r\n    /// @param strategy The address of the Strategy to invest in\r\n    /// @param amount The amount of underlying to invest in the Strategy\r\n    function invest(address strategy, uint256 amount) external override onlyAuthorized {\r\n        _invest(strategy, amount);\r\n    }\r\n\r\n    /// @notice Invest all available underlying into a given strategy\r\n    /// @dev Only callable by Governance or Manager\r\n    /// @param strategy The address of the Strategy to invest all underlying in\r\n    function investAll(address strategy) external override onlyAuthorized {\r\n        _invest(strategy, underlyingBalance());\r\n    }\r\n\r\n    /// @notice Exit and withdraw a given amount from a strategy\r\n    /// @param strategy The address of the Strategy to exit\r\n    function exit(address strategy, uint256 amount) external override onlyAuthorized {\r\n        IStrategy(strategy).withdraw(amount);\r\n        emit Exit(strategy, amount);\r\n    }\r\n\r\n    /// @notice Exit and withdraw all underlying from a given strategy\r\n    function exitAll(address strategy) external override onlyAuthorized {\r\n        IStrategy(strategy).withdrawAll();\r\n        emit ExitAll(strategy);\r\n    }\r\n\r\n    /// @notice Pause the Bank\r\n    function pause() external override onlyGovernance {\r\n        _setPaused(true);\r\n        emit Pause(msg.sender);\r\n    }\r\n\r\n    /// @notice Unpause the Bank\r\n    function unpause() external override onlyGovernance {\r\n        _setPaused(false);\r\n        emit Unpause(msg.sender);\r\n    }\r\n\r\n    /// @notice Deposit an amount of underlying to receive Bank shares\r\n    /// @dev Deposits for the caller\r\n    /// @param amount The amount of underlying to deposit\r\n    function deposit(uint256 amount) external override defense {\r\n        _deposit(amount, msg.sender, msg.sender);\r\n    }\r\n\r\n    /// @notice Deposit an amount of underlying for a given recipient\r\n    /// @dev Deposits for any address except the burn address\r\n    /// @param amount The amount of underlying to deposit\r\n    /// @param recipient The address to receive Bank shares\r\n    function depositFor(uint256 amount, address recipient) external override defense {\r\n        require(recipient != address(0), \"Bank: Invalid Recipient\");\r\n        _deposit(amount, msg.sender, recipient);\r\n    }\r\n\r\n    /// @notice Deposit with Permit for ERC712 Compliant Tokens\r\n    /// @param amount The amount of undelrying to deposit\r\n    /// @param recipient The address to receive Bank shares\r\n    /// @param deadline The UNIX timestamp the permit expires at\r\n    /// @param v The recovery byte of the signature\r\n    /// @param r Half of the ECDSA signature pair\r\n    /// @param s Half of the ECDSA signature pair\r\n    function depositWithPermit(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external defense {\r\n        require(recipient != address(0), \"Bank: Invalid Recipient\");\r\n        IERC20Permit(underlying()).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n        _deposit(amount, msg.sender, recipient);\r\n    }\r\n\r\n    // withdraw an amount of shares for underlying\r\n    function withdraw(uint256 shares) external override defense {\r\n        _withdraw(msg.sender, shares);\r\n    }\r\n\r\n    /// @dev Invest an amount into a strategy\r\n    function _invest(address strategy, uint256 amount) internal {\r\n        // transfer to strategy if amount > 0\r\n        if (amount > 0) {\r\n            TransferHelper.safeTokenTransfer(strategy, underlying(), amount);\r\n        }\r\n        // perform strategy investment, handle no new underlying in strategy\r\n        IStrategy(strategy).invest();\r\n        emit Invest(strategy, amount);\r\n    }\r\n\r\n    // deposit underlying to receive shares\r\n    function _deposit(\r\n        uint256 amount,\r\n        address sender,\r\n        address recipient\r\n    ) internal {\r\n        require(totalStrategies() > 0, \"Bank: No Strategies\");\r\n        require(amount > 0, \"Bank: Invalid Deposit\");\r\n\r\n        uint256 totalSupply = totalSupply();\r\n        uint256 mintAmount = totalSupply == 0 ? amount : amount.mul(totalSupply).div(virtualBalance());\r\n\r\n        _mint(recipient, mintAmount);\r\n        IERC20(underlying()).safeTransferFrom(sender, address(this), amount);\r\n\r\n        emit Deposit(recipient, amount);\r\n    }\r\n\r\n    /// @dev Withdraw shares for underlying\r\n    /// @dev 3 scenarios can occur\r\n    /// @dev   1. If we have enough underlying on the Bank to cover the withdrawal, transfer from Bank\r\n    /// @dev   2. Else if we are withdrawing all shares, withdraw all underlying tokens\r\n    /// @dev   3. Else, transfer from each Strategy until the withdrawal is satisfied\r\n    function _withdraw(address user, uint256 shares) internal {\r\n        require(shares > 0, \"Bank: Invalid withdrawal\");\r\n        uint256 totalSupply = totalSupply();\r\n        _burn(user, shares);\r\n\r\n        uint256 balance = underlyingBalance();\r\n        uint256 withdrawAmount = virtualBalance().mul(shares).div(totalSupply);\r\n        if (withdrawAmount > balance) {\r\n            if (shares == totalSupply) {\r\n                _withdrawAll();\r\n            } else {\r\n                _withdrawRemaining(withdrawAmount.sub(balance));\r\n            }\r\n        }\r\n\r\n        TransferHelper.safeTokenTransfer(user, underlying(), withdrawAmount);\r\n        emit Withdraw(user, withdrawAmount);\r\n    }\r\n\r\n    /// @dev Withdraw all underlying to the bank\r\n    function _withdrawAll() internal {\r\n        uint256 length = totalStrategies();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IStrategy(strategies(i)).withdrawAll();\r\n        }\r\n    }\r\n\r\n    /// @dev Withdraw from each strategy until remaining amount is reached\r\n    function _withdrawRemaining(uint256 amount) internal {\r\n        address manager = manager();\r\n        uint256 index = IManager(manager).withdrawIndex(address(this));\r\n        uint256 length = totalStrategies();\r\n        uint256 i = 0;\r\n\r\n        // while we haven't withdrawn from each Strategy and we haven't withdrawn the total amount\r\n        while (i < length && amount > 0) {\r\n            // perform the Strategy withdrawal\r\n            uint256 withdrawn = IStrategy(strategies(index)).withdraw(amount);\r\n\r\n            // update variables\r\n            amount = amount.sub(withdrawn);\r\n            i = i + 1;\r\n\r\n            // increment Strategy index or restart\r\n            if (index - 1 == length) {\r\n                index = 0;\r\n            } else {\r\n                index = index + 1;\r\n            }\r\n        }\r\n\r\n        // update withdrawal index\r\n        IManager(manager).setWithdrawIndex(index);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.5 <0.8.0;\n\nimport \"../token/ERC20/ERC20Upgradeable.sol\";\nimport \"./IERC20PermitUpgradeable.sol\";\nimport \"../cryptography/ECDSAUpgradeable.sol\";\nimport \"../utils/CountersUpgradeable.sol\";\nimport \"./EIP712Upgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping (address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _PERMIT_TYPEHASH,\n                owner,\n                spender,\n                value,\n                _nonces[owner].current(),\n                deadline\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _nonces[owner].increment();\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/drafts/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/bank/IBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IBankStorage} from \"./IBankStorage.sol\";\r\n\r\ninterface IBank is IBankStorage {\r\n    function strategies(uint256 i) external view returns (address);\r\n\r\n    function totalStrategies() external view returns (uint256);\r\n\r\n    function underlyingBalance() external view returns (uint256);\r\n\r\n    function strategyBalance(uint256 i) external view returns (uint256);\r\n\r\n    function investedBalance() external view returns (uint256);\r\n\r\n    function virtualBalance() external view returns (uint256);\r\n\r\n    function virtualPrice() external view returns (uint256);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function invest(address strategy, uint256 amount) external;\r\n\r\n    function investAll(address strategy) external;\r\n\r\n    function exit(address strategy, uint256 amount) external;\r\n\r\n    function exitAll(address strategy) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function depositFor(uint256 amount, address recipient) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/interfaces/strategies/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IStrategyBase} from \"./IStrategyBase.sol\";\r\n\r\ninterface IStrategy is IStrategyBase {\r\n    function investedBalance() external view returns (uint256);\r\n\r\n    function invest() external;\r\n\r\n    function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    function withdrawAll() external;\r\n}\r\n"
    },
    "contracts/interfaces/IManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IManager {\r\n    function token() external view returns (address);\r\n\r\n    function buybackFee() external view returns (uint256);\r\n\r\n    function managementFee() external view returns (uint256);\r\n\r\n    function liquidators(address from, address to) external view returns (address);\r\n\r\n    function whitelisted(address _contract) external view returns (bool);\r\n\r\n    function banks(uint256 i) external view returns (address);\r\n\r\n    function totalBanks() external view returns (uint256);\r\n\r\n    function strategies(address bank, uint256 i) external view returns (address);\r\n\r\n    function totalStrategies(address bank) external view returns (uint256);\r\n\r\n    function withdrawIndex(address bank) external view returns (uint256);\r\n\r\n    function setWithdrawIndex(uint256 i) external;\r\n\r\n    function rebalance(address bank) external;\r\n\r\n    function finance(address bank) external;\r\n\r\n    function financeAll(address bank) external;\r\n\r\n    function buyback(address from) external;\r\n\r\n    function accrueRevenue(\r\n        address bank,\r\n        address underlying,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function exitAll(address bank) external;\r\n}\r\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IRegistry {\r\n    function governance() external view returns (address);\r\n\r\n    function manager() external view returns (address);\r\n}\r\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\nlibrary TransferHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // safely transfer tokens without underflowing\r\n    function safeTokenTransfer(\r\n        address recipient,\r\n        address token,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance < amount) {\r\n            IERC20(token).safeTransfer(recipient, balance);\r\n            return balance;\r\n        } else {\r\n            IERC20(token).safeTransfer(recipient, amount);\r\n            return amount;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/registry/OhSubscriberUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ISubscriber} from \"../interfaces/ISubscriber.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\nimport {OhUpgradeable} from \"../proxy/OhUpgradeable.sol\";\r\n\r\n/// @title Oh! Finance Subscriber Upgradeable\r\n/// @notice Base Oh! Finance upgradeable contract used to control access throughout the protocol\r\nabstract contract OhSubscriberUpgradeable is Initializable, OhUpgradeable, ISubscriber {\r\n    bytes32 private constant _REGISTRY_SLOT = 0x1b5717851286d5e98a28354be764b8c0a20eb2fbd059120090ee8bcfe1a9bf6c;\r\n\r\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == governance() || msg.sender == manager(), \"Subscriber: Only Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow the governance address to execute a function\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance(), \"Subscriber: Only Governance\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Verify the registry storage slot is correct\r\n    constructor() {\r\n        assert(_REGISTRY_SLOT == bytes32(uint256(keccak256(\"eip1967.subscriber.registry\")) - 1));\r\n    }\r\n\r\n    /// @notice Initialize the Subscriber\r\n    /// @param registry_ The Registry contract address\r\n    /// @dev Always call this method in the initializer function for any derived classes\r\n    function initializeSubscriber(address registry_) internal initializer {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n        _setRegistry(registry_);\r\n    }\r\n\r\n    /// @notice Set the Registry for the contract. Only callable by Governance.\r\n    /// @param registry_ The new registry\r\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\r\n    /// @dev Ideally should not be used\r\n    function setRegistry(address registry_) external onlyGovernance {\r\n        _setRegistry(registry_);\r\n        require(msg.sender == governance(), \"Subscriber: Bad Governance\");\r\n    }\r\n\r\n    /// @notice Get the Governance address\r\n    /// @return The current Governance address\r\n    function governance() public view override returns (address) {\r\n        return IRegistry(registry()).governance();\r\n    }\r\n\r\n    /// @notice Get the Manager address\r\n    /// @return The current Manager address\r\n    function manager() public view override returns (address) {\r\n        return IRegistry(registry()).manager();\r\n    }\r\n\r\n    /// @notice Get the Registry address\r\n    /// @return The current Registry address\r\n    function registry() public view override returns (address) {\r\n        return getAddress(_REGISTRY_SLOT);\r\n    }\r\n\r\n    function _setRegistry(address registry_) private {\r\n        setAddress(_REGISTRY_SLOT, registry_);\r\n    }\r\n}\r\n"
    },
    "contracts/bank/OhBankStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IBankStorage} from \"../interfaces/bank/IBankStorage.sol\";\r\nimport {OhUpgradeable} from \"../proxy/OhUpgradeable.sol\";\r\n\r\nabstract contract OhBankStorage is Initializable, OhUpgradeable, IBankStorage {\r\n    bytes32 internal constant _UNDERLYING_SLOT = 0x90773825e4bc2bc5b176633f3046da46e88d251c6a1ff0816162f0a2ed8410ce;\r\n    bytes32 internal constant _PAUSED_SLOT = 0x260da1bd0b3277b5df511eb3ee2570300c0d5002c849b8340104d112bb42b5be;\r\n\r\n    constructor() {\r\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.bank.underlying\")) - 1));\r\n        assert(_PAUSED_SLOT == bytes32(uint256(keccak256(\"eip1967.bank.paused\")) - 1));\r\n    }\r\n\r\n    function initializeStorage(address underlying_) internal initializer {\r\n        _setPaused(false);\r\n        _setUnderlying(underlying_);\r\n    }\r\n\r\n    /// @notice Pause status for this Bank\r\n    /// @return Boolean for if Bank is paused\r\n    function paused() public view override returns (bool) {\r\n        return getBoolean(_PAUSED_SLOT);\r\n    }\r\n\r\n    /// @notice The underlying token that is deposited\r\n    /// @return The underlying token address\r\n    function underlying() public view override returns (address) {\r\n        return getAddress(_UNDERLYING_SLOT);\r\n    }\r\n\r\n    function _setPaused(bool paused_) internal {\r\n        setBoolean(_PAUSED_SLOT, paused_);\r\n    }\r\n\r\n    function _setUnderlying(address underlying_) internal {\r\n        setAddress(_UNDERLYING_SLOT, underlying_);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../math/SafeMathUpgradeable.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary CountersUpgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                typeHash,\n                name,\n                version,\n                _getChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", _domainSeparatorV4(), structHash));\n    }\n\n    function _getChainId() private view returns (uint256 chainId) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/bank/IBankStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IBankStorage {\r\n    function paused() external view returns (bool);\r\n\r\n    function underlying() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/strategies/IStrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IStrategyStorage} from \"./IStrategyStorage.sol\";\r\n\r\ninterface IStrategyBase is IStrategyStorage {\r\n    function underlyingBalance() external view returns (uint256);\r\n\r\n    function derivativeBalance() external view returns (uint256);\r\n\r\n    function rewardBalance() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/strategies/IStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IStrategyStorage {\r\n    function bank() external view returns (address);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function derivative() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    // function investedBalance() external view returns (uint256);\r\n\r\n    // function invest() external;\r\n\r\n    // function withdraw(uint256 amount) external returns (uint256);\r\n\r\n    // function withdrawAll() external;\r\n}\r\n"
    },
    "contracts/interfaces/ISubscriber.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ISubscriber {\r\n    function registry() external view returns (address);\r\n\r\n    function governance() external view returns (address);\r\n\r\n    function manager() external view returns (address);\r\n}\r\n"
    },
    "contracts/proxy/OhUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/// @title Oh! Finance Base Upgradeable\r\n/// @notice Contains internal functions to get/set primitive data types used by a proxy contract\r\nabstract contract OhUpgradeable {\r\n    function getAddress(bytes32 slot) internal view returns (address _address) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _address := sload(slot)\r\n        }\r\n    }\r\n\r\n    function getBoolean(bytes32 slot) internal view returns (bool _bool) {\r\n        uint256 bool_;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            bool_ := sload(slot)\r\n        }\r\n        _bool = bool_ == 1;\r\n    }\r\n\r\n    function getBytes32(bytes32 slot) internal view returns (bytes32 _bytes32) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _bytes32 := sload(slot)\r\n        }\r\n    }\r\n\r\n    function getUInt256(bytes32 slot) internal view returns (uint256 _uint) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            _uint := sload(slot)\r\n        }\r\n    }\r\n\r\n    function setAddress(bytes32 slot, address _address) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _address)\r\n        }\r\n    }\r\n\r\n    function setBytes32(bytes32 slot, bytes32 _bytes32) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _bytes32)\r\n        }\r\n    }\r\n\r\n    /// @dev Set a boolean storage variable in a given slot\r\n    /// @dev Convert to a uint to take up an entire contract storage slot\r\n    function setBoolean(bytes32 slot, bool _bool) internal {\r\n        uint256 bool_ = _bool ? 1 : 0;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, bool_)\r\n        }\r\n    }\r\n\r\n    function setUInt256(bytes32 slot, uint256 _uint) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _uint)\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/curve/OhCurve3PoolStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {ICurve3PoolStrategyStorage} from \"../../interfaces/strategies/curve/ICurve3PoolStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"../../proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhCurve3PoolStrategyStorage is Initializable, OhUpgradeable, ICurve3PoolStrategyStorage {\r\n    bytes32 internal constant _POOL_SLOT = 0x6c9960513c6769ea8f48802ea7b637e9ce937cc3d022135cc43626003296fc46;\r\n    bytes32 internal constant _GAUGE_SLOT = 0x85c79ab2dc779eb860ec993658b7f7a753e59bdfda156c7391620a5f513311e6;\r\n    bytes32 internal constant _MINTR_SLOT = 0x3e7777dca2f9f31e4c2d62ce76af8def0f69b868d665539787b25b39a9f7224f;\r\n    bytes32 internal constant _INDEX_SLOT = 0xd5700a843c20bfe827ca47a7c73f83287e1b32b3cd4ac659d79f800228d617fd;\r\n\r\n    constructor() {\r\n        assert(_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.curve3PoolStrategy.pool\")) - 1));\r\n        assert(_GAUGE_SLOT == bytes32(uint256(keccak256(\"eip1967.curve3PoolStrategy.gauge\")) - 1));\r\n        assert(_MINTR_SLOT == bytes32(uint256(keccak256(\"eip1967.curve3PoolStrategy.mintr\")) - 1));\r\n        assert(_INDEX_SLOT == bytes32(uint256(keccak256(\"eip1967.curve3PoolStrategy.index\")) - 1));\r\n    }\r\n\r\n    function initializeCurve3PoolStorage(\r\n        address pool_,\r\n        address gauge_,\r\n        address mintr_,\r\n        uint256 index_\r\n    ) internal initializer {\r\n        _setPool(pool_);\r\n        _setGauge(gauge_);\r\n        _setMintr(mintr_);\r\n        _setIndex(index_);\r\n    }\r\n\r\n    function pool() public view override returns (address) {\r\n        return getAddress(_POOL_SLOT);\r\n    }\r\n\r\n    function gauge() public view override returns (address) {\r\n        return getAddress(_GAUGE_SLOT);\r\n    }\r\n\r\n    function mintr() public view override returns (address) {\r\n        return getAddress(_MINTR_SLOT);\r\n    }\r\n\r\n    function index() public view override returns (uint256) {\r\n        return getUInt256(_INDEX_SLOT);\r\n    }\r\n\r\n    function _setPool(address pool_) internal {\r\n        setAddress(_POOL_SLOT, pool_);\r\n    }\r\n\r\n    function _setGauge(address gauge_) internal {\r\n        setAddress(_GAUGE_SLOT, gauge_);\r\n    }\r\n\r\n    function _setMintr(address mintr_) internal {\r\n        setAddress(_MINTR_SLOT, mintr_);\r\n    }\r\n\r\n    function _setIndex(uint256 index_) internal {\r\n        setUInt256(_INDEX_SLOT, index_);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/curve/ICurve3PoolStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICurve3PoolStrategyStorage {\r\n    function pool() external view returns (address);\r\n\r\n    function gauge() external view returns (address);\r\n\r\n    function mintr() external view returns (address);\r\n\r\n    function index() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/compound/OhCompoundStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {ICompoundStrategyStorage} from \"../../interfaces/strategies/compound/ICompoundStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"../../proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhCompoundStrategyStorage is Initializable, OhUpgradeable, ICompoundStrategyStorage {\r\n    bytes32 internal constant _COMPTROLLER_SLOT = 0x5afedb916735b48cdf292f42c56bdd9f2c18a47029ac6473a9597ce1cb6a8661;\r\n\r\n    constructor() {\r\n        assert(_COMPTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.compoundStrategy.comptroller\")) - 1));\r\n    }\r\n\r\n    function initializeCompoundStorage(address comptroller_) internal initializer {\r\n        _setComptroller(comptroller_);\r\n    }\r\n\r\n    function comptroller() public view override returns (address) {\r\n        return getAddress(_COMPTROLLER_SLOT);\r\n    }\r\n\r\n    function _setComptroller(address comptroller_) internal {\r\n        setAddress(_COMPTROLLER_SLOT, comptroller_);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/compound/ICompoundStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICompoundStrategyStorage {\r\n    function comptroller() external view returns (address);\r\n}\r\n"
    },
    "contracts/strategies/compound/OhCompoundStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IStrategy} from \"../../interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"../../libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"../OhStrategy.sol\";\r\nimport {OhCompoundHelper} from \"./OhCompoundHelper.sol\";\r\nimport {OhCompoundStrategyStorage} from \"./OhCompoundStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Compound Strategy\r\n/// @notice Standard, unleveraged strategy. Invest underlying tokens into derivative cTokens\r\n/// @dev https://compound.finance/docs/ctokens\r\ncontract OhCompoundStrategy is IStrategy, OhCompoundHelper, OhStrategy, OhCompoundStrategyStorage {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Initialize the Compound Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initializes the Compound Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the cToken address received from Compound\r\n    /// @param reward_ the address of the reward token COMP\r\n    /// @param comptroller_ the Compound rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeCompoundStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address comptroller_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeCompoundStorage(comptroller_);\r\n\r\n        IERC20(derivative_).safeApprove(underlying_, type(uint256).max);\r\n    }\r\n\r\n    /// @notice Get the balance of underlying invested by the Strategy\r\n    /// @dev Get the exchange rate (which is scaled up by 1e18) and multiply by amount of cTokens\r\n    /// @return The amount of underlying the strategy has invested\r\n    function investedBalance() public view override returns (uint256) {\r\n        uint256 exchangeRate = getExchangeRate(derivative());\r\n        return exchangeRate.mul(derivativeBalance()).div(1e18);\r\n    }\r\n\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    function _compound() internal {\r\n        claim(comptroller());\r\n        uint256 amount = rewardBalance();\r\n        if (amount > 0) {\r\n            liquidate(reward(), underlying(), amount);\r\n        }\r\n    }\r\n\r\n    // deposit underlying tokens into Compound, minting cTokens\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            mint(underlying(), derivative(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw all underlying by redeem all cTokens\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    // withdraw an amount of underlying tokens\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol after redeeming them from compound\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // calculate amount of shares to redeem\r\n        uint256 invested = investedBalance();\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n        uint256 redeemAmount = supplyShare.mul(invested).div(1e18);\r\n\r\n        // safely redeem from Compound\r\n        if (redeemAmount > invested) {\r\n            redeemUnderlying(derivative(), invested);\r\n        } else {\r\n            redeemUnderlying(derivative(), redeemAmount);\r\n        }\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/OhStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {IStrategyBase} from \"../interfaces/strategies/IStrategyBase.sol\";\r\nimport {ILiquidator} from \"../interfaces/ILiquidator.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {TransferHelper} from \"../libraries/TransferHelper.sol\";\r\nimport {OhSubscriberUpgradeable} from \"../registry/OhSubscriberUpgradeable.sol\";\r\nimport {OhStrategyStorage} from \"./OhStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Strategy\r\n/// @notice Base Upgradeable Strategy Contract to build strategies on\r\ncontract OhStrategy is OhSubscriberUpgradeable, OhStrategyStorage, IStrategyBase {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Liquidate(address indexed router, address indexed token, uint256 amount);\r\n    event Sweep(address indexed token, uint256 amount, address recipient);\r\n\r\n    /// @notice Only the Bank can execute these functions\r\n    modifier onlyBank() {\r\n        require(msg.sender == bank(), \"Strategy: Only Bank\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the base Strategy\r\n    /// @param registry_ Address of the Registry\r\n    /// @param bank_ Address of Bank\r\n    /// @param underlying_ Underying token that is deposited\r\n    /// @param derivative_ Derivative token received from protocol, or address(0)\r\n    /// @param reward_ Reward token received from protocol, or address(0)\r\n    function initializeStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_\r\n    ) internal initializer {\r\n        initializeSubscriber(registry_);\r\n        initializeStorage(bank_, underlying_, derivative_, reward_);\r\n    }\r\n\r\n    /// @dev Balance of underlying awaiting Strategy investment\r\n    function underlyingBalance() public view override returns (uint256) {\r\n        return IERC20(underlying()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Balance of derivative tokens received from Strategy, if applicable\r\n    /// @return The balance of derivative tokens\r\n    function derivativeBalance() public view override returns (uint256) {\r\n        if (derivative() == address(0)) {\r\n            return 0;\r\n        }\r\n        return IERC20(derivative()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Balance of reward tokens awaiting liquidation, if applicable\r\n    function rewardBalance() public view override returns (uint256) {\r\n        if (reward() == address(0)) {\r\n            return 0;\r\n        }\r\n        return IERC20(reward()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Governance function to sweep any stuck / airdrop tokens to a given recipient\r\n    /// @param token The address of the token to sweep\r\n    /// @param amount The amount of tokens to sweep\r\n    /// @param recipient The address to send the sweeped tokens to\r\n    function sweep(\r\n        address token,\r\n        uint256 amount,\r\n        address recipient\r\n    ) external onlyGovernance {\r\n        // require(!_protected[token], \"Strategy: Cannot sweep\");\r\n        TransferHelper.safeTokenTransfer(recipient, token, amount);\r\n        emit Sweep(token, amount, recipient);\r\n    }\r\n\r\n    /// @dev Liquidation function to swap rewards for underlying\r\n    function liquidate(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        // if (amount > minimumSell())\r\n\r\n        // find the liquidator to use\r\n        address manager = manager();\r\n        address liquidator = IManager(manager).liquidators(from, to);\r\n\r\n        // increase allowance and liquidate to the manager\r\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\r\n        uint256 received = ILiquidator(liquidator).liquidate(manager, from, to, amount, 1);\r\n\r\n        // notify revenue and transfer proceeds back to strategy\r\n        IManager(manager).accrueRevenue(bank(), to, received);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/compound/OhCompoundHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IWETH} from \"../../interfaces/IWETH.sol\";\r\nimport {ICToken} from \"./interfaces/ICToken.sol\";\r\nimport {IComptroller} from \"./interfaces/IComptroller.sol\";\r\nimport {ICEther} from \"./interfaces/ICEther.sol\";\r\n\r\n/// @title Oh! Finance Compound Helper\r\n/// @notice Helper functions to interact with the Compound Protocol\r\n/// @dev https://compound.finance\r\nabstract contract OhCompoundHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the exchange rate of cTokens => underlying\r\n    /// @dev https://compound.finance/docs/ctokens#exchange-rate\r\n    /// @param cToken The cToken address rate to get\r\n    /// @return The exchange rate scaled by 1e18\r\n    function getExchangeRate(address cToken) internal view returns (uint256) {\r\n        return ICToken(cToken).exchangeRateStored();\r\n    }\r\n\r\n    /// @notice Enter the market (approve), required before calling borrow\r\n    /// @param comptroller The Compound Comptroller (rewards contract)\r\n    /// @param cToken The cToken market to enter\r\n    function enter(address comptroller, address cToken) internal {\r\n        address[] memory cTokens = new address[](1);\r\n        cTokens[0] = cToken;\r\n        IComptroller(comptroller).enterMarkets(cTokens);\r\n    }\r\n\r\n    /// @notice Mint cTokens by providing/lending underlying as collateral\r\n    /// @param underlying The underlying to lend to Compound\r\n    /// @param cToken The Compound cToken\r\n    /// @param amount The amount of underlying to lend\r\n    function mint(\r\n        address underlying,\r\n        address cToken,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(underlying).safeIncreaseAllowance(cToken, amount);\r\n        uint256 result = ICToken(cToken).mint(amount);\r\n        require(result == 0, \"Compound: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Borrow underlying tokens from a given cToken against collateral\r\n    /// @param cToken The cToken corresponding the underlying we want to borrow\r\n    /// @param amount The amount of underlying to borrow\r\n    function borrow(address cToken, uint256 amount) internal {\r\n        uint256 result = ICToken(cToken).borrow(amount);\r\n        require(result == 0, \"Compound: Borrow failed\");\r\n    }\r\n\r\n    /// @notice Repay loan with a given amount of underlying\r\n    /// @param underlying The underlying to repay\r\n    /// @param cToken The cToken for the underlying\r\n    /// @param amount The amount of underlying to repay\r\n    function repay(\r\n        address underlying,\r\n        address cToken,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(underlying).safeIncreaseAllowance(cToken, amount);\r\n        uint256 result = ICToken(cToken).repayBorrow(amount);\r\n        require(result == 0, \"Compound: Repay failed\");\r\n    }\r\n\r\n    /// @notice Repay loan with weth\r\n    /// @param weth WETH address\r\n    /// @param cToken The cToken for the underlying\r\n    /// @param amount The amount of underlying to repay\r\n    /// @dev Convert to ETH, then repay\r\n    function repayInWETH(\r\n        address weth,\r\n        address cToken,\r\n        uint256 amount\r\n    ) internal {\r\n        IWETH(weth).withdraw(amount); // Unwrapping\r\n        ICEther(cToken).repayBorrow{value: amount}();\r\n    }\r\n\r\n    /// @notice Redeem cTokens for underlying\r\n    /// @param cToken The cToken to redeem\r\n    /// @param amount The amount of cTokens to redeem\r\n    function redeem(address cToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = ICToken(cToken).redeem(amount);\r\n        require(result == 0, \"Compound: Redeem cToken\");\r\n    }\r\n\r\n    /// @notice Redeem cTokens for underlying\r\n    /// @param cToken The cToken to redeem\r\n    /// @param amount The amount of underlying tokens to receive\r\n    function redeemUnderlying(address cToken, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 result = ICToken(cToken).redeemUnderlying(amount);\r\n        require(result == 0, \"Compound: Redeem underlying\");\r\n    }\r\n\r\n    /// @notice Redeem cTokens for weth\r\n    /// @param weth WETH Address\r\n    /// @param cToken The cToken to redeem\r\n    /// @param amount The amount of underlying to receive\r\n    /// @dev Redeem in ETH, then convert to weth\r\n    function redeemUnderlyingInWeth(\r\n        address weth,\r\n        address cToken,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            redeemUnderlying(cToken, amount);\r\n            IWETH(weth).deposit{value: address(this).balance}();\r\n        }\r\n    }\r\n\r\n    /// @notice Claim COMP rewards from Comptroller for this address\r\n    /// @param comptroller The Compound Comptroller, Reward Contract\r\n    function claim(address comptroller) internal {\r\n        IComptroller(comptroller).claimComp(address(this));\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ILiquidator {\r\n    function liquidate(\r\n        address recipient,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minOut\r\n    ) external returns (uint256);\r\n\r\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\r\n\r\n    function sushiswapRouter() external view returns (address);\r\n\r\n    function uniswapRouter() external view returns (address);\r\n\r\n    function weth() external view returns (address);\r\n}\r\n"
    },
    "contracts/strategies/OhStrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IStrategyStorage} from \"../interfaces/strategies/IStrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"../proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhStrategyStorage is Initializable, OhUpgradeable, IStrategyStorage {\r\n    bytes32 internal constant _BANK_SLOT = 0xd2eff96e29993ca5431993c3a205e12e198965c0e1fdd87b4899b57f1e611c74;\r\n    bytes32 internal constant _UNDERLYING_SLOT = 0x0fad97fe3ec7d6c1e9191a09a0c4ccb7a831b6605392e57d2fedb8501a4dc812;\r\n    bytes32 internal constant _DERIVATIVE_SLOT = 0x4ff4c9b81c0bf267e01129f4817e03efc0163ee7133b87bd58118a96bbce43d3;\r\n    bytes32 internal constant _REWARD_SLOT = 0xaeb865605058f37eedb4467ee2609ddec592b0c9a6f7f7cb0db3feabe544c71c;\r\n\r\n    constructor() {\r\n        assert(_BANK_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.bank\")) - 1));\r\n        assert(_UNDERLYING_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.underlying\")) - 1));\r\n        assert(_DERIVATIVE_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.derivative\")) - 1));\r\n        assert(_REWARD_SLOT == bytes32(uint256(keccak256(\"eip1967.strategy.reward\")) - 1));\r\n    }\r\n\r\n    function initializeStorage(\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_\r\n    ) internal initializer {\r\n        _setBank(bank_);\r\n        _setUnderlying(underlying_);\r\n        _setDerivative(derivative_);\r\n        _setReward(reward_);\r\n    }\r\n\r\n    /// @notice The Bank that the Strategy is associated with\r\n    function bank() public view override returns (address) {\r\n        return getAddress(_BANK_SLOT);\r\n    }\r\n\r\n    /// @notice The underlying token the Strategy invests in AaveV2\r\n    function underlying() public view override returns (address) {\r\n        return getAddress(_UNDERLYING_SLOT);\r\n    }\r\n\r\n    /// @notice The derivative token received from AaveV2 (aToken)\r\n    function derivative() public view override returns (address) {\r\n        return getAddress(_DERIVATIVE_SLOT);\r\n    }\r\n\r\n    /// @notice The reward token received from AaveV2 (stkAave)\r\n    function reward() public view override returns (address) {\r\n        return getAddress(_REWARD_SLOT);\r\n    }\r\n\r\n    function _setBank(address _address) internal {\r\n        setAddress(_BANK_SLOT, _address);\r\n    }\r\n\r\n    function _setUnderlying(address _address) internal {\r\n        setAddress(_UNDERLYING_SLOT, _address);\r\n    }\r\n\r\n    function _setDerivative(address _address) internal {\r\n        setAddress(_DERIVATIVE_SLOT, _address);\r\n    }\r\n\r\n    function _setReward(address _address) internal {\r\n        setAddress(_REWARD_SLOT, _address);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "contracts/strategies/compound/interfaces/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICToken {\r\n    function underlying() external;\r\n\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/compound/interfaces/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IComptroller {\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function getHypotheticalAccountLiquidity(\r\n        address account,\r\n        address cTokenModify,\r\n        uint256 redeemTokens,\r\n        uint256 borrowAmount\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function claimComp(address holder) external;\r\n\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/compound/interfaces/ICEther.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\ninterface ICEther {\n    function mint() external payable;\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function repayBorrow() external payable;\n\n    function repayBorrowBehalf(address borrower) external payable;\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account) external view returns (uint256);\n\n    function balanceOfUnderlying(address account) external returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"
    },
    "contracts/strategies/curve/OhCurve3PoolStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\r\nimport {IStrategy} from \"../../interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"../../libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"../OhStrategy.sol\";\r\nimport {OhCurve3PoolHelper} from \"./OhCurve3PoolHelper.sol\";\r\nimport {OhCurve3PoolStrategyStorage} from \"./OhCurve3PoolStrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Curve 3Pool Strategy\r\n/// @notice Standard Curve 3Pool LP + Gauge Single Underlying Strategy\r\n/// @notice 3Pool Underlying, in order: (DAI, USDC, USDT)\r\ncontract OhCurve3PoolStrategy is OhStrategy, OhCurve3PoolStrategyStorage, OhCurve3PoolHelper, IStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Initialize the Curve 3Pool Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initialize the Curve 3Pool Strategy Proxy\r\n    /// @param registry_ Address of the Registry\r\n    /// @param bank_ Address of the Bank\r\n    /// @param underlying_ Underlying (DAI, USDC, USDT)\r\n    /// @param derivative_ 3CRV LP Token\r\n    /// @param reward_ CRV Gov Token\r\n    /// @param pool_ Address of the Curve 3Pool\r\n    /// @param gauge_ Curve Gauge, Staking Contract\r\n    /// @param mintr_ Curve Mintr, Rewards Contract\r\n    /// @param index_ Underlying 3Pool Index\r\n    function initializeCurve3PoolStrategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address pool_,\r\n        address gauge_,\r\n        address mintr_,\r\n        uint256 index_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeCurve3PoolStorage(pool_, gauge_, mintr_, index_);\r\n    }\r\n\r\n    // calculate the total underlying balance\r\n    function investedBalance() public view override returns (uint256) {\r\n        return calcWithdraw(pool(), stakedBalance(), int128(index()));\r\n    }\r\n\r\n    // amount of 3CRV staked in the Gauge\r\n    function stakedBalance() public view returns (uint256) {\r\n        return staked(gauge());\r\n    }\r\n\r\n    /// @notice Execute the Curve 3Pool Strategy\r\n    /// @dev Compound CRV Yield, Add Liquidity, Stake into Gauge\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    /// @notice Withdraw an amount of underlying from Curve 3Pool Strategy\r\n    /// @param amount Amount of Underlying tokens to withdraw\r\n    /// @dev Unstake from Gauge, Remove Liquidity\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    /// @notice Withdraw all underlying from Curve 3Pool Strategy\r\n    /// @dev Unstake from Gauge, Remove Liquidity\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 invested = investedBalance();\r\n        _withdraw(msg.sender, invested);\r\n    }\r\n\r\n    /// @dev Compound rewards into underlying through liquidation\r\n    /// @dev Claim Rewards from Mintr, sell CRV for USDC\r\n    function _compound() internal {\r\n        // claim available CRV rewards\r\n        claim(mintr(), gauge());\r\n        uint256 rewardAmount = rewardBalance();\r\n        if (rewardAmount > 0) {\r\n            liquidate(reward(), underlying(), rewardAmount);\r\n        }\r\n    }\r\n\r\n    // deposit underlying into 3Pool to get 3CRV and stake into Gauge\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            // add liquidity to 3Pool to receive 3CRV\r\n            addLiquidity(pool(), underlying(), index(), amount, 1);\r\n            // stake all received in the 3CRV gauge\r\n            stake(gauge(), derivative(), derivativeBalance());\r\n        }\r\n    }\r\n\r\n    // withdraw underlying tokens from the protocol\r\n    // TODO: Double check withdrawGauge math, TransferHelper\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 invested = investedBalance();\r\n        uint256 staked = stakedBalance();\r\n\r\n        // calculate % of supply ownership\r\n        uint256 supplyShare = amount.mul(1e18).div(invested);\r\n\r\n        // find amount to unstake in 3CRV\r\n        uint256 unstakeAmount = Math.min(staked, supplyShare.mul(staked).div(1e18));\r\n\r\n        // find amount to redeem in underlying\r\n        uint256 redeemAmount = Math.min(invested, supplyShare.mul(invested).div(1e18));\r\n\r\n        // unstake from Gauge & remove liquidity from Pool\r\n        unstake(gauge(), unstakeAmount);\r\n        removeLiquidity(pool(), index(), redeemAmount, unstakeAmount);\r\n\r\n        // withdraw to bank\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), amount);\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/strategies/curve/OhCurve3PoolHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {ICurve3Pool} from \"./interfaces/ICurve3Pool.sol\";\r\nimport {IGauge} from \"./interfaces/IGauge.sol\";\r\nimport {IMintr} from \"./interfaces/IMintr.sol\";\r\n\r\n/// @title Oh! Finance Curve 3Pool Helper\r\n/// @notice Helper functions for Curve 3Pool Strategies\r\nabstract contract OhCurve3PoolHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Add liquidity to Curve's 3Pool, receiving 3CRV in return\r\n    /// @param pool The address of Curve 3Pool\r\n    /// @param underlying The underlying we want to deposit\r\n    /// @param index The index of the underlying\r\n    /// @param amount The amount of underlying to deposit\r\n    /// @param minMint The min LP tokens to mint before tx reverts (slippage)\r\n    function addLiquidity(\r\n        address pool,\r\n        address underlying,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 minMint\r\n    ) internal {\r\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\r\n        amounts[index] = amount;\r\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\r\n        ICurve3Pool(pool).add_liquidity(amounts, minMint);\r\n    }\r\n\r\n    /// @notice Remove liquidity from Curve 3Pool, receiving a single underlying\r\n    /// @param pool The Curve 3Pool\r\n    /// @param index The index of underlying we want to withdraw\r\n    /// @param amount The amount to withdraw\r\n    /// @param maxBurn The max LP tokens to burn before the tx reverts (slippage)\r\n    function removeLiquidity(\r\n        address pool,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 maxBurn\r\n    ) internal {\r\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\r\n        amounts[index] = amount;\r\n        ICurve3Pool(pool).remove_liquidity_imbalance(amounts, maxBurn);\r\n    }\r\n\r\n    /// @notice Claim CRV rewards from the Mintr for a given Gauge\r\n    /// @param mintr The CRV Mintr (Rewards Contract)\r\n    /// @param gauge The Gauge (Staking Contract) to claim from\r\n    function claim(address mintr, address gauge) internal {\r\n        IMintr(mintr).mint(gauge);\r\n    }\r\n\r\n    /// @notice Calculate the max withdrawal amount to a single underlying\r\n    /// @param pool The Curve LP Pool\r\n    /// @param amount The amount of underlying to deposit\r\n    /// @param index The index of the underlying in the LP Pool\r\n    function calcWithdraw(\r\n        address pool,\r\n        uint256 amount,\r\n        int128 index\r\n    ) internal view returns (uint256) {\r\n        return ICurve3Pool(pool).calc_withdraw_one_coin(amount, index);\r\n    }\r\n\r\n    /// @notice Get the balance of staked tokens in a given Gauge\r\n    /// @param gauge The Curve Gauge to check\r\n    function staked(address gauge) internal view returns (uint256) {\r\n        return IGauge(gauge).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Stake crvUnderlying into the Gauge to earn CRV\r\n    /// @param gauge The Curve Gauge to stake into\r\n    /// @param crvUnderlying The Curve LP Token to stake\r\n    /// @param amount The amount of LP Tokens to stake\r\n    function stake(\r\n        address gauge,\r\n        address crvUnderlying,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(crvUnderlying).safeIncreaseAllowance(gauge, amount);\r\n        IGauge(gauge).deposit(amount);\r\n    }\r\n\r\n    /// @notice Unstake crvUnderlying funds from the Curve Gauge\r\n    /// @param gauge The Curve Gauge to unstake from\r\n    /// @param amount The amount of LP Tokens to withdraw\r\n    function unstake(address gauge, uint256 amount) internal {\r\n        IGauge(gauge).withdraw(amount);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/curve/interfaces/ICurve3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ICurve3Pool {\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256, int128) external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\r\n        external;\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts) external;\r\n\r\n    function exchange(\r\n        int128 from,\r\n        int128 to,\r\n        uint256 _from_amount,\r\n        uint256 _min_to_amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/strategies/curve/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IGauge {\r\n    function deposit(uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function user_checkpoint(address) external;\r\n}\r\n"
    },
    "contracts/strategies/curve/interfaces/IMintr.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IMintr {\r\n    function mint(address) external;\r\n}\r\n"
    },
    "contracts/strategies/aave/OhAaveV2Strategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IStrategy} from \"../../interfaces/strategies/IStrategy.sol\";\r\nimport {TransferHelper} from \"../../libraries/TransferHelper.sol\";\r\nimport {OhStrategy} from \"../OhStrategy.sol\";\r\nimport {OhAaveV2Helper} from \"./OhAaveV2Helper.sol\";\r\nimport {OhAaveV2StrategyStorage} from \"./OhAaveV2StrategyStorage.sol\";\r\n\r\n/// @title Oh! Finance Aave V2 Strategy\r\n/// @notice Standard strategy using Aave V2 Protocol\r\n/// @dev Underlying: USDC, USDT, etc.\r\n/// @dev Derivative: aToken, 1:1 ratio with underlying\r\n/// @dev https://docs.aave.com/developers/the-core-protocol/atokens\r\ncontract OhAaveV2Strategy is IStrategy, OhAaveV2Helper, OhStrategy, OhAaveV2StrategyStorage {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Initialize the AaveV2 Strategy Logic\r\n    constructor() initializer {\r\n        assert(registry() == address(0));\r\n        assert(bank() == address(0));\r\n        assert(underlying() == address(0));\r\n        assert(reward() == address(0));\r\n    }\r\n\r\n    /// @notice Initialize the AaveV2 Strategy Proxy\r\n    /// @param registry_ the registry contract\r\n    /// @param bank_ the bank associated with the strategy\r\n    /// @param underlying_ the underlying token that is deposited\r\n    /// @param derivative_ the aToken address received from Aave\r\n    /// @param reward_ the address of the reward token stkAAVE\r\n    /// @param lendingPool_ the AaveV2 lending pool that we lend to\r\n    /// @param incentivesController_ the AaveV2 rewards contract\r\n    /// @dev The function should be called at time of deployment\r\n    function initializeAaveV2Strategy(\r\n        address registry_,\r\n        address bank_,\r\n        address underlying_,\r\n        address derivative_,\r\n        address reward_,\r\n        address stakedToken_,\r\n        address lendingPool_,\r\n        address incentivesController_\r\n    ) public initializer {\r\n        initializeStrategy(registry_, bank_, underlying_, derivative_, reward_);\r\n        initializeAaveV2Storage(stakedToken_, lendingPool_, incentivesController_);\r\n    }\r\n\r\n    /// @notice Balance of underlying invested in AaveV2\r\n    /// @dev aTokens are 1:1 with underlying, they are continuously distributed to users\r\n    function investedBalance() public view override returns (uint256) {\r\n        return derivativeBalance();\r\n    }\r\n\r\n    /// @notice Balance of stkAAVE await liquidation\r\n    /// @dev Rewards are first received in stkAAVe, then must undergo 10 day cooldown\r\n    /// @dev Before batch claiming.\r\n    function stakedBalance() public view returns (uint256) {\r\n        return IERC20(stakedToken()).balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Invest in the AaveV2 Strategy\r\n    /// @dev Compound by claiming stkAAVE, then unwrapping + liquidating if cooldown permits\r\n    /// @dev Deposit all underlying to receive aTokens\r\n    function invest() external override onlyBank {\r\n        _compound();\r\n        _deposit();\r\n    }\r\n\r\n    /// @notice\r\n    function withdraw(uint256 amount) external override onlyBank returns (uint256) {\r\n        uint256 withdrawn = _withdraw(msg.sender, amount);\r\n        return withdrawn;\r\n    }\r\n\r\n    /// @notice\r\n    function withdrawAll() external override onlyBank {\r\n        uint256 amount = derivativeBalance();\r\n        _withdraw(msg.sender, amount);\r\n    }\r\n\r\n    /// @dev Compound stkAAVE rewards on a alternating cooldown schedule\r\n    function _compound() internal {\r\n        uint256 currentCooldown = rewardCooldown();\r\n\r\n        // if the current cooldown has passed\r\n        if (block.timestamp > currentCooldown) {\r\n            // save state variables\r\n            uint256 balance = stakedBalance();\r\n            address staked = stakedToken();\r\n            uint256 expiration = currentCooldown.add(unstakingWindow(staked));\r\n\r\n            // if we have stkAAVE and the unstaking window hasn't passed\r\n            if (balance > 0 && block.timestamp < expiration) {\r\n                // redeem all available AAVE\r\n                redeem(staked, balance);\r\n\r\n                // validate we received AAVE\r\n                uint256 amount = rewardBalance();\r\n                if (amount > 0) {\r\n                    // liquidate for underlying\r\n                    liquidate(reward(), underlying(), amount);\r\n                }\r\n            }\r\n\r\n            // claim new batch of available stkAAVE rewards\r\n            claimRewards(incentivesController(), derivative());\r\n\r\n            balance = stakedBalance();\r\n            if (balance > 0) {\r\n                // initiate a new cooldown\r\n                cooldown(staked);\r\n\r\n                // validate the cooldown was set\r\n                uint256 newCooldown = stakersCooldown(staked);\r\n                require(newCooldown == block.timestamp, \"AaveV2: Cooldown failed\");\r\n\r\n                // find reward cooldown, new timestamp when rewards are claimable\r\n                uint256 newRewardCooldown = newCooldown.add(cooldownWindow(staked));\r\n                _setRewardCooldown(newRewardCooldown);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _deposit() internal {\r\n        uint256 amount = underlyingBalance();\r\n        if (amount > 0) {\r\n            lend(lendingPool(), underlying(), amount);\r\n        }\r\n    }\r\n\r\n    // withdraw tokens from protocol after converting aTokens to underlying\r\n    function _withdraw(address recipient, uint256 amount) internal returns (uint256) {\r\n        if (amount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 reclaimed = reclaim(lendingPool(), underlying(), amount);\r\n        uint256 withdrawn = TransferHelper.safeTokenTransfer(recipient, underlying(), reclaimed);\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/aave/OhAaveV2Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {ILendingPoolV2} from \"./interfaces/ILendingPoolV2.sol\";\r\nimport {ILendingPoolAddressesProviderV2} from \"./interfaces/ILendingPoolAddressesProviderV2.sol\";\r\nimport {IAaveIncentivesController} from \"./interfaces/IAaveIncentivesController.sol\";\r\nimport {IAaveProtocolDataProviderV2} from \"./interfaces/IAaveProtocolDataProviderV2.sol\";\r\nimport {IStakedToken} from \"./interfaces/IStakedToken.sol\";\r\n\r\n/// @title Oh! Finance AaveV2 Helper\r\n/// @notice Helper functions to interact with the AaveV2\r\n/// @dev https://docs.aave.com/portal/\r\nabstract contract OhAaveV2Helper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Get the AaveV2 aToken for a given underlying\r\n    /// @param dataProvider The AaveV2 Data Provider\r\n    /// @param underlying The underlying token to check\r\n    /// @return The address of the associated aToken\r\n    function aToken(address dataProvider, address underlying) internal view returns (address) {\r\n        (address aTokenAddress, , ) = IAaveProtocolDataProviderV2(dataProvider).getReserveTokensAddresses(underlying);\r\n        return aTokenAddress;\r\n    }\r\n\r\n    /// @notice Get the AaveV2 Lending Pool\r\n    /// @param addressProvider The AaveV2 Address Provider\r\n    /// @return The address of the AaveV2 Lending Pool\r\n    function lendingPool(address addressProvider) internal view returns (address) {\r\n        return ILendingPoolAddressesProviderV2(addressProvider).getLendingPool();\r\n    }\r\n\r\n    /// @notice Get the cooldown timestamp start for this contract\r\n    /// @param stakedToken The address of stkAAVE\r\n    /// @return The timestamp the cooldown started on\r\n    function stakersCooldown(address stakedToken) internal view returns (uint256) {\r\n        uint256 stakerCooldown = IStakedToken(stakedToken).stakersCooldowns(address(this));\r\n        return stakerCooldown;\r\n    }\r\n\r\n    /// @notice Get the cooldown window in seconds for unstaking stkAAVE to AAVE before cooldown expires\r\n    /// @dev 864000 - 10 days\r\n    /// @param stakedToken The address of stkAAVE\r\n    /// @return The cooldown seconds to wait before unstaking\r\n    function cooldownWindow(address stakedToken) internal view returns (uint256) {\r\n        uint256 window = IStakedToken(stakedToken).COOLDOWN_SECONDS();\r\n        return window;\r\n    }\r\n\r\n    /// @notice Get the unstake window in seconds for unstaking stkAAVE to AAVE after cooldown passes\r\n    /// @dev 172800 - 2 days\r\n    /// @param stakedToken The address of stkAAVE\r\n    /// @return The unstake window seconds we have to unwrap stkAAVE to AAVE\r\n    function unstakingWindow(address stakedToken) internal view returns (uint256) {\r\n        uint256 window = IStakedToken(stakedToken).UNSTAKE_WINDOW();\r\n        return window;\r\n    }\r\n\r\n    /// @notice Initiate a claim cooldown to swap stkAAVE to AAVE\r\n    /// @param stakedToken The address of stkAAVE\r\n    function cooldown(address stakedToken) internal {\r\n        IStakedToken(stakedToken).cooldown();\r\n    }\r\n\r\n    /// @notice Redeem an amount of stkAAVE for AAVE\r\n    /// @param stakedToken The address of stkAAVE\r\n    /// @param amount The amount of stkAAVE to redeem\r\n    function redeem(address stakedToken, uint256 amount) internal {\r\n        IStakedToken(stakedToken).redeem(address(this), amount);\r\n    }\r\n\r\n    /// @notice Claim stkAAVE from the AaveV2 Incentive Controller\r\n    /// @dev Claim all available rewards, return if none available\r\n    /// @param incentivesController The AaveV2 Incentive Controller\r\n    /// @param token The aToken to claim rewards for\r\n    function claimRewards(address incentivesController, address token) internal {\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = token;\r\n\r\n        uint256 rewards = IAaveIncentivesController(incentivesController).getRewardsBalance(tokens, address(this));\r\n\r\n        if (rewards > 0) {\r\n            IAaveIncentivesController(incentivesController).claimRewards(tokens, rewards, address(this));\r\n        }\r\n    }\r\n\r\n    /// @notice Lend underlying to Aave V2 Lending Pool, receive aTokens\r\n    /// @param pool The AaveV2 Lending Pool\r\n    /// @param underlying The underlying ERC20 to lend\r\n    /// @param amount The amount of underlying to lend\r\n    function lend(\r\n        address pool,\r\n        address underlying,\r\n        uint256 amount\r\n    ) internal {\r\n        IERC20(underlying).safeIncreaseAllowance(pool, amount);\r\n        ILendingPoolV2(pool).deposit(\r\n            underlying,\r\n            amount,\r\n            address(this),\r\n            0 // referral code\r\n        );\r\n    }\r\n\r\n    /// @notice Reclaim underlying by sending aTokens to Aave V2 Lending Pool\r\n    /// @param pool The AaveV2 Lending Pool\r\n    /// @param token The aToken to redeem for underlying\r\n    /// @param amount The amount of aTokens to send\r\n    function reclaim(\r\n        address pool,\r\n        address token,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).safeIncreaseAllowance(pool, amount);\r\n        uint256 withdrawn = ILendingPoolV2(pool).withdraw(token, amount, address(this));\r\n        require(withdrawn == amount || withdrawn == balance, \"AaveV2: Withdraw failed\");\r\n        return withdrawn;\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/aave/OhAaveV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\nimport {IAaveV2StrategyStorage} from \"../../interfaces/strategies/aave/IAaveV2StrategyStorage.sol\";\r\nimport {OhUpgradeable} from \"../../proxy/OhUpgradeable.sol\";\r\n\r\ncontract OhAaveV2StrategyStorage is Initializable, OhUpgradeable, IAaveV2StrategyStorage {\r\n    bytes32 internal constant _STAKED_TOKEN_SLOT = 0x6ffcc641b9dd32ae63496168decfef38477654371686576c048aacac7664aa89;\r\n    bytes32 internal constant _LENDING_POOL_SLOT = 0x32da969ce0980814ec712773a44ab0fbc7a926f6c25ab5c3ab143cbaf257713b;\r\n    bytes32 internal constant _INCENTIVES_CONTROLLER_SLOT = 0x8354a0ba382ef5f265c75cfb638fc27db941b9db0fd5dc17719a651d5d4cda15;\r\n    bytes32 internal constant _REWARD_COOLDOWN_SLOT = 0x29ba1167c1adca0c8d6bf06d5964666a1db7a70ebfda62e977c0e3331d7b3923;\r\n\r\n    constructor() {\r\n        assert(_STAKED_TOKEN_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.stakedToken\")) - 1));\r\n        assert(_LENDING_POOL_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.lendingPool\")) - 1));\r\n        assert(_INCENTIVES_CONTROLLER_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.incentivesController\")) - 1));\r\n        assert(_REWARD_COOLDOWN_SLOT == bytes32(uint256(keccak256(\"eip1967.aaveV2Strategy.rewardCooldown\")) - 1));\r\n    }\r\n\r\n    function initializeAaveV2Storage(\r\n        address stakedToken_,\r\n        address lendingPool_,\r\n        address incentiveController_\r\n    ) internal initializer {\r\n        _setStakedToken(stakedToken_);\r\n        _setLendingPool(lendingPool_);\r\n        _setIncentiveController(incentiveController_);\r\n        _setRewardCooldown(block.timestamp + 864000); // initialize with 10 day reward lag\r\n    }\r\n\r\n    function stakedToken() public view override returns (address) {\r\n        return getAddress(_STAKED_TOKEN_SLOT);\r\n    }\r\n\r\n    function lendingPool() public view override returns (address) {\r\n        return getAddress(_LENDING_POOL_SLOT);\r\n    }\r\n\r\n    function incentivesController() public view override returns (address) {\r\n        return getAddress(_INCENTIVES_CONTROLLER_SLOT);\r\n    }\r\n\r\n    function rewardCooldown() public view returns (uint256) {\r\n        return getUInt256(_REWARD_COOLDOWN_SLOT);\r\n    }\r\n\r\n    function _setStakedToken(address stakedToken_) internal {\r\n        setAddress(_STAKED_TOKEN_SLOT, stakedToken_);\r\n    }\r\n\r\n    function _setLendingPool(address lendingPool_) internal {\r\n        setAddress(_LENDING_POOL_SLOT, lendingPool_);\r\n    }\r\n\r\n    function _setIncentiveController(address incentiveController_) internal {\r\n        setAddress(_INCENTIVES_CONTROLLER_SLOT, incentiveController_);\r\n    }\r\n\r\n    function _setRewardCooldown(uint256 rewardCooldown_) internal {\r\n        setUInt256(_REWARD_COOLDOWN_SLOT, rewardCooldown_);\r\n    }\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/ILendingPoolV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {ILendingPoolAddressesProviderV2} from \"./ILendingPoolAddressesProviderV2.sol\";\r\nimport {DataTypes} from \"../libraries/DataTypes.sol\";\r\n\r\ninterface ILendingPoolV2 {\r\n    /**\r\n     * @dev Emitted on deposit()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address initiating the deposit\r\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n     * @param amount The amount deposited\r\n     * @param referral The referral code used\r\n     **/\r\n    event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\r\n\r\n    /**\r\n     * @dev Emitted on withdraw()\r\n     * @param reserve The address of the underlyng asset being withdrawn\r\n     * @param user The address initiating the withdrawal, owner of aTokens\r\n     * @param to Address that will receive the underlying\r\n     * @param amount The amount to be withdrawn\r\n     **/\r\n    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n     * @param reserve The address of the underlying asset being borrowed\r\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n     * initiator of the transaction on flashLoan()\r\n     * @param onBehalfOf The address that will be getting the debt\r\n     * @param amount The amount borrowed out\r\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n     * @param borrowRate The numeric rate at which the user has borrowed\r\n     * @param referral The referral code used\r\n     **/\r\n    event Borrow(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint256 borrowRateMode,\r\n        uint256 borrowRate,\r\n        uint16 indexed referral\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on repay()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The beneficiary of the repayment, getting his debt reduced\r\n     * @param repayer The address of the user initiating the repay(), providing the funds\r\n     * @param amount The amount repaid\r\n     **/\r\n    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\r\n\r\n    /**\r\n     * @dev Emitted on swapBorrowRateMode()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user swapping his rate mode\r\n     * @param rateMode The rate mode that the user wants to swap to\r\n     **/\r\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on setUserUseReserveAsCollateral()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user enabling the usage as collateral\r\n     **/\r\n    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on rebalanceStableBorrowRate()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address of the user for which the rebalance has been executed\r\n     **/\r\n    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n    /**\r\n     * @dev Emitted on flashLoan()\r\n     * @param target The address of the flash loan receiver contract\r\n     * @param initiator The address initiating the flash loan\r\n     * @param asset The address of the asset being flash borrowed\r\n     * @param amount The amount flash borrowed\r\n     * @param premium The fee flash borrowed\r\n     * @param referralCode The referral code used\r\n     **/\r\n    event FlashLoan(\r\n        address indexed target,\r\n        address indexed initiator,\r\n        address indexed asset,\r\n        uint256 amount,\r\n        uint256 premium,\r\n        uint16 referralCode\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered.\r\n     */\r\n    event Paused();\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted.\r\n     */\r\n    event Unpaused();\r\n\r\n    /**\r\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n     * LendingPoolCollateral manager using a DELEGATECALL\r\n     * This allows to have the events in the generated ABI for LendingPool.\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n     * @param liquidator The address of the liquidator\r\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    event LiquidationCall(\r\n        address indexed collateralAsset,\r\n        address indexed debtAsset,\r\n        address indexed user,\r\n        uint256 debtToCover,\r\n        uint256 liquidatedCollateralAmount,\r\n        address liquidator,\r\n        bool receiveAToken\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n     * gets added to the LendingPool ABI\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param liquidityRate The new liquidity rate\r\n     * @param stableBorrowRate The new stable borrow rate\r\n     * @param variableBorrowRate The new variable borrow rate\r\n     * @param liquidityIndex The new liquidity index\r\n     * @param variableBorrowIndex The new variable borrow index\r\n     **/\r\n    event ReserveDataUpdated(\r\n        address indexed reserve,\r\n        uint256 liquidityRate,\r\n        uint256 stableBorrowRate,\r\n        uint256 variableBorrowRate,\r\n        uint256 liquidityIndex,\r\n        uint256 variableBorrowIndex\r\n    );\r\n\r\n    /**\r\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n     * @param asset The address of the underlying asset to deposit\r\n     * @param amount The amount to be deposited\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n     * @param asset The address of the underlying asset to withdraw\r\n     * @param amount The underlying amount to be withdrawn\r\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n     * @param to Address that will receive the underlying, same as msg.sender if the user\r\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n     *   different wallet\r\n     * @return The final amount withdrawn\r\n     **/\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n     * @param asset The address of the underlying asset to borrow\r\n     * @param amount The amount to be borrowed\r\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n     * if he has been given credit delegation allowance\r\n     **/\r\n    function borrow(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 interestRateMode,\r\n        uint16 referralCode,\r\n        address onBehalfOf\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n     * @param asset The address of the borrowed underlying asset previously borrowed\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n     * other borrower whose debt should be removed\r\n     * @return The final amount repaid\r\n     **/\r\n    function repay(\r\n        address asset,\r\n        uint256 amount,\r\n        uint256 rateMode,\r\n        address onBehalfOf\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param rateMode The rate mode that the user wants to swap to\r\n     **/\r\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n    /**\r\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n     * - Users can be rebalanced if the following conditions are satisfied:\r\n     *     1. Usage ratio is above 95%\r\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n     *        borrowed at a stable rate and depositors are not earning enough\r\n     * @param asset The address of the underlying asset borrowed\r\n     * @param user The address of the user to be rebalanced\r\n     **/\r\n    function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n    /**\r\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n     * @param asset The address of the underlying asset deposited\r\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n     **/\r\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n    /**\r\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n     * @param user The address of the borrower getting liquidated\r\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n     * to receive the underlying collateral asset directly\r\n     **/\r\n    function liquidationCall(\r\n        address collateralAsset,\r\n        address debtAsset,\r\n        address user,\r\n        uint256 debtToCover,\r\n        bool receiveAToken\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n     * as long as the amount taken plus a fee is returned.\r\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n     * For further details please visit https://developers.aave.com\r\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n     * @param assets The addresses of the assets being flash-borrowed\r\n     * @param amounts The amounts amounts being flash-borrowed\r\n     * @param modes Types of the debt to open if the flash loan is not returned:\r\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n     * @param params Variadic packed params to pass to the receiver as extra information\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function flashLoan(\r\n        address receiverAddress,\r\n        address[] calldata assets,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata modes,\r\n        address onBehalfOf,\r\n        bytes calldata params,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the user account data across all the reserves\r\n     * @param user The address of the user\r\n     * @return totalCollateralETH the total collateral in ETH of the user\r\n     * @return totalDebtETH the total debt in ETH of the user\r\n     * @return availableBorrowsETH the borrowing power left of the user\r\n     * @return currentLiquidationThreshold the liquidation threshold of the user\r\n     * @return ltv the loan to value of the user\r\n     * @return healthFactor the current health factor of the user\r\n     **/\r\n    function getUserAccountData(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalCollateralETH,\r\n            uint256 totalDebtETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n\r\n    function initReserve(\r\n        address reserve,\r\n        address aTokenAddress,\r\n        address stableDebtAddress,\r\n        address variableDebtAddress,\r\n        address interestRateStrategyAddress\r\n    ) external;\r\n\r\n    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\r\n\r\n    function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n    /**\r\n     * @dev Returns the configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The configuration of the reserve\r\n     **/\r\n    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n    /**\r\n     * @dev Returns the configuration of the user across all the reserves\r\n     * @param user The user address\r\n     * @return The configuration of the user\r\n     **/\r\n    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\r\n\r\n    /**\r\n     * @dev Returns the normalized income normalized income of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve's normalized income\r\n     */\r\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the normalized variable debt per unit of asset\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The reserve normalized variable debt\r\n     */\r\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the state and configuration of the reserve\r\n     * @param asset The address of the underlying asset of the reserve\r\n     * @return The state of the reserve\r\n     **/\r\n    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n    function finalizeTransfer(\r\n        address asset,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 balanceFromAfter,\r\n        uint256 balanceToBefore\r\n    ) external;\r\n\r\n    function getReservesList() external view returns (address[] memory);\r\n\r\n    function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\r\n\r\n    function setPause(bool val) external;\r\n\r\n    function paused() external view returns (bool);\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/ILendingPoolAddressesProviderV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ILendingPoolAddressesProviderV2 {\r\n    event MarketIdSet(string newMarketId);\r\n    event LendingPoolUpdated(address indexed newAddress);\r\n    event ConfigurationAdminUpdated(address indexed newAddress);\r\n    event EmergencyAdminUpdated(address indexed newAddress);\r\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n    event PriceOracleUpdated(address indexed newAddress);\r\n    event LendingRateOracleUpdated(address indexed newAddress);\r\n    event ProxyCreated(bytes32 id, address indexed newAddress);\r\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n    function getMarketId() external view returns (string memory);\r\n\r\n    function setMarketId(string calldata marketId) external;\r\n\r\n    function setAddress(bytes32 id, address newAddress) external;\r\n\r\n    function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n    function getAddress(bytes32 id) external view returns (address);\r\n\r\n    function getLendingPool() external view returns (address);\r\n\r\n    function setLendingPoolImpl(address pool) external;\r\n\r\n    function getLendingPoolConfigurator() external view returns (address);\r\n\r\n    function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n    function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n    function setLendingPoolCollateralManager(address manager) external;\r\n\r\n    function getPoolAdmin() external view returns (address);\r\n\r\n    function setPoolAdmin(address admin) external;\r\n\r\n    function getEmergencyAdmin() external view returns (address);\r\n\r\n    function setEmergencyAdmin(address admin) external;\r\n\r\n    function getPriceOracle() external view returns (address);\r\n\r\n    function setPriceOracle(address priceOracle) external;\r\n\r\n    function getLendingRateOracle() external view returns (address);\r\n\r\n    function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IAaveDistributionManager} from \"./IAaveDistributionManager.sol\";\r\n\r\ninterface IAaveIncentivesController {\r\n    event RewardsAccrued(address indexed user, uint256 amount);\r\n\r\n    event RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\r\n\r\n    event ClaimerSet(address indexed user, address indexed claimer);\r\n\r\n    /**\r\n     * @dev Whitelists an address to claim the rewards on behalf of another address\r\n     * @param user The address of the user\r\n     * @param claimer The address of the claimer\r\n     */\r\n    function setClaimer(address user, address claimer) external;\r\n\r\n    /**\r\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\r\n     * @param user The address of the user\r\n     * @return The claimer address\r\n     */\r\n    function getClaimer(address user) external view returns (address);\r\n\r\n    /**\r\n     * @dev Configure assets for a certain rewards emission\r\n     * @param assets The assets to incentivize\r\n     * @param emissionsPerSecond The emission for each asset\r\n     */\r\n    function configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\r\n\r\n    /**\r\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\r\n     * @param asset The address of the user\r\n     * @param userBalance The balance of the user of the asset in the lending pool\r\n     * @param totalSupply The total supply of the asset in the lending pool\r\n     **/\r\n    function handleAction(\r\n        address asset,\r\n        uint256 userBalance,\r\n        uint256 totalSupply\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n     * @return The rewards\r\n     **/\r\n    function getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n     * @param amount Amount of rewards to claim\r\n     * @param to Address that will be receiving the rewards\r\n     * @return Rewards claimed\r\n     **/\r\n    function claimRewards(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\r\n     * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\r\n     * @param amount Amount of rewards to claim\r\n     * @param user Address to check and claim rewards\r\n     * @param to Address that will be receiving the rewards\r\n     * @return Rewards claimed\r\n     **/\r\n    function claimRewardsOnBehalf(\r\n        address[] calldata assets,\r\n        uint256 amount,\r\n        address user,\r\n        address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @dev returns the unclaimed rewards of the user\r\n     * @param user the address of the user\r\n     * @return the unclaimed user rewards\r\n     */\r\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev for backward compatibility with previous implementation of the Incentives controller\r\n     */\r\n    function REWARD_TOKEN() external view returns (address);\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/IAaveProtocolDataProviderV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAaveProtocolDataProviderV2 {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n\r\n    function getReserveData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 availableLiquidity,\r\n            uint256 totalStableDebt,\r\n            uint256 totalVariableDebt,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 stableBorrowRate,\r\n            uint256 averageStableBorrowRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getUserReserveData(address asset, address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentStableDebt,\r\n            uint256 currentVariableDebt,\r\n            uint256 principalStableDebt,\r\n            uint256 scaledVariableDebt,\r\n            uint256 stableBorrowRate,\r\n            uint256 liquidityRate,\r\n            uint40 stableRateLastUpdated,\r\n            bool usageAsCollateralEnabled\r\n        );\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/IStakedToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IStakedToken {\r\n    function stake(address to, uint256 amount) external;\r\n\r\n    function redeem(address to, uint256 amount) external;\r\n\r\n    function cooldown() external;\r\n\r\n    function claimRewards(address to, uint256 amount) external;\r\n\r\n    function stakersCooldowns(address staker) external view returns (uint256);\r\n\r\n    function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n    function UNSTAKE_WINDOW() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/strategies/aave/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary DataTypes {\r\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n    struct ReserveData {\r\n        //stores the reserve configuration\r\n        ReserveConfigurationMap configuration;\r\n        //the liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n        //variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint128 currentStableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        //tokens addresses\r\n        address aTokenAddress;\r\n        address stableDebtTokenAddress;\r\n        address variableDebtTokenAddress;\r\n        //address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n        //the id of the reserve. Represents the position in the list of the active reserves\r\n        uint8 id;\r\n    }\r\n\r\n    struct ReserveConfigurationMap {\r\n        //bit 0-15: LTV\r\n        //bit 16-31: Liq. threshold\r\n        //bit 32-47: Liq. bonus\r\n        //bit 48-55: Decimals\r\n        //bit 56: Reserve is active\r\n        //bit 57: reserve is frozen\r\n        //bit 58: borrowing is enabled\r\n        //bit 59: stable rate borrowing enabled\r\n        //bit 60-63: reserved\r\n        //bit 64-79: reserve factor\r\n        uint256 data;\r\n    }\r\n\r\n    struct UserConfigurationMap {\r\n        uint256 data;\r\n    }\r\n\r\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n"
    },
    "contracts/strategies/aave/interfaces/IAaveDistributionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {DistributionTypes} from \"../libraries/DistributionTypes.sol\";\r\n\r\ninterface IAaveDistributionManager {\r\n    event AssetConfigUpdated(address indexed asset, uint256 emission);\r\n    event AssetIndexUpdated(address indexed asset, uint256 index);\r\n    event UserIndexUpdated(address indexed user, address indexed asset, uint256 index);\r\n    event DistributionEndUpdated(uint256 newDistributionEnd);\r\n\r\n    /**\r\n     * @dev Sets the end date for the distribution\r\n     * @param distributionEnd The end date timestamp\r\n     **/\r\n    function setDistributionEnd(uint256 distributionEnd) external;\r\n\r\n    /**\r\n     * @dev Gets the end date for the distribution\r\n     * @return The end of the distribution\r\n     **/\r\n    function getDistributionEnd() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev for backwards compatibility with the previous DistributionManager used\r\n     * @return The end of the distribution\r\n     **/\r\n    function DISTRIBUTION_END() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the data of an user on a distribution\r\n     * @param user Address of the user\r\n     * @param asset The address of the reference asset of the distribution\r\n     * @return The new index\r\n     **/\r\n    function getUserAssetData(address user, address asset) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the configuration of the distribution for a certain asset\r\n     * @param asset The address of the reference asset of the distribution\r\n     * @return The asset index, the emission per second and the last updated timestamp\r\n     **/\r\n    function getAssetData(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n"
    },
    "contracts/strategies/aave/libraries/DistributionTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary DistributionTypes {\r\n    struct AssetConfigInput {\r\n        uint104 emissionPerSecond;\r\n        uint256 totalStaked;\r\n        address underlyingAsset;\r\n    }\r\n\r\n    struct UserStakeInput {\r\n        address underlyingAsset;\r\n        uint256 stakedByUser;\r\n        uint256 totalStaked;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/strategies/aave/IAaveV2StrategyStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IAaveV2StrategyStorage {\r\n    function stakedToken() external view returns (address);\r\n\r\n    function lendingPool() external view returns (address);\r\n\r\n    function incentivesController() external view returns (address);\r\n}\r\n"
    },
    "contracts/OhTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport {TransferHelper} from \"./libraries/TransferHelper.sol\";\r\nimport {ITimelock} from \"./interfaces/ITimelock.sol\";\r\nimport {IToken} from \"./interfaces/IToken.sol\";\r\nimport {OhSubscriber} from \"./registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Token Timelock\r\n/// @notice Contract to manage linear token vesting over a given time period\r\n/// @notice Users accrue vested tokens as soon as the timelock starts, every second\r\ncontract OhTimelock is ReentrancyGuard, OhSubscriber, ITimelock {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice The total vested balance of tokens a user can claim\r\n    mapping(address => uint256) public balances;\r\n\r\n    /// @notice The total amount of tokens a user has already claimed\r\n    mapping(address => uint256) public claimed;\r\n\r\n    /// @notice The Oh! Finance Token address\r\n    address public token;\r\n\r\n    /// @notice The UNIX timestamp that the timelock starts at\r\n    uint256 public timelockStart;\r\n\r\n    /// @notice The length in seconds of the timelock\r\n    uint256 public timelockLength;\r\n\r\n    /// @notice Emitted when a user is added to the timelock\r\n    event Add(address indexed user, uint256 amount);\r\n\r\n    /// @notice Emitted every time a user claims tokens\r\n    event Claim(address indexed user, uint256 amount);\r\n\r\n    /// @notice Timelock constructor\r\n    /// @param registry_ The address of the Registry\r\n    /// @param _token The address of the Oh! Finance Token\r\n    /// @param _timelockDelay Seconds to delay the timelock from starting\r\n    /// @param _timelockLength The length of the timelock in seconds\r\n    constructor(\r\n        address registry_,\r\n        address _token,\r\n        uint256 _timelockDelay,\r\n        uint256 _timelockLength\r\n    ) OhSubscriber(registry_) {\r\n        token = _token;\r\n        timelockStart = block.timestamp + _timelockDelay;\r\n        timelockLength = _timelockLength;\r\n    }\r\n\r\n    /// @notice Add a set of users to the vesting contract with a set amount\r\n    /// @dev Only callable by Governance, delegates token votes to msg.sender until they are claimed\r\n    /// @param users The array of users to be added to the vesting contract\r\n    /// @param amounts The array of amounts of tokens to add to each users vesting schedule\r\n    function add(address[] memory users, uint256[] memory amounts) external onlyGovernance {\r\n        require(users.length == amounts.length, \"Timelock: Arrity mismatch\");\r\n\r\n        // find total, add to user balances\r\n        uint256 totalAmount = 0;\r\n        uint256 length = users.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            // get user and amount\r\n            address user = users[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            // update state and total, emit add\r\n            balances[user] = amount;\r\n            totalAmount = totalAmount.add(amount);\r\n            emit Add(user, amount);\r\n        }\r\n\r\n        // transfer from msg.sender, delegate votes back to msg.sender\r\n        IERC20(token).transferFrom(msg.sender, address(this), totalAmount);\r\n    }\r\n\r\n    /// @notice Claim all available tokens for the msg.sender, if any\r\n    /// @dev Reentrancy guard to prevent double claims\r\n    function claim() external nonReentrant {\r\n        require(block.timestamp > timelockStart, \"Timelock: Lock not started\");\r\n\r\n        // check for available claims\r\n        address user = msg.sender;\r\n        uint256 amount = claimable(user);\r\n        require(amount > 0, \"Timelock: No Tokens\");\r\n\r\n        // update user claimed variables\r\n        claimed[user] = claimed[user].add(amount);\r\n\r\n        // transfer to user\r\n        TransferHelper.safeTokenTransfer(user, token, amount);\r\n        emit Claim(user, amount);\r\n    }\r\n\r\n    /// @notice Available tokens available for a user to claim\r\n    /// @dev Available = ((Balances[user] * Time_Passed) / Total_Time) - Claimed[user]\r\n    /// @param user The user address to check\r\n    /// @return amount The amount of tokens available to claim\r\n    function claimable(address user) public view returns (uint256 amount) {\r\n        // save state variable to memory\r\n        uint256 userClaimed = claimed[user];\r\n\r\n        // if timelock hasn't started yet\r\n        if (block.timestamp < timelockStart) {\r\n            // return entire balance\r\n            amount = balances[user];\r\n        }\r\n        // else if timelock has expired\r\n        else if (block.timestamp > timelockStart.add(timelockLength)) {\r\n            // return total remaining balance\r\n            amount = balances[user].sub(userClaimed);\r\n        }\r\n        // else we are currently in the vesting phase\r\n        else {\r\n            // find the time passed since timelock start\r\n            uint256 delta = block.timestamp.sub(timelockStart);\r\n\r\n            // find the total vested amount of tokens available\r\n            uint256 totalVested = balances[user].mul(delta).div(timelockLength);\r\n\r\n            // return vested - claimed\r\n            amount = totalVested.sub(userClaimed);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/ITimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface ITimelock {}\r\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IToken {\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(\r\n        address delegator,\r\n        address delegatee,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function mint(address recipient, uint256 amount) external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint256);\r\n\r\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/registry/OhSubscriber.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ISubscriber} from \"../interfaces/ISubscriber.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\n\r\n/// @title Oh! Finance Subscriber\r\n/// @notice Base Oh! Finance contract used to control access throughout the protocol\r\nabstract contract OhSubscriber is ISubscriber {\r\n    address internal _registry;\r\n\r\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == governance() || msg.sender == manager(), \"Subscriber: Only Authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow the governance address to execute a function\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance(), \"Subscriber: Only Governance\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Construct contract with the Registry\r\n    /// @param registry_ The address of the Registry\r\n    constructor(address registry_) {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n        _registry = registry_;\r\n    }\r\n\r\n    /// @notice Get the Governance address\r\n    /// @return The current Governance address\r\n    function governance() public view override returns (address) {\r\n        return IRegistry(registry()).governance();\r\n    }\r\n\r\n    /// @notice Get the Manager address\r\n    /// @return The current Manager address\r\n    function manager() public view override returns (address) {\r\n        return IRegistry(registry()).manager();\r\n    }\r\n\r\n    /// @notice Get the Registry address\r\n    /// @return The current Registry address\r\n    function registry() public view override returns (address) {\r\n        return _registry;\r\n    }\r\n\r\n    /// @notice Set the Registry for the contract. Only callable by Governance.\r\n    /// @param registry_ The new registry\r\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\r\n    /// @dev Ideally should not be used\r\n    function setRegistry(address registry_) external onlyGovernance {\r\n        require(Address.isContract(registry_), \"Subscriber: Invalid Registry\");\r\n\r\n        _registry = registry_;\r\n        require(msg.sender == governance(), \"Subscriber: Bad Governance\");\r\n    }\r\n}\r\n"
    },
    "contracts/proxy/OhProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\nimport {OhUpgradeableProxy} from \"./OhUpgradeableProxy.sol\";\nimport {ProxyAdmin} from \"@openzeppelin/contracts/proxy/ProxyAdmin.sol\";\n\n/// @title Oh! Finance Proxy Admin\n/// @notice Contract used to manage and execute proxy upgrades, controlled by Governance\n/// @dev Based on OpenZeppelin Implementation\n/// @dev https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v3.4/contracts/proxy/ProxyAdmin.sol\ncontract OhProxyAdmin is ProxyAdmin, OhSubscriber {\n    constructor(address _registry) OhSubscriber(_registry) {\n        transferOwnership(governance());\n    }\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    // function getProxyImplementation(OhUpgradeableProxy proxy)\n    //     public\n    //     view\n    //     virtual\n    //     returns (address)\n    // {\n    //     // We need to manually run the static call since the getter cannot be flagged as view\n    //     // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n    //     (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n    //     require(success);\n    //     return abi.decode(returndata, (address));\n    // }\n\n    // /**\n    //  * @dev Returns the current admin of `proxy`.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - This contract must be the admin of `proxy`.\n    //  */\n    // function getProxyAdmin(OhUpgradeableProxy proxy) public view virtual returns (address) {\n    //     // We need to manually run the static call since the getter cannot be flagged as view\n    //     // bytes4(keccak256(\"admin()\")) == 0xf851a440\n    //     (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n    //     require(success);\n    //     return abi.decode(returndata, (address));\n    // }\n\n    // /**\n    //  * @dev Changes the admin of `proxy` to `newAdmin`.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - This contract must be the current admin of `proxy`.\n    //  */\n    // function changeProxyAdmin(OhUpgradeableProxy proxy, address newAdmin)\n    //     public\n    //     virtual\n    //     onlyGovernance\n    // {\n    //     proxy.changeAdmin(newAdmin);\n    // }\n\n    // /**\n    //  * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - This contract must be the admin of `proxy`.\n    //  */\n    // function upgrade(OhUpgradeableProxy proxy, address implementation)\n    //     public\n    //     virtual\n    //     onlyGovernance\n    // {\n    //     proxy.upgradeTo(implementation);\n    // }\n\n    // /**\n    //  * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n    //  * {TransparentUpgradeableProxy-upgradeToAndCall}.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - This contract must be the admin of `proxy`.\n    //  */\n    // function upgradeAndCall(\n    //     OhUpgradeableProxy proxy,\n    //     address implementation,\n    //     bytes memory data\n    // ) public payable virtual onlyGovernance {\n    //     proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    // }\n}\n"
    },
    "contracts/proxy/OhUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\";\r\n\r\n/// @title Oh! Finance Upgradeable Proxy\r\n/// @notice Versioned, EIP-1967 Compliant Proxy\r\n/// @dev Upgrades managed by the proxy admin contract\r\ncontract OhUpgradeableProxy is TransparentUpgradeableProxy {\r\n    bytes32 private constant _VERSION_SLOT = 0x460994c355dbc8229336897ed9def5884fb6b26b0a995b156780d056c758577d;\r\n\r\n    constructor(\r\n        address _logic,\r\n        address admin_,\r\n        bytes memory _data\r\n    ) TransparentUpgradeableProxy(_logic, admin_, _data) {\r\n        assert(_VERSION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.version\")) - 1));\r\n        _setVersion(1);\r\n    }\r\n\r\n    function getAdmin() external view returns (address admin_) {\r\n        admin_ = _admin();\r\n    }\r\n\r\n    function getImplementation() external view returns (address implementation_) {\r\n        implementation_ = _implementation();\r\n    }\r\n\r\n    function getVersion() external view returns (uint256 version_) {\r\n        version_ = _version();\r\n    }\r\n\r\n    /// @notice Override to support versioning\r\n    function _upgradeTo(address newImplementation) internal virtual override {\r\n        super._upgradeTo(newImplementation);\r\n        _setVersion(_version() + 1);\r\n    }\r\n\r\n    /// @notice Get the current version number\r\n    function _version() internal view returns (uint256 version_) {\r\n        bytes32 slot = _VERSION_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            version_ := sload(slot)\r\n        }\r\n    }\r\n\r\n    /// @notice Set the version on deployment/upgrades\r\n    function _setVersion(uint256 version_) private {\r\n        bytes32 slot = _VERSION_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, version_)\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../access/Ownable.sol\";\nimport \"./TransparentUpgradeableProxy.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./UpgradeableProxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _setAdmin(admin_);\n    }\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _admin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _admin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        require(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\");\n        emit AdminChanged(_admin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\n        _upgradeTo(newImplementation);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\n        _upgradeTo(newImplementation);\n        Address.functionDelegateCall(newImplementation, data);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address adm) {\n        bytes32 slot = _ADMIN_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            adm := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        bytes32 slot = _ADMIN_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, newAdmin)\n        }\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/UpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Proxy.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n *\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\n * {TransparentUpgradeableProxy}.\n */\ncontract UpgradeableProxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) public payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _setImplementation(_logic);\n        if(_data.length > 0) {\n            Address.functionDelegateCall(_logic, _data);\n        }\n    }\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            impl := sload(slot)\n        }\n    }\n\n    /**\n     * @dev Upgrades the proxy to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal virtual {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableProxy: new implementation is not a contract\");\n\n        bytes32 slot = _IMPLEMENTATION_SLOT;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, newImplementation)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/registry/OhRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\n\r\n/// @title Oh! Finance Registry\r\n/// @dev Contract that contains references to the all core contracts for Oh! Finance\r\n/// @dev Ideally, we should never need to replace this contract. Only update references.\r\ncontract OhRegistry is IRegistry {\r\n    using Address for address;\r\n\r\n    /// @notice address of governance contract\r\n    address public override governance;\r\n    /// @notice address of the management contract\r\n    address public override manager;\r\n\r\n    event GovernanceUpdated(address indexed oldGovernance, address indexed newGovernance);\r\n    event ManagerUpdated(address indexed oldManager, address indexed newManager);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == governance, \"Registry: Only Governance\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    /// @notice Sets the Governance address\r\n    /// @param _governance the new governance address\r\n    /// @dev Only Governance can call this function\r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        require(_governance.isContract(), \"Registry: Invalid Governance\");\r\n        emit GovernanceUpdated(governance, _governance);\r\n        governance = _governance;\r\n    }\r\n\r\n    /// @notice Sets the Manager address\r\n    /// @param _manager the new manager address\r\n    /// @dev Only Governance can call this function\r\n    function setManager(address _manager) external onlyGovernance {\r\n        require(_manager.isContract(), \"Registry: Invalid Manager\");\r\n        emit ManagerUpdated(manager, _manager);\r\n        manager = _manager;\r\n    }\r\n}\r\n"
    },
    "contracts/liquidators/OhLiquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport {ILiquidator} from \"../interfaces/ILiquidator.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Liquidator\r\n/// @notice Contract to manage standard token liquidations on Uniswap or Sushiswap\r\ncontract OhLiquidator is OhSubscriber, ILiquidator {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice mapping of source token to desired token to sushiswap liquidation route\r\n    mapping(address => mapping(address => address[])) public sushiswapRoutes;\r\n\r\n    /// @notice mapping of source token to desired token to uniswap liquidation route\r\n    mapping(address => mapping(address => address[])) public uniswapRoutes;\r\n\r\n    /// @notice mapping of source token to desired token to router used for liquidation\r\n    mapping(address => mapping(address => address)) public tokenSwapRouter;\r\n\r\n    /// @notice address of Sushiswap RouterV2\r\n    address public override sushiswapRouter;\r\n\r\n    /// @notice address of Uniswap RouterV2\r\n    address public override uniswapRouter;\r\n\r\n    /// @notice address of WETH\r\n    address public override weth;\r\n\r\n    /// @notice Initialize the Liquidator with Uniswap and Sushiswap V2 Router Addresses\r\n    /// @param _registry The address of the Registry\r\n    /// @param _uniswapRouter The address of the Uniswap RouterV2\r\n    /// @param _sushiswapRouter The address of the Sushiswap RouterV2\r\n    /// @dev Internally sets WETH address from Uniswap Router\r\n    constructor(\r\n        address _registry,\r\n        address _uniswapRouter,\r\n        address _sushiswapRouter\r\n    ) OhSubscriber(_registry) {\r\n        sushiswapRouter = _sushiswapRouter;\r\n        uniswapRouter = _uniswapRouter;\r\n        weth = IUniswapV2Router02(_uniswapRouter).WETH();\r\n    }\r\n\r\n    /// @notice Liquidate an amount of 'from' tokens to 'to' tokens from this address\r\n    /// @dev Send proceeds to the caller, `msg.sender` will typically be a Strategy\r\n    /// @param recipient The recipient of the swap\r\n    /// @param from The token we have\r\n    /// @param to The token we want to swap to\r\n    /// @param amount The amount of 'from' tokens to swap\r\n    /// @param minOut The minimum output amount accepted\r\n    /// @return The amount of 'to' tokens received\r\n    function liquidate(\r\n        address recipient,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minOut\r\n    ) external override returns (uint256) {\r\n        // get the router address and swap path\r\n        address router = tokenSwapRouter[from][to];\r\n        address[] memory path = router == uniswapRouter ? uniswapRoutes[from][to] : sushiswapRoutes[from][to];\r\n\r\n        // increase allowance and swap\r\n        IERC20(from).safeIncreaseAllowance(router, amount);\r\n        uint256[] memory output = IUniswapV2Router02(router).swapExactTokensForTokens(amount, minOut, path, recipient, block.timestamp);\r\n\r\n        // return amount received\r\n        return output[path.length - 1];\r\n    }\r\n\r\n    /// @notice Set liquidation route for a token pair on Uniswap\r\n    /// @param from The token that we have\r\n    /// @param to The token that we want\r\n    /// @param path The swap path used to get the desired token\r\n    function setUniswapRoutes(\r\n        address from,\r\n        address to,\r\n        address[] memory path\r\n    ) external onlyGovernance {\r\n        uint256 length = path.length;\r\n\r\n        require(from == path[0], \"Liquidator: Invalid From\");\r\n        require(to == path[length - 1], \"Liquidator: Invalid To\");\r\n\r\n        uniswapRoutes[from][to] = path;\r\n        tokenSwapRouter[from][to] = uniswapRouter;\r\n    }\r\n\r\n    /// @notice Set liquidation route for a token pair on Sushiswap\r\n    /// @param from The token that we have\r\n    /// @param to The token that we want\r\n    /// @param path The swap path used to get the desired token\r\n    function setSushiswapRoutes(\r\n        address from,\r\n        address to,\r\n        address[] memory path\r\n    ) external onlyGovernance {\r\n        uint256 length = path.length;\r\n\r\n        require(from == path[0], \"SetSushiRoutes: Invalid From\");\r\n        require(to == path[length - 1], \"SetSushiRoutes: Invalid To\");\r\n\r\n        sushiswapRoutes[from][to] = path;\r\n        tokenSwapRouter[from][to] = sushiswapRouter;\r\n    }\r\n\r\n    /// @notice Get the router and swap path for a token pair\r\n    /// @param from The token that we have\r\n    /// @param to The token that we want\r\n    function getSwapInfo(address from, address to) external view override returns (address router, address[] memory path) {\r\n        if (tokenSwapRouter[from][to] == uniswapRouter) {\r\n            router = uniswapRouter;\r\n            path = uniswapRoutes[from][to];\r\n        } else if (tokenSwapRouter[from][to] == sushiswapRouter) {\r\n            router = sushiswapRouter;\r\n            path = sushiswapRoutes[from][to];\r\n        }\r\n    }\r\n}\r\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/manager/OhManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {ILiquidator} from \"../interfaces/ILiquidator.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {IToken} from \"../interfaces/IToken.sol\";\r\nimport {TransferHelper} from \"../libraries/TransferHelper.sol\";\r\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Manager\r\n/// @notice The Manager contains references to all active banks, strategies, and liquidation contracts.\r\n/// @dev This contract is used as the main control point for executing strategies\r\ncontract OhManager is OhSubscriber, IManager {\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Denominator for calculating protocol fees\r\n    uint256 public constant FEE_DENOMINATOR = 1000;\r\n\r\n    /// @notice Maximum buyback fee, 50%\r\n    uint256 public constant MAX_BUYBACK_FEE = 500;\r\n\r\n    /// @notice Minimum buyback fee, 10%\r\n    uint256 public constant MIN_BUYBACK_FEE = 100;\r\n\r\n    /// @notice Maximum management fee, 10%\r\n    uint256 public constant MAX_MANAGEMENT_FEE = 100;\r\n\r\n    /// @notice Minimum management fee, 0%\r\n    uint256 public constant MIN_MANAGEMENT_FEE = 0;\r\n\r\n    /// @notice The address of the Oh! Finance Token\r\n    address public override token;\r\n\r\n    /// @notice The amount of profits reserved for protocol buybacks, base 1000\r\n    uint256 public override buybackFee;\r\n\r\n    /// @notice The amount of profits reserved for fund management, base 1000\r\n    uint256 public override managementFee;\r\n\r\n    /// @notice The mapping of `from` token to `to` token to liquidator contract\r\n    mapping(address => mapping(address => address)) public override liquidators;\r\n\r\n    /// @notice The mapping of contracts that are whitelisted for Bank use/management\r\n    mapping(address => bool) public override whitelisted;\r\n\r\n    /// @dev The set of Banks approved for investing\r\n    EnumerableSet.AddressSet internal _banks;\r\n\r\n    /// @dev The mapping of Banks to active Strategies\r\n    mapping(address => EnumerableSet.AddressSet) internal _strategies;\r\n\r\n    /// @dev The mapping of Banks to next Strategy index it will deposit to\r\n    mapping(address => uint8) internal _depositQueue;\r\n\r\n    /// @dev The mapping of Banks to next Strategy index it will withdraw from\r\n    mapping(address => uint8) internal _withdrawQueue;\r\n\r\n    /// @dev The mapping of Banks to delay status\r\n    mapping(address => uint256) public delays;\r\n\r\n    /// @notice Emitted when a Bank's capital is rebalanced\r\n    event Rebalance(address indexed bank);\r\n\r\n    /// @notice Emitted when a Bank's capital is invested in a single Strategy \r\n    event Finance(address indexed bank, address indexed strategy);\r\n\r\n    /// @notice Emitted when a Bank's capital is invested in all Strategies\r\n    event FinanceAll(address indexed bank);\r\n\r\n    /// @notice Emitted when a buyback is performed with an amount of from tokens\r\n    event Buyback(address indexed from, uint256 amount, uint256 buybackAmount);\r\n\r\n    /// @notice Emitted when a Bank realizes profit via liquidation \r\n    event AccrueRevenue(\r\n        address indexed bank,\r\n        address indexed strategy,\r\n        uint256 profitAmount,\r\n        uint256 buybackAmount,\r\n        uint256 managementAmount\r\n    );\r\n\r\n    /// @notice Only allow function calls if sender is an approved Bank\r\n    /// @param sender The address of the caller to validate\r\n    modifier onlyBank(address sender) {\r\n        require(_banks.contains(sender), \"Manager: Only Bank\");\r\n        _;\r\n    }\r\n    \r\n    /// @notice Only allow function calls if sender is an approved Strategy\r\n    /// @param bank The address of the Bank that uses the Strategy\r\n    /// @param sender The address of the caller to validate\r\n    modifier onlyStrategy(address bank, address sender) {\r\n        require(_strategies[bank].contains(sender), \"Manager: Only Strategy\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Only allow EOAs or Whitelisted contracts to interact\r\n    /// @dev Prevents sandwich / flash loan attacks & re-entrancy\r\n    modifier defense {\r\n        require(msg.sender == tx.origin || whitelisted[msg.sender], \"Manager: Only EOA or Whitelist\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Deploy the Manager with the Registry reference\r\n    /// @dev Sets initial buyback and management fee parameters\r\n    /// @param registry_ The address of the registry\r\n    /// @param token_ The address of the Oh! Token\r\n    constructor(address registry_, address token_) OhSubscriber(registry_) {\r\n        token = token_;\r\n        buybackFee = 200; // 20%\r\n        managementFee = 20; // 2%\r\n    }\r\n\r\n    /// @notice Get the Bank\r\n    function banks(uint256 i) external view override returns (address) {\r\n        return _banks.at(i);\r\n    }\r\n\r\n    function totalBanks() external view override returns (uint256) {\r\n        return _banks.length();\r\n    }\r\n\r\n    /// @notice Get the Strategy at a given index for a given Bank\r\n    /// @param bank The address of the Bank that contains the Strategy\r\n    /// @param i The Bank queue index to check\r\n    function strategies(address bank, uint256 i) external view override returns (address) {\r\n        return _strategies[bank].at(i);\r\n    }\r\n\r\n    /// @notice Get total number of strategies for a given bank\r\n    /// @param bank The Bank we are checking\r\n    /// @return Amount of active strategies\r\n    function totalStrategies(address bank) external view override returns (uint256) {\r\n        return _strategies[bank].length();\r\n    }\r\n\r\n    /// @notice Get the index of the Strategy to withdraw from for a given Bank\r\n    /// @param bank The Bank to check the next Strategy for\r\n    /// @return The index of the Strategy\r\n    function withdrawIndex(address bank) external view override returns (uint256) {\r\n        return _withdrawQueue[bank];\r\n    }\r\n\r\n    /// @notice Set the withdrawal index\r\n    /// @param i The \r\n    function setWithdrawIndex(uint256 i) external override onlyBank(msg.sender) {\r\n        _withdrawQueue[msg.sender] = uint8(i);\r\n    }\r\n\r\n    /// @notice Rebalance Bank exposure by withdrawing all, then evenly distributing underlying to all strategies\r\n    /// @param bank The bank to rebalance\r\n    function rebalance(address bank) external override defense onlyBank(bank) {\r\n        // Exit all strategies\r\n        uint256 length = _strategies[bank].length();\r\n        for (uint256 i; i < length; i++) {\r\n            IBank(bank).exitAll(_strategies[bank].at(i));\r\n        }\r\n\r\n        // Re-invest underlying evenly\r\n        uint256 toInvest = IBank(bank).underlyingBalance();\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 amount = toInvest / length;\r\n            IBank(bank).invest(_strategies[bank].at(i), amount);\r\n        }\r\n\r\n        emit Rebalance(bank);\r\n    }\r\n\r\n    /// @notice Finance the next Strategy in the Bank queue with all available underlying\r\n    /// @param bank The address of the Bank to finance\r\n    /// @dev Only allow this function to be called on approved Banks\r\n    function finance(address bank) external override defense onlyBank(bank) {\r\n        uint256 length = _strategies[bank].length();\r\n        require(length > 0, \"Manager: No Strategies\");\r\n        require(block.timestamp > delays[bank], \"Manager: Delay Not Satisfied\");\r\n\r\n        // get the next Strategy, reset if current index out of bounds\r\n        uint8 i;\r\n        uint8 queued = _depositQueue[bank];\r\n        if (queued < length) {\r\n            i = queued;\r\n        } else {\r\n            i = 0;\r\n        }\r\n        address strategy = _strategies[bank].at(i);\r\n\r\n        // finance the strategy, increment index and update delay (+24h)\r\n        IBank(bank).investAll(strategy);\r\n        _depositQueue[bank] = i + 1;\r\n        delays[bank] = block.timestamp + 86400;\r\n\r\n        emit Finance(bank, strategy);\r\n    }\r\n\r\n    /// @notice Evenly finance underlying to all strategies\r\n    /// @param bank The address of the Bank to finance\r\n    /// @dev Deposit queue not needed here as all Strategies are equally invested in\r\n    /// @dev Only allow this function to be called on approved Banks\r\n    function financeAll(address bank) external override defense onlyBank(bank) {\r\n        uint256 length = _strategies[bank].length();\r\n        require(length > 0, \"Manager: No Strategies\");\r\n        require(block.timestamp > delays[bank], \"Manager: Delay Not Satisfied\");\r\n\r\n        uint256 toInvest = IBank(bank).underlyingBalance();\r\n        for (uint256 i; i < length; i++) {\r\n            uint256 amount = toInvest / length;\r\n            IBank(bank).invest(_strategies[bank].at(i), amount);\r\n        }\r\n        delays[bank] = block.timestamp + 86400;\r\n\r\n        emit FinanceAll(bank);\r\n    }\r\n\r\n    /// @notice Perform a token buyback with accrued revenue\r\n    /// @dev Burns all proceeds\r\n    /// @param from The address of the token to liquidate for Oh! Tokens\r\n    function buyback(address from) external override defense {\r\n        // get token, liquidator, and liquidation amount\r\n        address _token = token;\r\n        address liquidator = liquidators[from][_token];\r\n        uint256 amount = IERC20(from).balanceOf(address(this));\r\n\r\n        // send to liquidator, buyback and burn\r\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\r\n        uint256 received = ILiquidator(liquidator).liquidate(address(this), from, _token, amount, 1);\r\n        IToken(_token).burn(received);\r\n\r\n        emit Buyback(from, amount, received);\r\n    }\r\n\r\n    /// @notice Accrue revenue from a Strategy\r\n    /// @dev Only callable by approved Strategies\r\n    /// @param bank The address of the Bank which uses the Strategy\r\n    /// @param amount The total amount of profit received from liquidation\r\n    function accrueRevenue(\r\n        address bank,\r\n        address underlying,\r\n        uint256 amount\r\n    ) external override onlyStrategy(bank, msg.sender) {\r\n        // calculate protocol and management fees, find remaining\r\n        uint256 fee = amount.mul(buybackFee).div(FEE_DENOMINATOR);\r\n        uint256 reward = amount.mul(managementFee).div(FEE_DENOMINATOR);\r\n        uint256 remaining = amount.sub(fee).sub(reward);\r\n\r\n        // send original function caller the management fee, transfer remaining to the Strategy\r\n        TransferHelper.safeTokenTransfer(tx.origin, underlying, reward);\r\n        TransferHelper.safeTokenTransfer(msg.sender, underlying, remaining);\r\n\r\n        emit AccrueRevenue(bank, msg.sender, remaining, fee, reward);\r\n    }\r\n\r\n    /// @notice Exit a given strategy for a given bank\r\n    /// @param bank The bank that will be used to exit the strategy\r\n    /// @param strategy The strategy to be exited\r\n    function exit(address bank, address strategy) public onlyGovernance {\r\n        IBank(bank).exitAll(strategy);\r\n    }\r\n\r\n    /// @notice Exit from all strategies for a given bank\r\n    /// @param bank The bank that will be used to exit the strategy\r\n    function exitAll(address bank) public override onlyGovernance {\r\n        uint256 length = _strategies[bank].length();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            IBank(bank).exitAll(_strategies[bank].at(i));\r\n        }\r\n    }\r\n\r\n    /// @notice Adds or removes a Bank for investment\r\n    /// @dev Only Governance can call this function\r\n    /// @param _bank the bank to be approved/unapproved\r\n    /// @param _approved the approval status of the bank\r\n    function setBank(address _bank, bool _approved) external onlyGovernance {\r\n        require(_bank.isContract(), \"Manager: Not Contract\");\r\n        bool approved = _banks.contains(_bank);\r\n        require(approved != _approved, \"Manager: No Change\");\r\n\r\n        // if Bank is already approved, withdraw all capital\r\n        if (approved) {\r\n            exitAll(_bank);\r\n            _banks.remove(_bank);\r\n        } else {\r\n            _banks.add(_bank);\r\n        }\r\n    }\r\n\r\n    /// @notice Adds or removes a Strategy for a given Bank\r\n    /// @param _bank the bank which uses the strategy\r\n    /// @param _strategy the strategy to be approved/unapproved\r\n    /// @param _approved the approval status of the Strategy\r\n    /// @dev Only Governance can call this function\r\n    function setStrategy(address _bank, address _strategy, bool _approved) external onlyGovernance {\r\n        require(_strategy.isContract() && _bank.isContract(), \"Manager: Not Contract\");\r\n        bool approved = _strategies[_bank].contains(_strategy);\r\n        require(approved != _approved, \"Manager: No Change\");\r\n\r\n        // if Strategy is already approved, withdraw all capital\r\n        if (approved) {\r\n            exit(_bank, _strategy);\r\n            _strategies[_bank].remove(_strategy);\r\n        } else {\r\n            _strategies[_bank].add(_strategy);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the Liquidator contract for a given token\r\n    /// @param _liquidator the liquidator contract\r\n    /// @param _from the token we have to liquidate\r\n    /// @param _to the token we want to receive\r\n    /// @dev Only Governance can call this function\r\n    function setLiquidator(\r\n        address _liquidator,\r\n        address _from,\r\n        address _to\r\n    ) external onlyGovernance {\r\n        require(_liquidator.isContract(), \"Manager: Not Contract\");\r\n        liquidators[_from][_to] = _liquidator;\r\n    }\r\n\r\n    /// @notice Whitelists strategy for Bank use/management\r\n    /// @param _contract the strategy contract\r\n    /// @param _whitelisted the whitelisted status of the strategy\r\n    /// @dev Only Governance can call this function\r\n    function setWhitelisted(address _contract, bool _whitelisted) external onlyGovernance {\r\n        require(_contract.isContract(), \"Registry: Not Contract\");\r\n        whitelisted[_contract] = _whitelisted;\r\n    }\r\n\r\n    /// @notice Sets the protocol buyback percentage (Profit Share)\r\n    /// @param _buybackFee The new buyback fee\r\n    /// @dev Only Governance; base 1000, 1% = 10\r\n    function setBuybackFee(uint256 _buybackFee) external onlyGovernance {\r\n        require(_buybackFee > MIN_BUYBACK_FEE, \"Registry: Invalid Buyback\");\r\n        require(_buybackFee < MAX_BUYBACK_FEE, \"Registry: Buyback Too High\");\r\n        buybackFee = _buybackFee;\r\n    }\r\n\r\n    /// @notice Sets the protocol management fee percentage\r\n    /// @param _managementFee The new management fee\r\n    /// @dev Only Governance; base 1000, 1% = 10\r\n    function setManagementFee(uint256 _managementFee) external onlyGovernance {\r\n        require(_managementFee > 0, \"Registry: Invalid Mgmt\");\r\n        require(_managementFee < 100, \"Registry: Mgmt Too High\");\r\n        managementFee = _managementFee;\r\n    }\r\n\r\n    function getNextStrategy(address bank) internal returns (address) {\r\n        \r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/OhToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IToken} from \"./interfaces/IToken.sol\";\r\nimport {OhSubscriber} from \"./registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Token\r\n/// @notice Protocol Governance and Profit-Share ERC-20 Token\r\ncontract OhToken is ERC20(\"Oh! Finance\", \"OH\"), OhSubscriber, IToken {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n    }\r\n\r\n    /// @notice The max token supply, minted on initialization. 100m tokens.\r\n    uint256 public constant MAX_SUPPLY = 100000000e18;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH =\r\n        keccak256(\"Delegation(address delegator,address delegatee,uint256 nonce,uint256 deadline)\");\r\n\r\n    /// @notice the EIP-712 typehash for approving token transfers via signature\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash used for replay protection, set at deployment\r\n    // solhint-disable-next-line\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    /// @notice Delegate votes from `msg.sender` to `delegatee`\r\n    mapping(address => address) public delegates;\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n    constructor(address registry_) OhSubscriber(registry_) {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), keccak256(bytes(\"1\")), getChainId(), address(this))\r\n        );\r\n\r\n        _mint(msg.sender, MAX_SUPPLY);\r\n    }\r\n\r\n    /// @notice Delegate votes from `msg.sender` to `delegatee`\r\n    /// @param delegatee The address to delegate votes to\r\n    function delegate(address delegatee) external override {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /// @notice Delegates votes from `delegator` to `delegatee`\r\n    /// @param delegator the address holding tokens\r\n    /// @param delegatee The address to delegate votes to\r\n    /// @param deadline The time at which to expire the signature\r\n    /// @param v The recovery byte of the signature\r\n    /// @param r Half of the ECDSA signature pair\r\n    /// @param s Half of the ECDSA signature pair\r\n    function delegateBySig(\r\n        address delegator,\r\n        address delegatee,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        // solhint-disable-next-line\r\n        require(block.timestamp <= deadline, \"Delegate: Invalid Expiration\");\r\n        require(delegator != address(0), \"Delegate: Invalid Delegator\");\r\n\r\n        uint256 currentValidNonce = nonces[delegator];\r\n        bytes32 digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(abi.encode(DELEGATION_TYPEHASH, delegator, delegatee, currentValidNonce, deadline))\r\n                )\r\n            );\r\n\r\n        require(delegator == ecrecover(digest, v, r, s), \"Delegate: Invalid Signature\");\r\n        nonces[delegator] = currentValidNonce.add(1);\r\n        return _delegate(delegator, delegatee);\r\n    }\r\n\r\n    /// @dev implements the permit function per EIP-712\r\n    /// @param owner the owner of the funds\r\n    /// @param spender the spender\r\n    /// @param value the amount\r\n    /// @param deadline the deadline timestamp, type(uint256).max for max deadline\r\n    /// @param v the recovery byte of the signature\r\n    /// @param r half of the ECDSA signature pair\r\n    /// @param s half of the ECDSA signature pair\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external override {\r\n        require(block.timestamp <= deadline, \"Permit: Invalid Deadline\");\r\n        require(owner != address(0), \"Permit: Invalid Owner\");\r\n\r\n        uint256 currentValidNonce = nonces[owner];\r\n        bytes32 digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\r\n                )\r\n            );\r\n\r\n        require(owner == ecrecover(digest, v, r, s), \"Permit: Invalid Signature\");\r\n        nonces[owner] = currentValidNonce.add(1);\r\n        return _approve(owner, spender, value);\r\n    }\r\n\r\n    /// @notice Gets the current votes balance for `account`\r\n    /// @param account The address to get votes balance\r\n    /// @return The number of current votes for `account`\r\n    function getCurrentVotes(address account) external view override returns (uint256) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /// @notice Determine the prior number of votes for an account as of a block number\r\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n    /// @param account The address of the account to check\r\n    /// @param blockNumber The block number to get the vote balance at\r\n    /// @return The number of votes the account had as of the given block\r\n    function getPriorVotes(address account, uint256 blockNumber) external view override returns (uint256) {\r\n        require(blockNumber < block.number, \"GetPriorVotes: Invalid Block\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    /// @notice Destroys an amount of tokens from the caller\r\n    /// @param amount The amount of tokens to burn\r\n    function burn(uint256 amount) public override {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Creates an amount of tokens on a recipient address\r\n    /// @param recipient The receiver of the tokens\r\n    /// @param amount The amount of tokens to mint\r\n    /// @dev callable by governance only\r\n    function mint(address recipient, uint256 amount) public override onlyGovernance {\r\n        _mint(recipient, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal override {\r\n        super._burn(from, amount);\r\n        _moveDelegates(delegates[from], address(0), amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal override {\r\n        require(totalSupply().add(amount) <= MAX_SUPPLY, \"Token: Max Supply Exceeded\");\r\n        super._mint(to, amount);\r\n        _moveDelegates(address(0), delegates[to], amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        super._transfer(from, to, amount);\r\n        _moveDelegates(delegates[from], delegates[to], amount);\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying CAKEs (not scaled);\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    // move an amount of delegates from srcRep to dstRep\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint256 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                // decrease old representative\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld.sub(amount);\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                // increase new representative\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint256 oldVotes,\r\n        uint256 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = uint32(block.number);\r\n\r\n        // if the user has already been delegated to this block, update vote count\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            // else write a new checkpoint with updated vote count\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256 chainId) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "contracts/OhPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IPool} from \"./interfaces/IPool.sol\";\r\nimport {OhSubscriber} from \"./registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Pool\r\n/// @notice Protocol Incentive Staking/Distribution Contract\r\ncontract OhPool is IPool, OhSubscriber {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accTokenPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accTokenPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 accTokenPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\r\n        uint256 lastRewardBlock; // Last block number that SUSHIs distribution occurs.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. SUSHIs to distribute per block.\r\n    }\r\n\r\n    // The Oh TOKEN!\r\n    IERC20 public token;\r\n    // OH tokens created per block.\r\n    uint256 public tokenPerBlock;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    //\r\n    IERC20[] public lpTokens;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n    // The block number when SUSHI mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor(\r\n        address registry_,\r\n        IERC20 _token,\r\n        uint256 _tokenPerBlock,\r\n        uint256 _startBlock\r\n    ) OhSubscriber(registry_) {\r\n        token = _token;\r\n        tokenPerBlock = _tokenPerBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken) public onlyGovernance {\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(\r\n            PoolInfo({\r\n                allocPoint: _allocPoint,\r\n                lastRewardBlock: lastRewardBlock,\r\n                accTokenPerShare: 0\r\n            })\r\n        );\r\n\r\n        lpTokens.push(_lpToken);\r\n    }\r\n\r\n    /// @notice Update the given pool's SUSHI allocation point contract. Can only be called by the owner.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New AP of the pool.\r\n    function set(uint256 _pid, uint256 _allocPoint) public onlyGovernance {\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        // emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);\r\n    }\r\n\r\n    /// @notice View function to see pending SUSHI on frontend.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _user Address of user.\r\n    /// @return pending SUSHI reward for a given user.\r\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256 pending) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accTokenPerShare = pool.accTokenPerShare;\r\n        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n            uint256 sushiReward = blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\r\n            accTokenPerShare = accTokenPerShare.add(sushiReward.mul(1e12) / lpSupply);\r\n        }\r\n        pending = user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\r\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\r\n    function massUpdatePools(uint256[] calldata pids) external {\r\n        uint256 len = pids.length;\r\n        for (uint256 i = 0; i < len; ++i) {\r\n            updatePool(pids[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Update reward variables of the given pool.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\r\n        pool = poolInfo[pid];\r\n        if (block.number > pool.lastRewardBlock) {\r\n            uint256 lpSupply = lpTokens[pid].balanceOf(address(this));\r\n            if (lpSupply > 0) {\r\n                uint256 blocks = block.number.sub(pool.lastRewardBlock);\r\n                uint256 tokenReward =\r\n                    blocks.mul(tokenPerBlock).mul(pool.allocPoint) / totalAllocPoint;\r\n                pool.accTokenPerShare = pool.accTokenPerShare.add(\r\n                    (tokenReward.mul(1e12).div(lpSupply))\r\n                );\r\n            }\r\n            pool.lastRewardBlock = block.number;\r\n            poolInfo[pid] = pool;\r\n            // emit LogUpdatePool(pid, pool.lastRewardBlock, lpSupply, pool.accTokenPerShare);\r\n        }\r\n    }\r\n\r\n    /// @notice Deposit LP tokens to MCV2 for SUSHI allocation.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to deposit.\r\n    /// @param to The receiver of `amount` deposit benefit.\r\n    function deposit(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][to];\r\n\r\n        // Effects\r\n        user.amount = user.amount.add(amount);\r\n        user.rewardDebt = user.rewardDebt.add(amount.mul(pool.accTokenPerShare).div(1e12));\r\n\r\n        // Interactions\r\n        lpTokens[pid].safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // emit Deposit(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from MCV2.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to withdraw.\r\n    /// @param to Receiver of the LP tokens.\r\n    function withdraw(\r\n        uint256 pid,\r\n        uint256 amount,\r\n        address to\r\n    ) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n\r\n        // Effects\r\n        user.rewardDebt = user.rewardDebt.sub(amount.mul(pool.accTokenPerShare).div(1e12));\r\n        user.amount = user.amount.sub(amount);\r\n\r\n        // Interactions\r\n        lpTokens[pid].safeTransfer(to, amount);\r\n\r\n        // emit Withdraw(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of SUSHI rewards.\r\n    /// @return success Returns bool indicating success of rewarder delegate call.\r\n    function harvest(uint256 pid, address to) public returns (bool success) {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 _pendingRewards =\r\n            user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (_pendingRewards == 0) {\r\n            success = false;\r\n        }\r\n\r\n        // Effects\r\n        user.rewardDebt = _pendingRewards;\r\n\r\n        // Interactions\r\n        safeTokenTransfer(to, _pendingRewards);\r\n\r\n        // emit Harvest(msg.sender, pid, _pendingSushi);\r\n    }\r\n\r\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of the LP tokens.\r\n    function emergencyWithdraw(uint256 pid, address to) public {\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        // Note: transfer can fail or succeed if `amount` is zero.\r\n        lpTokens[pid].safeTransfer(to, amount);\r\n        // emit EmergencyWithdraw(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    function safeTokenTransfer(address to, uint256 amount) internal {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (amount > balance) {\r\n            token.safeTransfer(to, balance);\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IPool {\r\n    // function calculateRewards() external;\r\n    // function deposit(uint256 amount) external;\r\n    // function withdraw(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/OhFarmer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {Ownable} from \"./libraries/access/Ownable.sol\";\r\nimport {OhToken} from \"./OhToken.sol\";\r\n\r\n/// @title Oh! Finance Token\r\n/// @notice Protocol Governance and Profit-Share ERC-20 Token\r\ncontract OhFarmer is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;     // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        //\r\n        //   pending reward = (user.amount * pool.accOHPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accOHPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. OHs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that OHs distribution occurs.\r\n        uint256 accOhPerShare; // Accumulated OHs per share, times 1e12. See below.\r\n    }\r\n\r\n    // OH TOKEN\r\n    OhToken public OH;\r\n    // Block number when bonus OH period ends.\r\n    uint256 public bonusEndBlock;\r\n    // OH tokens created per block.\r\n    uint256 public ohPerBlock;\r\n    // Bonus muliplier for early OH makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 10;\r\n    // // The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    // IMigratorChef public migrator;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when OH mining starts.\r\n    uint256 public startBlock;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed _pid, uint256 amount);\r\n\r\n    constructor(\r\n        OhToken _OH,\r\n        uint256 _ohPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) public {\r\n        OH = _OH;\r\n        ohPerBlock = _ohPerBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            \r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accOhPerShare: 0\r\n        }));\r\n    }\r\n\r\n    // Update the given pool's OH allocation point. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 ohReward = multiplier.mul(ohPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        OH.mint(address(this), ohReward);\r\n        pool.accOhPerShare = pool.accOhPerShare.add(ohReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Safe OH transfer function, just in case if rounding error causes pool to not have enough OHs.\r\n    function safeOhTransfer(address _to, uint256 _amount) internal {\r\n        uint256 OHBal = OH.balanceOf(address(this));\r\n        if (_amount > OHBal) {\r\n            OH.transfer(_to, OHBal);\r\n        } else {\r\n            OH.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n        // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else {\r\n            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\r\n                _to.sub(bonusEndBlock)\r\n            );\r\n        }\r\n    }\r\n\r\n    // Stake OH tokens\r\n    function enterStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        updatePool(0);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accOhPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeOhTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accOhPerShare).div(1e12);\r\n\r\n        emit Deposit(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Unstake OH tokens.\r\n    function exitStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: amount too large\");\r\n        updatePool(0);\r\n        uint256 pending = user.amount.mul(pool.accOhPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeOhTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accOhPerShare).div(1e12);\r\n\r\n        emit Withdraw(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Deposit LP tokens to OhFarmer for OH allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        require (_pid != 0, 'deposit OH by staking');\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accOhPerShare).div(1e12).sub(user.rewardDebt);\r\n            safeOhTransfer(msg.sender, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accOhPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from OhFarmer.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        require (_pid != 0, 'withdraw OH by unstaking');\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: amount too large\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accOhPerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            safeOhTransfer(msg.sender, pending);\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accOhPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n}"
    },
    "contracts/libraries/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n   \r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\nimport './Context.sol';\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"
    },
    "contracts/libraries/access/Context.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "contracts/governance/OhGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IBank} from \"../interfaces/bank/IBank.sol\";\r\nimport {IGovernor} from \"../interfaces/IGovernor.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\r\n\r\n/// @title Oh! Finance Governor\r\n/// @notice Executor Contract that queues up and executes on-chain transactions to modify the protocol\r\n/// @notice Queued actions must come from a successful proposal\r\n/// @dev Proposer-Executor Relationship\r\n/// @dev Transactions can be executed after the `delay` has passed\r\ncontract OhGovernor is OhSubscriber, IGovernor {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice\r\n    uint256 public constant override GRACE_PERIOD = 14 days;\r\n\r\n    /// @notice Minimum time period transactions must be queued for\r\n    uint256 public constant MINIMUM_DELAY = 2 days;\r\n\r\n    /// @notice Maximum time period transactions can be queued for\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n\r\n    /// @notice The Governor admin\r\n    address public admin;\r\n\r\n    /// @notice The Governor admin pending acceptance\r\n    address public pendingAdmin;\r\n\r\n    /// @notice Time delay before queued transactions can be executed\r\n    uint256 public override delay;\r\n\r\n    /// @notice Transaction Queue of all successfull proposal actions\r\n    mapping(bytes32 => bool) public override queuedTransactions;\r\n\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Governor: Only Admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySelf {\r\n        require(msg.sender == address(this), \"Governor: Only Self\");\r\n        _;\r\n    }\r\n\r\n    constructor(address registry_, address admin_, uint256 delay_) OhSubscriber(registry_) {\r\n        require(delay_ >= MINIMUM_DELAY, \"Governor: Delay Too Low\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Governor: Delay Too High\");\r\n\r\n        admin = admin_;\r\n        delay = delay_;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function acceptAdmin() external override {\r\n        require(msg.sender == pendingAdmin, \"Governor: Only Pending Admin\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address pendingAdmin_) external onlySelf {\r\n        pendingAdmin = pendingAdmin_;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function setDelay(uint256 delay_) external onlySelf {\r\n        require(delay_ >= MINIMUM_DELAY, \"Governor: Delay Too Low\");\r\n        require(delay_ <= MAXIMUM_DELAY, \"Governor: Delay Too High\");\r\n        delay = delay_;\r\n\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) external override onlyAdmin {\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) external payable override onlyAdmin returns (bytes memory) {\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n\r\n        require(queuedTransactions[txHash], \"Governor: Transaction Not Queued\");\r\n        require(getBlockTimestamp() >= eta, \"Governor: Transaction Expired\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Governor: Transaction Stale\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        // require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n        bytes memory returnData = target.functionCallWithValue(callData, value);\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n        return returnData;\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) external override onlyAdmin returns (bytes32) {\r\n        require(eta >= getBlockTimestamp().add(delay), \"Governor: ETA Too Short\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function executeEmergencyPause(address bank) external override onlyAdmin {\r\n        IManager(manager()).exitAll(bank);\r\n        IBank(bank).pause();\r\n    }\r\n\r\n    function executePause(address bank) external override onlyAdmin {\r\n        IBank(bank).pause();\r\n    }\r\n\r\n    function executeUnpause(address bank) external override onlyAdmin {\r\n        IBank(bank).unpause();\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IGovernor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\ninterface IGovernor {\r\n    function delay() external view returns (uint256);\r\n\r\n    function GRACE_PERIOD() external view returns (uint256);\r\n\r\n    function acceptAdmin() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint256 eta\r\n    ) external payable returns (bytes memory);\r\n\r\n    function executeEmergencyPause(address bank) external;\r\n\r\n    function executePause(address bank) external;\r\n\r\n    function executeUnpause(address bank) external;\r\n}\r\n"
    },
    "contracts/governance/OhForum.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport {IForum} from \"../interfaces/IForum.sol\";\r\nimport {IGovernor} from \"../interfaces/IGovernor.sol\";\r\nimport {IManager} from \"../interfaces/IManager.sol\";\r\nimport {IRegistry} from \"../interfaces/IRegistry.sol\";\r\nimport {IToken} from \"../interfaces/IToken.sol\";\r\nimport {OhSubscriber} from \"../registry/OhSubscriber.sol\";\r\nimport {OhForumTypes} from \"./OhForumTypes.sol\";\r\n\r\n/// @title Oh! Finance Forum\r\n/// @notice Manages Protocol proposals and voting receipts to send to the Governor\r\n/// @dev Proposer-Executor Relationship to execute protocol changes\r\ncontract OhForum is OhSubscriber, OhForumTypes, IForum {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Contract Name\r\n    string public constant name = \"Oh! Forum\";\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    uint256 public constant MAX_OPERATIONS = 10;\r\n\r\n    /// @notice The minimum setable proposal threshold\r\n    uint256 public constant MIN_PROPOSAL_THRESHOLD = 500000e18; // 500,000 = 0.5%\r\n\r\n    /// @notice The maximum setable proposal threshold\r\n    uint256 public constant MAX_PROPOSAL_THRESHOLD = 5000000e18; // 5,000,000 = 5%\r\n\r\n    /// @notice The minimum setable voting period\r\n    uint256 public constant MIN_VOTING_PERIOD = 5760; // About 24 hours\r\n\r\n    /// @notice The max setable voting period\r\n    uint256 public constant MAX_VOTING_PERIOD = 80640; // About 2 weeks\r\n\r\n    /// @notice The min setable voting delay\r\n    uint256 public constant MIN_VOTING_DELAY = 1;\r\n\r\n    /// @notice The max setable voting delay\r\n    uint256 public constant MAX_VOTING_DELAY = 40320; // About 1 week\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    uint256 public constant QUORUM_VOTES = 4000000e18; // 4,000,000 = 4%\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    /// @notice The address of Oh! Finance Protocol Guardian\r\n    address public guardian;\r\n\r\n    /// @notice The address of the Oh! Finance Token\r\n    address public token;\r\n\r\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\r\n    uint256 public votingDelay;\r\n\r\n    /// @notice The duration of voting on a proposal, in blocks\r\n    uint256 public votingPeriod;\r\n\r\n    /// @notice The number of votes required in order for a voter to become a proposer\r\n    uint256 public proposalThreshold;\r\n\r\n    /// @notice The total number of proposals\r\n    uint256 public proposalCount;\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint256 => Proposal) public proposals;\r\n\r\n    /// @notice Mapping of proposal to receipts of ballots for the entire set of voters\r\n    mapping(uint256 => mapping(address => Receipt)) public receipts;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping(address => uint256) public latestProposalIds;\r\n\r\n    /// @notice An event emitted when a new proposal is created\r\n    event ProposalAdded(\r\n        uint256 id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint256[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint256 startBlock,\r\n        uint256 endBlock,\r\n        string description\r\n    );\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCancelled(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint256 id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\r\n\r\n    /// @notice Only allow guardian to execute function\r\n    modifier onlyGuardian {\r\n        require(msg.sender == guardian, \"Forum: Only Guardian\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address registry_,\r\n        address _token,\r\n        uint256 _votingDelay,\r\n        uint256 _votingPeriod,\r\n        uint256 _proposalThreshold\r\n    ) OhSubscriber(registry_) {\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(\"1\")), getChainId(), address(this))\r\n        );\r\n\r\n        guardian = msg.sender;\r\n        token = _token;\r\n        votingDelay = _votingDelay;\r\n        votingPeriod = _votingPeriod;\r\n        proposalThreshold = _proposalThreshold;\r\n    }\r\n\r\n    /// @notice Cast a vote for a given Proposal\r\n    /// @param proposalId The id of the Proposal to vote on\r\n    /// @param support The boolean representing whether the user supports or rejects the Proposal\r\n    function castVote(uint256 proposalId, bool support) external {\r\n        return _castVote(msg.sender, proposalId, support);\r\n    }\r\n\r\n    function castVoteBySig(\r\n        uint256 proposalId,\r\n        bool support,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        bytes32 digest =\r\n            keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))));\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"Forum: Invalid Signature\");\r\n        return _castVote(signatory, proposalId, support);\r\n    }\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint256[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) external returns (uint256) {\r\n        require(IToken(token).getPriorVotes(msg.sender, block.number.sub(1)) > proposalThreshold, \"Forum: Votes Below Threshold\");\r\n        require(\r\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\r\n            \"Forum: Arity Mismatch\"\r\n        );\r\n        require(targets.length != 0, \"Forum: No Actions\");\r\n        require(targets.length <= MAX_OPERATIONS, \"Forum: Too Many Actions\");\r\n\r\n        uint256 latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n            ProposalState latestProposalState = state(latestProposalId);\r\n            require(latestProposalState != ProposalState.Active, \"Forum: Proposal Already Active\");\r\n            require(latestProposalState != ProposalState.Pending, \"Forum: Proposal Already Pending\");\r\n        }\r\n\r\n        uint256 startBlock = block.number.add(votingDelay);\r\n        uint256 endBlock = startBlock.add(votingPeriod);\r\n\r\n        proposalCount++;\r\n        Proposal memory newProposal =\r\n            Proposal({\r\n                id: proposalCount,\r\n                proposer: msg.sender,\r\n                eta: 0,\r\n                targets: targets,\r\n                values: values,\r\n                signatures: signatures,\r\n                calldatas: calldatas,\r\n                startBlock: startBlock,\r\n                endBlock: endBlock,\r\n                forVotes: 0,\r\n                againstVotes: 0,\r\n                cancelled: false,\r\n                executed: false\r\n            });\r\n\r\n        proposals[newProposal.id] = newProposal;\r\n        latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n        emit ProposalAdded(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\r\n        return newProposal.id;\r\n    }\r\n\r\n    function queue(uint256 proposalId) external {\r\n        require(state(proposalId) == ProposalState.Succeeded, \"Forum: Only Successful Proposals\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint256 eta = block.timestamp.add(IGovernor(governance()).delay());\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function execute(uint256 proposalId) external payable {\r\n        require(state(proposalId) == ProposalState.Queued, \"Forum: Must Be Queued\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            IGovernor(governance()).executeTransaction{value: proposal.values[i]}(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function cancel(uint256 proposalId) external {\r\n        require(state(proposalId) != ProposalState.Executed, \"Forum: Proposal Already Executed\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(\r\n            msg.sender == guardian ||\r\n                msg.sender == proposal.proposer ||\r\n                IToken(token).getPriorVotes(proposal.proposer, block.number.sub(1)) < proposalThreshold,\r\n            \"Forum: Valid Proposer\"\r\n        );\r\n\r\n        proposal.cancelled = true;\r\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n            IGovernor(governance()).cancelTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalCancelled(proposalId);\r\n    }\r\n\r\n    function setProposalThreshold(uint256 _proposalThreshold) external onlyGovernance {\r\n        require(_proposalThreshold >= MIN_PROPOSAL_THRESHOLD, \"Forum: Threshold Too Low\");\r\n        require(_proposalThreshold <= MAX_PROPOSAL_THRESHOLD, \"Forum: Threshold Too High\");\r\n        proposalThreshold = _proposalThreshold;\r\n    }\r\n\r\n    function setVotingDelay(uint256 _votingDelay) external onlyGovernance {\r\n        require(_votingDelay >= MIN_VOTING_DELAY, \"Forum: Delay Too Low\");\r\n        require(_votingDelay <= MAX_VOTING_DELAY, \"Forum: Delay Too High\");\r\n        votingDelay = _votingDelay;\r\n    }\r\n\r\n    function setVotingPeriod(uint256 _votingPeriod) external onlyGovernance {\r\n        require(_votingPeriod >= MIN_VOTING_PERIOD, \"Forum: Period Too Low\");\r\n        require(_votingPeriod <= MAX_VOTING_PERIOD, \"Forum: Period Too High\");\r\n        votingPeriod = _votingPeriod;\r\n    }\r\n\r\n    function emergencyPause(address bank) external onlyGuardian {\r\n        IGovernor(governance()).executeEmergencyPause(bank);\r\n    }\r\n\r\n    function emergencyPauseAll() external onlyGuardian {\r\n        address manager = manager();\r\n        address governance = governance();\r\n\r\n        uint256 length = IManager(manager).totalBanks();\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address bank = IManager(manager).banks(i);\r\n            IGovernor(governance).executeEmergencyPause(bank);\r\n        }\r\n    }\r\n\r\n    function pause(address bank) external onlyGuardian {\r\n        IGovernor(governance()).executePause(bank);\r\n    }\r\n\r\n    function unpause(address bank) external onlyGuardian {\r\n        IGovernor(governance()).executeUnpause(bank);\r\n    }\r\n\r\n    /// @notice Allow Guardian to accept admin rights after setting pending admin\r\n    function acceptAdmin() external onlyGuardian {\r\n        IGovernor(governance()).acceptAdmin();\r\n    }\r\n\r\n    /// @notice Abdicate Guardian rights when protocol has suffiently matured\r\n    function abdicate() external onlyGuardian {\r\n        guardian = address(0);\r\n    }\r\n\r\n    /// @notice Allow Guardian to queue transaction to accept admin rights with delay\r\n    function queueSetGovernorPendingAdmin(address newPendingAdmin, uint256 eta) external onlyGuardian {\r\n        IGovernor(governance()).queueTransaction(governance(), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    /// @notice Allow Guardian to set the pending admin once delay has expired\r\n    function executeSetGovernorPendingAdmin(address newPendingAdmin, uint256 eta) external onlyGuardian {\r\n        IGovernor(governance()).executeTransaction(governance(), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\r\n    }\r\n\r\n    /// @notice Get the actions for a given Proposal\r\n    /// @param proposalId The id of the Proposal to get actions from\r\n    function getActions(uint256 proposalId)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory targets,\r\n            uint256[] memory values,\r\n            string[] memory signatures,\r\n            bytes[] memory calldatas\r\n        )\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    /// @notice Get the voting receipt for a given Voter for a given Proposal\r\n    /// @param proposalId The id of the Proposal to get the Receipt from\r\n    /// @param voter The address of the Voter to check\r\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory) {\r\n        return receipts[proposalId][voter];\r\n    }\r\n\r\n    /// @notice Get the current state of a given Proposal\r\n    /// @param proposalId The id of the Proposal to check\r\n    function state(uint256 proposalId) public view returns (ProposalState) {\r\n        require(proposalCount >= proposalId && proposalId > 0, \"Forum: Invalid Proposal ID\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.cancelled) {\r\n            return ProposalState.Cancelled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < QUORUM_VOTES) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (block.timestamp >= proposal.eta.add(IGovernor(governance()).GRACE_PERIOD())) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    function _castVote(\r\n        address voter,\r\n        uint256 proposalId,\r\n        bool support\r\n    ) internal {\r\n        require(state(proposalId) == ProposalState.Active, \"Forum: Proposal Inactive\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = receipts[proposalId][voter];\r\n        require(receipt.hasVoted == false, \"Forum: Already Voted\");\r\n\r\n        uint256 votes = IToken(token).getPriorVotes(voter, proposal.startBlock);\r\n        if (support) {\r\n            proposal.forVotes = proposal.forVotes.add(votes);\r\n        } else {\r\n            proposal.againstVotes = proposal.againstVotes.add(votes);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        emit VoteCast(voter, proposalId, support, votes);\r\n    }\r\n\r\n    function _queueOrRevert(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) internal {\r\n        require(\r\n            !IGovernor(governance()).queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\r\n            \"Forum: Proposal Already Queued\"\r\n        );\r\n        IGovernor(governance()).queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256 chainId) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IForum.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\r\n\r\ninterface IForum {\r\n}\r\n"
    },
    "contracts/governance/OhForumTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nabstract contract OhForumTypes {\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {Pending, Active, Cancelled, Defeated, Succeeded, Queued, Expired, Executed}\r\n\r\n    /// @notice Proposal object used to execute a series of instructions\r\n    struct Proposal {\r\n        // Unique id for looking up a proposal\r\n        uint256 id;\r\n        // Creator of the proposal\r\n        address proposer;\r\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint256 eta;\r\n        // the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint256[] values;\r\n        // The ordered list of function signatures to be called\r\n        string[] signatures;\r\n        // The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n        // The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint256 startBlock;\r\n        // The block at which voting ends: votes must be cast prior to this block\r\n        uint256 endBlock;\r\n        // Current number of votes in favor of this proposal\r\n        uint256 forVotes;\r\n        // Current number of votes in opposition to this proposal\r\n        uint256 againstVotes;\r\n        // Flag marking whether the proposal has been canceled\r\n        bool cancelled;\r\n        // Flag marking whether the proposal has been executed\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        // Whether or not a vote has been cast\r\n        bool hasVoted;\r\n        // Whether or not the voter supports the proposal\r\n        bool support;\r\n        // The number of votes the voter had, which were cast\r\n        uint256 votes;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}