{
  "address": "0xf8C99aF1169023Ab0CB35D1510Be0f3Cd3789949",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "getSwapInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOut",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "setSushiswapRoutes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "setUniswapRoutes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sushiswapRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uniswapRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf581abdb856cd79f6ca2d8e299b31ea6f9964c45b181e0577111f6b1b58da6fd",
  "receipt": {
    "to": null,
    "from": "0x123456D302B690f8525B4BAC5681101d706e850e",
    "contractAddress": "0xf8C99aF1169023Ab0CB35D1510Be0f3Cd3789949",
    "transactionIndex": 59,
    "gasUsed": "1269668",
    "logsBloom": "0x
    "blockHash": "0xfaa7b40e5571f63e8d7c23a4fec375512205f16a81a23df56adb29419857e77b",
    "transactionHash": "0xf581abdb856cd79f6ca2d8e299b31ea6f9964c45b181e0577111f6b1b58da6fd",
    "logs": [],
    "blockNumber": 9429099,
    "cumulativeGasUsed": "12322715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2bA8E99Fedc439da742F023D43b224E3d28eDf5e",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506"
  ],
  "solcInputHash": "c029f0aa65e9de4be775e65679cfa07f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getSwapInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setSushiswapRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setUniswapRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sushiswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Internally sets WETH address from Uniswap Router\",\"params\":{\"_registry\":\"The address of the Registry\",\"_sushiswapRouter\":\"The address of the Sushiswap RouterV2\",\"_uniswapRouter\":\"The address of the Uniswap RouterV2\"}},\"getSwapInfo(address,address)\":{\"params\":{\"from\":\"The token that we have\",\"to\":\"The token that we want\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"liquidate(address,address,address,uint256,uint256)\":{\"details\":\"Send proceeds to the caller, `msg.sender` will typically be a Strategy\",\"params\":{\"amount\":\"The amount of 'from' tokens to swap\",\"from\":\"The token we have\",\"minOut\":\"The minimum output amount accepted\",\"recipient\":\"The recipient of the swap\",\"to\":\"The token we want to swap to\"},\"returns\":{\"_0\":\"The amount of 'to' tokens received\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"setSushiswapRoutes(address,address,address[])\":{\"params\":{\"from\":\"The token that we have\",\"path\":\"The swap path used to get the desired token\",\"to\":\"The token that we want\"}},\"setUniswapRoutes(address,address,address[])\":{\"params\":{\"from\":\"The token that we have\",\"path\":\"The swap path used to get the desired token\",\"to\":\"The token that we want\"}}},\"title\":\"Oh! Finance Liquidator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize the Liquidator with Uniswap and Sushiswap V2 Router Addresses\"},\"getSwapInfo(address,address)\":{\"notice\":\"Get the router and swap path for a token pair\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"liquidate(address,address,address,uint256,uint256)\":{\"notice\":\"Liquidate an amount of 'from' tokens to 'to' tokens from this address\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"setSushiswapRoutes(address,address,address[])\":{\"notice\":\"Set liquidation route for a token pair on Sushiswap\"},\"setUniswapRoutes(address,address,address[])\":{\"notice\":\"Set liquidation route for a token pair on Uniswap\"},\"sushiswapRouter()\":{\"notice\":\"address of Sushiswap RouterV2\"},\"sushiswapRoutes(address,address,uint256)\":{\"notice\":\"mapping of source token to desired token to sushiswap liquidation route\"},\"tokenSwapRouter(address,address)\":{\"notice\":\"mapping of source token to desired token to router used for liquidation\"},\"uniswapRouter()\":{\"notice\":\"address of Uniswap RouterV2\"},\"uniswapRoutes(address,address,uint256)\":{\"notice\":\"mapping of source token to desired token to uniswap liquidation route\"},\"weth()\":{\"notice\":\"address of WETH\"}},\"notice\":\"Contract to manage standard token liquidations on Uniswap or Sushiswap\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidators/OhLiquidator.sol\":\"OhLiquidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"contracts/liquidators/OhLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {OhSubscriber} from \\\"../registry/OhSubscriber.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Liquidator\\r\\n/// @notice Contract to manage standard token liquidations on Uniswap or Sushiswap\\r\\ncontract OhLiquidator is OhSubscriber, ILiquidator {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice mapping of source token to desired token to sushiswap liquidation route\\r\\n    mapping(address => mapping(address => address[])) public sushiswapRoutes;\\r\\n\\r\\n    /// @notice mapping of source token to desired token to uniswap liquidation route\\r\\n    mapping(address => mapping(address => address[])) public uniswapRoutes;\\r\\n\\r\\n    /// @notice mapping of source token to desired token to router used for liquidation\\r\\n    mapping(address => mapping(address => address)) public tokenSwapRouter;\\r\\n\\r\\n    /// @notice address of Sushiswap RouterV2\\r\\n    address public override sushiswapRouter;\\r\\n\\r\\n    /// @notice address of Uniswap RouterV2\\r\\n    address public override uniswapRouter;\\r\\n\\r\\n    /// @notice address of WETH\\r\\n    address public override weth;\\r\\n\\r\\n    /// @notice Initialize the Liquidator with Uniswap and Sushiswap V2 Router Addresses\\r\\n    /// @param _registry The address of the Registry\\r\\n    /// @param _uniswapRouter The address of the Uniswap RouterV2\\r\\n    /// @param _sushiswapRouter The address of the Sushiswap RouterV2\\r\\n    /// @dev Internally sets WETH address from Uniswap Router\\r\\n    constructor(\\r\\n        address _registry,\\r\\n        address _uniswapRouter,\\r\\n        address _sushiswapRouter\\r\\n    ) OhSubscriber(_registry) {\\r\\n        sushiswapRouter = _sushiswapRouter;\\r\\n        uniswapRouter = _uniswapRouter;\\r\\n        weth = IUniswapV2Router02(_uniswapRouter).WETH();\\r\\n    }\\r\\n\\r\\n    /// @notice Liquidate an amount of 'from' tokens to 'to' tokens from this address\\r\\n    /// @dev Send proceeds to the caller, `msg.sender` will typically be a Strategy\\r\\n    /// @param recipient The recipient of the swap\\r\\n    /// @param from The token we have\\r\\n    /// @param to The token we want to swap to\\r\\n    /// @param amount The amount of 'from' tokens to swap\\r\\n    /// @param minOut The minimum output amount accepted\\r\\n    /// @return The amount of 'to' tokens received\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external override returns (uint256) {\\r\\n        // get the router address and swap path\\r\\n        address router = tokenSwapRouter[from][to];\\r\\n        address[] memory path = router == uniswapRouter ? uniswapRoutes[from][to] : sushiswapRoutes[from][to];\\r\\n\\r\\n        // increase allowance and swap\\r\\n        IERC20(from).safeIncreaseAllowance(router, amount);\\r\\n        uint256[] memory output = IUniswapV2Router02(router).swapExactTokensForTokens(amount, minOut, path, recipient, block.timestamp);\\r\\n\\r\\n        // return amount received\\r\\n        return output[path.length - 1];\\r\\n    }\\r\\n\\r\\n    /// @notice Set liquidation route for a token pair on Uniswap\\r\\n    /// @param from The token that we have\\r\\n    /// @param to The token that we want\\r\\n    /// @param path The swap path used to get the desired token\\r\\n    function setUniswapRoutes(\\r\\n        address from,\\r\\n        address to,\\r\\n        address[] memory path\\r\\n    ) external onlyGovernance {\\r\\n        uint256 length = path.length;\\r\\n\\r\\n        require(from == path[0], \\\"Liquidator: Invalid From\\\");\\r\\n        require(to == path[length - 1], \\\"Liquidator: Invalid To\\\");\\r\\n\\r\\n        uniswapRoutes[from][to] = path;\\r\\n        tokenSwapRouter[from][to] = uniswapRouter;\\r\\n    }\\r\\n\\r\\n    /// @notice Set liquidation route for a token pair on Sushiswap\\r\\n    /// @param from The token that we have\\r\\n    /// @param to The token that we want\\r\\n    /// @param path The swap path used to get the desired token\\r\\n    function setSushiswapRoutes(\\r\\n        address from,\\r\\n        address to,\\r\\n        address[] memory path\\r\\n    ) external onlyGovernance {\\r\\n        uint256 length = path.length;\\r\\n\\r\\n        require(from == path[0], \\\"SetSushiRoutes: Invalid From\\\");\\r\\n        require(to == path[length - 1], \\\"SetSushiRoutes: Invalid To\\\");\\r\\n\\r\\n        sushiswapRoutes[from][to] = path;\\r\\n        tokenSwapRouter[from][to] = sushiswapRouter;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the router and swap path for a token pair\\r\\n    /// @param from The token that we have\\r\\n    /// @param to The token that we want\\r\\n    function getSwapInfo(address from, address to) external view override returns (address router, address[] memory path) {\\r\\n        if (tokenSwapRouter[from][to] == uniswapRouter) {\\r\\n            router = uniswapRouter;\\r\\n            path = uniswapRoutes[from][to];\\r\\n        } else if (tokenSwapRouter[from][to] == sushiswapRouter) {\\r\\n            router = sushiswapRouter;\\r\\n            path = sushiswapRoutes[from][to];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0c2a34588e47cd9a6c925f3a58833a447996d01f13d58ab2044673d40f7753a3\",\"license\":\"MIT\"},\"contracts/registry/OhSubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber\\r\\n/// @notice Base Oh! Finance contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriber is ISubscriber {\\r\\n    address internal _registry;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Construct contract with the Registry\\r\\n    /// @param registry_ The address of the Registry\\r\\n    constructor(address registry_) {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _registry = registry_;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return _registry;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n\\r\\n        _registry = registry_;\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0020899072f62d95eafe3202eab714b3c538c0703e952d4a122436f180e00cb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516115b23803806115b28339818101604052606081101561003357600080fd5b50805160208083015160409093015191929190839061005b908290610f0b61016e821b17901c565b6100ac576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b03199081166001600160a01b039384161790915560048054821684841617815560058054909216928516928317909155604080516315ab88c960e31b8152905163ad5c464892828101926020929190829003018186803b15801561011a57600080fd5b505afa15801561012e573d6000803e3d6000fd5b505050506040513d602081101561014457600080fd5b5051600680546001600160a01b0319166001600160a01b0390921691909117905550610174915050565b3b151590565b61142f806101836000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637b1039991161008c578063ae39ecfc11610066578063ae39ecfc1461035d578063b066223f146103ef578063cdeb1ccd1461041d578063e9240c2d14610453576100ea565b80637b103999146102f9578063a91ee0dc14610301578063a9e696db14610327576100ea565b8063481c6a75116100c8578063481c6a751461028d5780635aa6e675146102955780636f70e66f1461029d578063735de9f7146102f1576100ea565b806310f7a242146100ef5780633fc8cef3146101ad57806341e8018f146101d1575b600080fd5b6101ab6004803603606081101561010557600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561013957600080fd5b82018360208201111561014b57600080fd5b8035906020019184602083028401116401000000008311171561016d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061045b945050505050565b005b6101b5610638565b604080516001600160a01b039092168252519081900360200190f35b6101ab600480360360608110156101e757600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561021b57600080fd5b82018360208201111561022d57600080fd5b8035906020019184602083028401116401000000008311171561024f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610647945050505050565b6101b561081d565b6101b5610890565b6102df600480360360a08110156102b357600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356108d2565b60408051918252519081900360200190f35b6101b5610b74565b6101b5610b83565b6101ab6004803603602081101561031757600080fd5b50356001600160a01b0316610b92565b6101b56004803603606081101561033d57600080fd5b506001600160a01b03813581169160208101359091169060400135610ce4565b61038b6004803603604081101561037357600080fd5b506001600160a01b0381358116916020013516610d29565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156103da5781810151838201526020016103c2565b50505050905001935050505060405180910390f35b6101b56004803603604081101561040557600080fd5b506001600160a01b0381358116916020013516610eae565b6101b56004803603606081101561043357600080fd5b506001600160a01b03813581169160208101359091169060400135610ed4565b6101b5610efc565b610463610890565b6001600160a01b0316336001600160a01b0316146104c8576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b8051816000826104d457fe5b60200260200101516001600160a01b0316846001600160a01b031614610541576040805162461bcd60e51b815260206004820152601c60248201527f5365745375736869526f757465733a20496e76616c69642046726f6d00000000604482015290519081900360640190fd5b81600182038151811061055057fe5b60200260200101516001600160a01b0316836001600160a01b0316146105bd576040805162461bcd60e51b815260206004820152601a60248201527f5365745375736869526f757465733a20496e76616c696420546f000000000000604482015290519081900360640190fd5b6001600160a01b038085166000908152600160209081526040808320938716835292815291902083516105f29285019061132f565b50506004546001600160a01b03938416600090815260036020908152604080832095871683529490529290922080546001600160a01b0319169390921692909217905550565b6006546001600160a01b031681565b61064f610890565b6001600160a01b0316336001600160a01b0316146106b4576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b8051816000826106c057fe5b60200260200101516001600160a01b0316846001600160a01b03161461072d576040805162461bcd60e51b815260206004820152601860248201527f4c697175696461746f723a20496e76616c69642046726f6d0000000000000000604482015290519081900360640190fd5b81600182038151811061073c57fe5b60200260200101516001600160a01b0316836001600160a01b0316146107a2576040805162461bcd60e51b81526020600482015260166024820152754c697175696461746f723a20496e76616c696420546f60501b604482015290519081900360640190fd5b6001600160a01b038085166000908152600260209081526040808320938716835292815291902083516107d79285019061132f565b50506005546001600160a01b03938416600090815260036020908152604080832095871683529490529290922080546001600160a01b0319169390921692909217905550565b6000610827610b83565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d602081101561088957600080fd5b5051905090565b600061089a610b83565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b6001600160a01b03808516600090815260036020908152604080832087851684529091528120546005549192908116918391168214610935576001600160a01b038088166000908152600160209081526040808320938a1683529290522061095b565b6001600160a01b038088166000908152600260209081526040808320938a168352929052205b8054806020026020016040519081016040528092919081815260200182805480156109af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610991575b505050505090506109d48286896001600160a01b0316610f119092919063ffffffff16565b6000826001600160a01b03166338ed17398787858d426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610a5a578181015183820152602001610a42565b505050509050019650505050505050600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ac057600080fd5b8101908080516040519392919084640100000000821115610ae057600080fd5b908301906020820185811115610af557600080fd5b8251866020820283011164010000000082111715610b1257600080fd5b82525081516020918201928201910280838360005b83811015610b3f578181015183820152602001610b27565b50505050905001604052505050905080600183510381518110610b5e57fe5b6020026020010151935050505095945050505050565b6005546001600160a01b031681565b6000546001600160a01b031690565b610b9a610890565b6001600160a01b0316336001600160a01b031614610bff576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610c0881610f0b565b610c59576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316179055610c7c610890565b6001600160a01b0316336001600160a01b031614610ce1576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b60016020528260005260406000206020528160005260406000208181548110610d0c57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b6005546001600160a01b0383811660009081526003602090815260408083208685168452909152812054909260609291821691161415610ded576005546001600160a01b0385811660009081526002602090815260408083208885168452825291829020805483518184028101840190945280845293909416955090929190830182828015610de157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dc3575b50505050509050610ea7565b6004546001600160a01b0385811660009081526003602090815260408083208885168452909152902054811691161415610ea7576004546001600160a01b0385811660009081526001602090815260408083208885168452825291829020805483518184028101840190945280845293909416955090929190830182828015610e9f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e81575b505050505090505b9250929050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b60026020528260005260406000206020528160005260406000208181548110610d0c57600080fd5b6004546001600160a01b031681565b3b151590565b6000610fa782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610f7557600080fd5b505afa158015610f89573d6000803e3d6000fd5b505050506040513d6020811015610f9f57600080fd5b505190611002565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610ffc908590611063565b50505050565b60008282018381101561105c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006110b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111199092919063ffffffff16565b805190915015611114578080602001905160208110156110d757600080fd5b50516111145760405162461bcd60e51b815260040180806020018281038252602a8152602001806113d0602a913960400191505060405180910390fd5b505050565b60606111288484600085611130565b949350505050565b6060824710156111715760405162461bcd60e51b81526004018080602001828103825260268152602001806113aa6026913960400191505060405180910390fd5b61117a85610f0b565b6111cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106112095780518252601f1990920191602091820191016111ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b509150915061128082828661128b565b979650505050505050565b6060831561129a57508161105c565b8251156112aa5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112f45781810151838201526020016112dc565b50505050905090810190601f1680156113215780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215611384579160200282015b8281111561138457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061134f565b50611390929150611394565b5090565b5b80821115611390576000815560010161139556fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d3b342396ab4a3629feb73e2479573fd59581adfd170801af7f690d63c233b5b64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637b1039991161008c578063ae39ecfc11610066578063ae39ecfc1461035d578063b066223f146103ef578063cdeb1ccd1461041d578063e9240c2d14610453576100ea565b80637b103999146102f9578063a91ee0dc14610301578063a9e696db14610327576100ea565b8063481c6a75116100c8578063481c6a751461028d5780635aa6e675146102955780636f70e66f1461029d578063735de9f7146102f1576100ea565b806310f7a242146100ef5780633fc8cef3146101ad57806341e8018f146101d1575b600080fd5b6101ab6004803603606081101561010557600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561013957600080fd5b82018360208201111561014b57600080fd5b8035906020019184602083028401116401000000008311171561016d57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061045b945050505050565b005b6101b5610638565b604080516001600160a01b039092168252519081900360200190f35b6101ab600480360360608110156101e757600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561021b57600080fd5b82018360208201111561022d57600080fd5b8035906020019184602083028401116401000000008311171561024f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610647945050505050565b6101b561081d565b6101b5610890565b6102df600480360360a08110156102b357600080fd5b506001600160a01b038135811691602081013582169160408201351690606081013590608001356108d2565b60408051918252519081900360200190f35b6101b5610b74565b6101b5610b83565b6101ab6004803603602081101561031757600080fd5b50356001600160a01b0316610b92565b6101b56004803603606081101561033d57600080fd5b506001600160a01b03813581169160208101359091169060400135610ce4565b61038b6004803603604081101561037357600080fd5b506001600160a01b0381358116916020013516610d29565b60405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156103da5781810151838201526020016103c2565b50505050905001935050505060405180910390f35b6101b56004803603604081101561040557600080fd5b506001600160a01b0381358116916020013516610eae565b6101b56004803603606081101561043357600080fd5b506001600160a01b03813581169160208101359091169060400135610ed4565b6101b5610efc565b610463610890565b6001600160a01b0316336001600160a01b0316146104c8576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b8051816000826104d457fe5b60200260200101516001600160a01b0316846001600160a01b031614610541576040805162461bcd60e51b815260206004820152601c60248201527f5365745375736869526f757465733a20496e76616c69642046726f6d00000000604482015290519081900360640190fd5b81600182038151811061055057fe5b60200260200101516001600160a01b0316836001600160a01b0316146105bd576040805162461bcd60e51b815260206004820152601a60248201527f5365745375736869526f757465733a20496e76616c696420546f000000000000604482015290519081900360640190fd5b6001600160a01b038085166000908152600160209081526040808320938716835292815291902083516105f29285019061132f565b50506004546001600160a01b03938416600090815260036020908152604080832095871683529490529290922080546001600160a01b0319169390921692909217905550565b6006546001600160a01b031681565b61064f610890565b6001600160a01b0316336001600160a01b0316146106b4576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b8051816000826106c057fe5b60200260200101516001600160a01b0316846001600160a01b03161461072d576040805162461bcd60e51b815260206004820152601860248201527f4c697175696461746f723a20496e76616c69642046726f6d0000000000000000604482015290519081900360640190fd5b81600182038151811061073c57fe5b60200260200101516001600160a01b0316836001600160a01b0316146107a2576040805162461bcd60e51b81526020600482015260166024820152754c697175696461746f723a20496e76616c696420546f60501b604482015290519081900360640190fd5b6001600160a01b038085166000908152600260209081526040808320938716835292815291902083516107d79285019061132f565b50506005546001600160a01b03938416600090815260036020908152604080832095871683529490529290922080546001600160a01b0319169390921692909217905550565b6000610827610b83565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d602081101561088957600080fd5b5051905090565b600061089a610b83565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b6001600160a01b03808516600090815260036020908152604080832087851684529091528120546005549192908116918391168214610935576001600160a01b038088166000908152600160209081526040808320938a1683529290522061095b565b6001600160a01b038088166000908152600260209081526040808320938a168352929052205b8054806020026020016040519081016040528092919081815260200182805480156109af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610991575b505050505090506109d48286896001600160a01b0316610f119092919063ffffffff16565b6000826001600160a01b03166338ed17398787858d426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610a5a578181015183820152602001610a42565b505050509050019650505050505050600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ac057600080fd5b8101908080516040519392919084640100000000821115610ae057600080fd5b908301906020820185811115610af557600080fd5b8251866020820283011164010000000082111715610b1257600080fd5b82525081516020918201928201910280838360005b83811015610b3f578181015183820152602001610b27565b50505050905001604052505050905080600183510381518110610b5e57fe5b6020026020010151935050505095945050505050565b6005546001600160a01b031681565b6000546001600160a01b031690565b610b9a610890565b6001600160a01b0316336001600160a01b031614610bff576040805162461bcd60e51b815260206004820152601b60248201527f537562736372696265723a204f6e6c7920476f7665726e616e63650000000000604482015290519081900360640190fd5b610c0881610f0b565b610c59576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316179055610c7c610890565b6001600160a01b0316336001600160a01b031614610ce1576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b60016020528260005260406000206020528160005260406000208181548110610d0c57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b6005546001600160a01b0383811660009081526003602090815260408083208685168452909152812054909260609291821691161415610ded576005546001600160a01b0385811660009081526002602090815260408083208885168452825291829020805483518184028101840190945280845293909416955090929190830182828015610de157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610dc3575b50505050509050610ea7565b6004546001600160a01b0385811660009081526003602090815260408083208885168452909152902054811691161415610ea7576004546001600160a01b0385811660009081526001602090815260408083208885168452825291829020805483518184028101840190945280845293909416955090929190830182828015610e9f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e81575b505050505090505b9250929050565b60036020908152600092835260408084209091529082529020546001600160a01b031681565b60026020528260005260406000206020528160005260406000208181548110610d0c57600080fd5b6004546001600160a01b031681565b3b151590565b6000610fa782856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015610f7557600080fd5b505afa158015610f89573d6000803e3d6000fd5b505050506040513d6020811015610f9f57600080fd5b505190611002565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150610ffc908590611063565b50505050565b60008282018381101561105c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006110b8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111199092919063ffffffff16565b805190915015611114578080602001905160208110156110d757600080fd5b50516111145760405162461bcd60e51b815260040180806020018281038252602a8152602001806113d0602a913960400191505060405180910390fd5b505050565b60606111288484600085611130565b949350505050565b6060824710156111715760405162461bcd60e51b81526004018080602001828103825260268152602001806113aa6026913960400191505060405180910390fd5b61117a85610f0b565b6111cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106112095780518252601f1990920191602091820191016111ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b509150915061128082828661128b565b979650505050505050565b6060831561129a57508161105c565b8251156112aa5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112f45781810151838201526020016112dc565b50505050905090810190601f1680156113215780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215611384579160200282015b8281111561138457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061134f565b50611390929150611394565b5090565b5b80821115611390576000815560010161139556fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d3b342396ab4a3629feb73e2479573fd59581adfd170801af7f690d63c233b5b64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Internally sets WETH address from Uniswap Router",
        "params": {
          "_registry": "The address of the Registry",
          "_sushiswapRouter": "The address of the Sushiswap RouterV2",
          "_uniswapRouter": "The address of the Uniswap RouterV2"
        }
      },
      "getSwapInfo(address,address)": {
        "params": {
          "from": "The token that we have",
          "to": "The token that we want"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "details": "Send proceeds to the caller, `msg.sender` will typically be a Strategy",
        "params": {
          "amount": "The amount of 'from' tokens to swap",
          "from": "The token we have",
          "minOut": "The minimum output amount accepted",
          "recipient": "The recipient of the swap",
          "to": "The token we want to swap to"
        },
        "returns": {
          "_0": "The amount of 'to' tokens received"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "setSushiswapRoutes(address,address,address[])": {
        "params": {
          "from": "The token that we have",
          "path": "The swap path used to get the desired token",
          "to": "The token that we want"
        }
      },
      "setUniswapRoutes(address,address,address[])": {
        "params": {
          "from": "The token that we have",
          "path": "The swap path used to get the desired token",
          "to": "The token that we want"
        }
      }
    },
    "title": "Oh! Finance Liquidator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize the Liquidator with Uniswap and Sushiswap V2 Router Addresses"
      },
      "getSwapInfo(address,address)": {
        "notice": "Get the router and swap path for a token pair"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "liquidate(address,address,address,uint256,uint256)": {
        "notice": "Liquidate an amount of 'from' tokens to 'to' tokens from this address"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "setSushiswapRoutes(address,address,address[])": {
        "notice": "Set liquidation route for a token pair on Sushiswap"
      },
      "setUniswapRoutes(address,address,address[])": {
        "notice": "Set liquidation route for a token pair on Uniswap"
      },
      "sushiswapRouter()": {
        "notice": "address of Sushiswap RouterV2"
      },
      "sushiswapRoutes(address,address,uint256)": {
        "notice": "mapping of source token to desired token to sushiswap liquidation route"
      },
      "tokenSwapRouter(address,address)": {
        "notice": "mapping of source token to desired token to router used for liquidation"
      },
      "uniswapRouter()": {
        "notice": "address of Uniswap RouterV2"
      },
      "uniswapRoutes(address,address,uint256)": {
        "notice": "mapping of source token to desired token to uniswap liquidation route"
      },
      "weth()": {
        "notice": "address of WETH"
      }
    },
    "notice": "Contract to manage standard token liquidations on Uniswap or Sushiswap",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13145,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11449,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "sushiswapRoutes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 11457,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "uniswapRoutes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 11464,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "tokenSwapRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 11468,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "sushiswapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11472,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11476,
        "contract": "contracts/liquidators/OhLiquidator.sol:OhLiquidator",
        "label": "weth",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    }
  }
}