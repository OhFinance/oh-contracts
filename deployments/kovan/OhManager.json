{
  "address": "0xf8C99aF1169023Ab0CB35D1510Be0f3Cd3789949",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buybackAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementAmount",
          "type": "uint256"
        }
      ],
      "name": "AccrueRevenue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buybackAmount",
          "type": "uint256"
        }
      ],
      "name": "Buyback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "Finance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "FinanceAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BUYBACK_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MANAGEMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BUYBACK_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_MANAGEMENT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "accrueRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "banks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "buyback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buybackFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "exitAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "finance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "financeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buybackFee",
          "type": "uint256"
        }
      ],
      "name": "setBuybackFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "setLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "setWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBanks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "totalStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "withdrawIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ce0f3f385eb61f9ed1d13c64b5a08b617bd1fbcdcb01f23e6645cdb6ba6bd01",
  "receipt": {
    "to": null,
    "from": "0x123456D302B690f8525B4BAC5681101d706e850e",
    "contractAddress": "0xf8C99aF1169023Ab0CB35D1510Be0f3Cd3789949",
    "transactionIndex": 1,
    "gasUsed": "2256586",
    "logsBloom": "0x
    "blockHash": "0xf2ae4a02f6ddb3de9910428b97dbaf66f16a579f249ae13f7c8c62d2960b2978",
    "transactionHash": "0x1ce0f3f385eb61f9ed1d13c64b5a08b617bd1fbcdcb01f23e6645cdb6ba6bd01",
    "logs": [],
    "blockNumber": 26686267,
    "cumulativeGasUsed": "2277586",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2bA8E99Fedc439da742F023D43b224E3d28eDf5e",
    "0x6b461A994d76d8248a6B439D4a19cDfd821409eE"
  ],
  "solcInputHash": "d58997e03a516940f0827c0bee3c7f29",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementAmount\",\"type\":\"uint256\"}],\"name\":\"AccrueRevenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackAmount\",\"type\":\"uint256\"}],\"name\":\"Buyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Finance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"FinanceAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUYBACK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MANAGEMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BUYBACK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_MANAGEMENT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accrueRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"banks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"exitAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"finance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"financeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"setWithdrawIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBanks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"totalStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"withdrawIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used as the main control point for executing strategies\",\"kind\":\"dev\",\"methods\":{\"accrueRevenue(address,address,uint256)\":{\"details\":\"Only callable by approved Strategies\",\"params\":{\"amount\":\"The total amount of profit received from liquidation\",\"bank\":\"The address of the Bank which uses the Strategy\"}},\"buyback(address)\":{\"details\":\"Burns all proceeds\",\"params\":{\"from\":\"The address of the token to liquidate for Oh! Tokens\"}},\"constructor\":{\"details\":\"Sets initial buyback and management fee parameters\",\"params\":{\"registry_\":\"The address of the registry\",\"token_\":\"The address of the Oh! Token\"}},\"exit(address,address)\":{\"params\":{\"bank\":\"The bank that will be used to exit the strategy\",\"strategy\":\"The strategy to be exited\"}},\"exitAll(address)\":{\"params\":{\"bank\":\"The bank that will be used to exit the strategy\"}},\"finance(address)\":{\"details\":\"Only allow this function to be called on approved Banks\",\"params\":{\"bank\":\"The address of the Bank to finance\"}},\"financeAll(address)\":{\"details\":\"Deposit queue not needed here as all Strategies are equally invested inOnly allow this function to be called on approved Banks\",\"params\":{\"bank\":\"The address of the Bank to finance\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"rebalance(address)\":{\"params\":{\"bank\":\"The bank to rebalance\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"setBank(address,bool)\":{\"details\":\"Only Governance can call this function\",\"params\":{\"_approved\":\"the approval status of the bank\",\"_bank\":\"the bank to be approved/unapproved\"}},\"setBuybackFee(uint256)\":{\"details\":\"Only Governance; base 1000, 1% = 10\",\"params\":{\"_buybackFee\":\"The new buyback fee\"}},\"setLiquidator(address,address,address)\":{\"details\":\"Only Governance can call this function\",\"params\":{\"_from\":\"the token we have to liquidate\",\"_liquidator\":\"the liquidator contract\",\"_to\":\"the token we want to receive\"}},\"setManagementFee(uint256)\":{\"details\":\"Only Governance; base 1000, 1% = 10\",\"params\":{\"_managementFee\":\"The new management fee\"}},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"setStrategy(address,address,bool)\":{\"details\":\"Only Governance can call this function\",\"params\":{\"_approved\":\"the approval status of the Strategy\",\"_bank\":\"the bank which uses the strategy\",\"_strategy\":\"the strategy to be approved/unapproved\"}},\"setWhitelisted(address,bool)\":{\"details\":\"Only Governance can call this function\",\"params\":{\"_contract\":\"the strategy contract\",\"_whitelisted\":\"the whitelisted status of the strategy\"}},\"setWithdrawIndex(uint256)\":{\"params\":{\"i\":\"The \"}},\"strategies(address,uint256)\":{\"params\":{\"bank\":\"The address of the Bank that contains the Strategy\",\"i\":\"The Bank queue index to check\"}},\"totalStrategies(address)\":{\"params\":{\"bank\":\"The Bank we are checking\"},\"returns\":{\"_0\":\"Amount of active strategies\"}},\"withdrawIndex(address)\":{\"params\":{\"bank\":\"The Bank to check the next Strategy for\"},\"returns\":{\"_0\":\"The index of the Strategy\"}}},\"stateVariables\":{\"_banks\":{\"details\":\"The set of Banks approved for investing\"},\"_depositQueue\":{\"details\":\"The mapping of Banks to next Strategy index it will deposit to\"},\"_strategies\":{\"details\":\"The mapping of Banks to active Strategies\"},\"_withdrawQueue\":{\"details\":\"The mapping of Banks to next Strategy index it will withdraw from\"},\"delays\":{\"details\":\"The mapping of Banks to delay status\"}},\"title\":\"Oh! Finance Manager\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueRevenue(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a Bank realizes profit via liquidation \"},\"Buyback(address,uint256,uint256)\":{\"notice\":\"Emitted when a buyback is performed with an amount of from tokens\"},\"Finance(address,address)\":{\"notice\":\"Emitted when a Bank's capital is invested in a single Strategy \"},\"FinanceAll(address)\":{\"notice\":\"Emitted when a Bank's capital is invested in all Strategies\"},\"Rebalance(address)\":{\"notice\":\"Emitted when a Bank's capital is rebalanced\"}},\"kind\":\"user\",\"methods\":{\"FEE_DENOMINATOR()\":{\"notice\":\"Denominator for calculating protocol fees\"},\"MAX_BUYBACK_FEE()\":{\"notice\":\"Maximum buyback fee, 50%\"},\"MAX_MANAGEMENT_FEE()\":{\"notice\":\"Maximum management fee, 10%\"},\"MIN_BUYBACK_FEE()\":{\"notice\":\"Minimum buyback fee, 10%\"},\"MIN_MANAGEMENT_FEE()\":{\"notice\":\"Minimum management fee, 0%\"},\"accrueRevenue(address,address,uint256)\":{\"notice\":\"Accrue revenue from a Strategy\"},\"banks(uint256)\":{\"notice\":\"Get the Bank\"},\"buyback(address)\":{\"notice\":\"Perform a token buyback with accrued revenue\"},\"buybackFee()\":{\"notice\":\"The amount of profits reserved for protocol buybacks, base 1000\"},\"constructor\":{\"notice\":\"Deploy the Manager with the Registry reference\"},\"exit(address,address)\":{\"notice\":\"Exit a given strategy for a given bank\"},\"exitAll(address)\":{\"notice\":\"Exit from all strategies for a given bank\"},\"finance(address)\":{\"notice\":\"Finance the next Strategy in the Bank queue with all available underlying\"},\"financeAll(address)\":{\"notice\":\"Evenly finance underlying to all strategies\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"liquidators(address,address)\":{\"notice\":\"The mapping of `from` token to `to` token to liquidator contract\"},\"managementFee()\":{\"notice\":\"The amount of profits reserved for fund management, base 1000\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"rebalance(address)\":{\"notice\":\"Rebalance Bank exposure by withdrawing all, then evenly distributing underlying to all strategies\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"setBank(address,bool)\":{\"notice\":\"Adds or removes a Bank for investment\"},\"setBuybackFee(uint256)\":{\"notice\":\"Sets the protocol buyback percentage (Profit Share)\"},\"setLiquidator(address,address,address)\":{\"notice\":\"Sets the Liquidator contract for a given token\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the protocol management fee percentage\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"setStrategy(address,address,bool)\":{\"notice\":\"Adds or removes a Strategy for a given Bank\"},\"setWhitelisted(address,bool)\":{\"notice\":\"Whitelists strategy for Bank use/management\"},\"setWithdrawIndex(uint256)\":{\"notice\":\"Set the withdrawal index\"},\"strategies(address,uint256)\":{\"notice\":\"Get the Strategy at a given index for a given Bank\"},\"token()\":{\"notice\":\"The address of the Oh! Finance Token\"},\"totalStrategies(address)\":{\"notice\":\"Get total number of strategies for a given bank\"},\"whitelisted(address)\":{\"notice\":\"The mapping of contracts that are whitelisted for Bank use/management\"},\"withdrawIndex(address)\":{\"notice\":\"Get the index of the Strategy to withdraw from for a given Bank\"}},\"notice\":\"The Manager contains references to all active banks, strategies, and liquidation contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/manager/OhManager.sol\":\"OhManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ILiquidator {\\r\\n    function liquidate(\\r\\n        address recipient,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 minOut\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getSwapInfo(address from, address to) external view returns (address router, address[] memory path);\\r\\n\\r\\n    function sushiswapRouter() external view returns (address);\\r\\n\\r\\n    function uniswapRouter() external view returns (address);\\r\\n\\r\\n    function weth() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x06e860aed460fcad6bda1d677e83ee5155a74767378445103224319712f65d91\",\"license\":\"MIT\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IToken {\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegator,\\r\\n        address delegatee,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external;\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint256);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0fcb7cd0fca4e8f3b33fd673a91a7bcea47a3639118c8832024594698d788297\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IBankStorage} from \\\"./IBankStorage.sol\\\";\\r\\n\\r\\ninterface IBank is IBankStorage {\\r\\n    function strategies(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalance() external view returns (uint256);\\r\\n\\r\\n    function strategyBalance(uint256 i) external view returns (uint256);\\r\\n\\r\\n    function investedBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualBalance() external view returns (uint256);\\r\\n\\r\\n    function virtualPrice() external view returns (uint256);\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    function invest(address strategy, uint256 amount) external;\\r\\n\\r\\n    function investAll(address strategy) external;\\r\\n\\r\\n    function exit(address strategy, uint256 amount) external;\\r\\n\\r\\n    function exitAll(address strategy) external;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function depositFor(uint256 amount, address recipient) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6de3defe08ace109d27988c102a358967a5265c2462193ab25681d8fa659aaa\",\"license\":\"MIT\"},\"contracts/interfaces/bank/IBankStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IBankStorage {\\r\\n    function paused() external view returns (bool);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xda98d80e7a82404afa0ca24e3ce36ea5761301ab9bc4c573ee199af735f6f544\",\"license\":\"MIT\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // safely transfer tokens without underflowing\\r\\n    function safeTokenTransfer(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        if (amount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            IERC20(token).safeTransfer(recipient, balance);\\r\\n            return balance;\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(recipient, amount);\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x554436aaa2fe9d290e98e1872d43990d713d8bd1061474cc423edeec6d1eb92d\",\"license\":\"MIT\"},\"contracts/manager/OhManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {IBank} from \\\"../interfaces/bank/IBank.sol\\\";\\r\\nimport {ILiquidator} from \\\"../interfaces/ILiquidator.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {IToken} from \\\"../interfaces/IToken.sol\\\";\\r\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\r\\nimport {OhSubscriber} from \\\"../registry/OhSubscriber.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Manager\\r\\n/// @notice The Manager contains references to all active banks, strategies, and liquidation contracts.\\r\\n/// @dev This contract is used as the main control point for executing strategies\\r\\ncontract OhManager is OhSubscriber, IManager {\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Denominator for calculating protocol fees\\r\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\r\\n\\r\\n    /// @notice Maximum buyback fee, 50%\\r\\n    uint256 public constant MAX_BUYBACK_FEE = 500;\\r\\n\\r\\n    /// @notice Minimum buyback fee, 10%\\r\\n    uint256 public constant MIN_BUYBACK_FEE = 100;\\r\\n\\r\\n    /// @notice Maximum management fee, 10%\\r\\n    uint256 public constant MAX_MANAGEMENT_FEE = 100;\\r\\n\\r\\n    /// @notice Minimum management fee, 0%\\r\\n    uint256 public constant MIN_MANAGEMENT_FEE = 0;\\r\\n\\r\\n    /// @notice The address of the Oh! Finance Token\\r\\n    address public override token;\\r\\n\\r\\n    /// @notice The amount of profits reserved for protocol buybacks, base 1000\\r\\n    uint256 public override buybackFee;\\r\\n\\r\\n    /// @notice The amount of profits reserved for fund management, base 1000\\r\\n    uint256 public override managementFee;\\r\\n\\r\\n    /// @notice The mapping of `from` token to `to` token to liquidator contract\\r\\n    mapping(address => mapping(address => address)) public override liquidators;\\r\\n\\r\\n    /// @notice The mapping of contracts that are whitelisted for Bank use/management\\r\\n    mapping(address => bool) public override whitelisted;\\r\\n\\r\\n    /// @dev The set of Banks approved for investing\\r\\n    EnumerableSet.AddressSet internal _banks;\\r\\n\\r\\n    /// @dev The mapping of Banks to active Strategies\\r\\n    mapping(address => EnumerableSet.AddressSet) internal _strategies;\\r\\n\\r\\n    /// @dev The mapping of Banks to next Strategy index it will deposit to\\r\\n    mapping(address => uint8) internal _depositQueue;\\r\\n\\r\\n    /// @dev The mapping of Banks to next Strategy index it will withdraw from\\r\\n    mapping(address => uint8) internal _withdrawQueue;\\r\\n\\r\\n    /// @dev The mapping of Banks to delay status\\r\\n    mapping(address => uint256) public delays;\\r\\n\\r\\n    /// @notice Emitted when a Bank's capital is rebalanced\\r\\n    event Rebalance(address indexed bank);\\r\\n\\r\\n    /// @notice Emitted when a Bank's capital is invested in a single Strategy \\r\\n    event Finance(address indexed bank, address indexed strategy);\\r\\n\\r\\n    /// @notice Emitted when a Bank's capital is invested in all Strategies\\r\\n    event FinanceAll(address indexed bank);\\r\\n\\r\\n    /// @notice Emitted when a buyback is performed with an amount of from tokens\\r\\n    event Buyback(address indexed from, uint256 amount, uint256 buybackAmount);\\r\\n\\r\\n    /// @notice Emitted when a Bank realizes profit via liquidation \\r\\n    event AccrueRevenue(\\r\\n        address indexed bank,\\r\\n        address indexed strategy,\\r\\n        uint256 profitAmount,\\r\\n        uint256 buybackAmount,\\r\\n        uint256 managementAmount\\r\\n    );\\r\\n\\r\\n    /// @notice Only allow function calls if sender is an approved Bank\\r\\n    /// @param sender The address of the caller to validate\\r\\n    modifier onlyBank(address sender) {\\r\\n        require(_banks.contains(sender), \\\"Manager: Only Bank\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /// @notice Only allow function calls if sender is an approved Strategy\\r\\n    /// @param bank The address of the Bank that uses the Strategy\\r\\n    /// @param sender The address of the caller to validate\\r\\n    modifier onlyStrategy(address bank, address sender) {\\r\\n        require(_strategies[bank].contains(sender), \\\"Manager: Only Strategy\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow EOAs or Whitelisted contracts to interact\\r\\n    /// @dev Prevents sandwich / flash loan attacks & re-entrancy\\r\\n    modifier defense {\\r\\n        require(msg.sender == tx.origin || whitelisted[msg.sender], \\\"Manager: Only EOA or Whitelist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploy the Manager with the Registry reference\\r\\n    /// @dev Sets initial buyback and management fee parameters\\r\\n    /// @param registry_ The address of the registry\\r\\n    /// @param token_ The address of the Oh! Token\\r\\n    constructor(address registry_, address token_) OhSubscriber(registry_) {\\r\\n        token = token_;\\r\\n        buybackFee = 200; // 20%\\r\\n        managementFee = 20; // 2%\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Bank\\r\\n    function banks(uint256 i) external view override returns (address) {\\r\\n        return _banks.at(i);\\r\\n    }\\r\\n\\r\\n    function totalBanks() external view override returns (uint256) {\\r\\n        return _banks.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Strategy at a given index for a given Bank\\r\\n    /// @param bank The address of the Bank that contains the Strategy\\r\\n    /// @param i The Bank queue index to check\\r\\n    function strategies(address bank, uint256 i) external view override returns (address) {\\r\\n        return _strategies[bank].at(i);\\r\\n    }\\r\\n\\r\\n    /// @notice Get total number of strategies for a given bank\\r\\n    /// @param bank The Bank we are checking\\r\\n    /// @return Amount of active strategies\\r\\n    function totalStrategies(address bank) external view override returns (uint256) {\\r\\n        return _strategies[bank].length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the index of the Strategy to withdraw from for a given Bank\\r\\n    /// @param bank The Bank to check the next Strategy for\\r\\n    /// @return The index of the Strategy\\r\\n    function withdrawIndex(address bank) external view override returns (uint256) {\\r\\n        return _withdrawQueue[bank];\\r\\n    }\\r\\n\\r\\n    /// @notice Set the withdrawal index\\r\\n    /// @param i The \\r\\n    function setWithdrawIndex(uint256 i) external override onlyBank(msg.sender) {\\r\\n        _withdrawQueue[msg.sender] = uint8(i);\\r\\n    }\\r\\n\\r\\n    /// @notice Rebalance Bank exposure by withdrawing all, then evenly distributing underlying to all strategies\\r\\n    /// @param bank The bank to rebalance\\r\\n    function rebalance(address bank) external override defense onlyBank(bank) {\\r\\n        // Exit all strategies\\r\\n        uint256 length = _strategies[bank].length();\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            IBank(bank).exitAll(_strategies[bank].at(i));\\r\\n        }\\r\\n\\r\\n        // Re-invest underlying evenly\\r\\n        uint256 toInvest = IBank(bank).underlyingBalance();\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            uint256 amount = toInvest / length;\\r\\n            IBank(bank).invest(_strategies[bank].at(i), amount);\\r\\n        }\\r\\n\\r\\n        emit Rebalance(bank);\\r\\n    }\\r\\n\\r\\n    /// @notice Finance the next Strategy in the Bank queue with all available underlying\\r\\n    /// @param bank The address of the Bank to finance\\r\\n    /// @dev Only allow this function to be called on approved Banks\\r\\n    function finance(address bank) external override defense onlyBank(bank) {\\r\\n        uint256 length = _strategies[bank].length();\\r\\n        require(length > 0, \\\"Manager: No Strategies\\\");\\r\\n        require(block.timestamp > delays[bank], \\\"Manager: Delay Not Satisfied\\\");\\r\\n\\r\\n        // get the next Strategy, reset if current index out of bounds\\r\\n        uint8 i;\\r\\n        uint8 queued = _depositQueue[bank];\\r\\n        if (queued < length) {\\r\\n            i = queued;\\r\\n        } else {\\r\\n            i = 0;\\r\\n        }\\r\\n        address strategy = _strategies[bank].at(i);\\r\\n\\r\\n        // finance the strategy, increment index and update delay (+24h)\\r\\n        IBank(bank).investAll(strategy);\\r\\n        _depositQueue[bank] = i + 1;\\r\\n        delays[bank] = block.timestamp + 86400;\\r\\n\\r\\n        emit Finance(bank, strategy);\\r\\n    }\\r\\n\\r\\n    /// @notice Evenly finance underlying to all strategies\\r\\n    /// @param bank The address of the Bank to finance\\r\\n    /// @dev Deposit queue not needed here as all Strategies are equally invested in\\r\\n    /// @dev Only allow this function to be called on approved Banks\\r\\n    function financeAll(address bank) external override defense onlyBank(bank) {\\r\\n        uint256 length = _strategies[bank].length();\\r\\n        require(length > 0, \\\"Manager: No Strategies\\\");\\r\\n        require(block.timestamp > delays[bank], \\\"Manager: Delay Not Satisfied\\\");\\r\\n\\r\\n        uint256 toInvest = IBank(bank).underlyingBalance();\\r\\n        for (uint256 i; i < length; i++) {\\r\\n            uint256 amount = toInvest / length;\\r\\n            IBank(bank).invest(_strategies[bank].at(i), amount);\\r\\n        }\\r\\n        delays[bank] = block.timestamp + 86400;\\r\\n\\r\\n        emit FinanceAll(bank);\\r\\n    }\\r\\n\\r\\n    /// @notice Perform a token buyback with accrued revenue\\r\\n    /// @dev Burns all proceeds\\r\\n    /// @param from The address of the token to liquidate for Oh! Tokens\\r\\n    function buyback(address from) external override defense {\\r\\n        // get token, liquidator, and liquidation amount\\r\\n        address _token = token;\\r\\n        address liquidator = liquidators[from][_token];\\r\\n        uint256 amount = IERC20(from).balanceOf(address(this));\\r\\n\\r\\n        // send to liquidator, buyback and burn\\r\\n        TransferHelper.safeTokenTransfer(liquidator, from, amount);\\r\\n        uint256 received = ILiquidator(liquidator).liquidate(address(this), from, _token, amount, 1);\\r\\n        IToken(_token).burn(received);\\r\\n\\r\\n        emit Buyback(from, amount, received);\\r\\n    }\\r\\n\\r\\n    /// @notice Accrue revenue from a Strategy\\r\\n    /// @dev Only callable by approved Strategies\\r\\n    /// @param bank The address of the Bank which uses the Strategy\\r\\n    /// @param amount The total amount of profit received from liquidation\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external override onlyStrategy(bank, msg.sender) {\\r\\n        // calculate protocol and management fees, find remaining\\r\\n        uint256 fee = amount.mul(buybackFee).div(FEE_DENOMINATOR);\\r\\n        uint256 reward = amount.mul(managementFee).div(FEE_DENOMINATOR);\\r\\n        uint256 remaining = amount.sub(fee).sub(reward);\\r\\n\\r\\n        // send original function caller the management fee, transfer remaining to the Strategy\\r\\n        TransferHelper.safeTokenTransfer(tx.origin, underlying, reward);\\r\\n        TransferHelper.safeTokenTransfer(msg.sender, underlying, remaining);\\r\\n\\r\\n        emit AccrueRevenue(bank, msg.sender, remaining, fee, reward);\\r\\n    }\\r\\n\\r\\n    /// @notice Exit a given strategy for a given bank\\r\\n    /// @param bank The bank that will be used to exit the strategy\\r\\n    /// @param strategy The strategy to be exited\\r\\n    function exit(address bank, address strategy) public onlyGovernance {\\r\\n        IBank(bank).exitAll(strategy);\\r\\n    }\\r\\n\\r\\n    /// @notice Exit from all strategies for a given bank\\r\\n    /// @param bank The bank that will be used to exit the strategy\\r\\n    function exitAll(address bank) public override onlyGovernance {\\r\\n        uint256 length = _strategies[bank].length();\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            IBank(bank).exitAll(_strategies[bank].at(i));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Adds or removes a Bank for investment\\r\\n    /// @dev Only Governance can call this function\\r\\n    /// @param _bank the bank to be approved/unapproved\\r\\n    /// @param _approved the approval status of the bank\\r\\n    function setBank(address _bank, bool _approved) external onlyGovernance {\\r\\n        require(_bank.isContract(), \\\"Manager: Not Contract\\\");\\r\\n        bool approved = _banks.contains(_bank);\\r\\n        require(approved != _approved, \\\"Manager: No Change\\\");\\r\\n\\r\\n        // if Bank is already approved, withdraw all capital\\r\\n        if (approved) {\\r\\n            exitAll(_bank);\\r\\n            _banks.remove(_bank);\\r\\n        } else {\\r\\n            _banks.add(_bank);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Adds or removes a Strategy for a given Bank\\r\\n    /// @param _bank the bank which uses the strategy\\r\\n    /// @param _strategy the strategy to be approved/unapproved\\r\\n    /// @param _approved the approval status of the Strategy\\r\\n    /// @dev Only Governance can call this function\\r\\n    function setStrategy(address _bank, address _strategy, bool _approved) external onlyGovernance {\\r\\n        require(_strategy.isContract() && _bank.isContract(), \\\"Manager: Not Contract\\\");\\r\\n        bool approved = _strategies[_bank].contains(_strategy);\\r\\n        require(approved != _approved, \\\"Manager: No Change\\\");\\r\\n\\r\\n        // if Strategy is already approved, withdraw all capital\\r\\n        if (approved) {\\r\\n            exit(_bank, _strategy);\\r\\n            _strategies[_bank].remove(_strategy);\\r\\n        } else {\\r\\n            _strategies[_bank].add(_strategy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the Liquidator contract for a given token\\r\\n    /// @param _liquidator the liquidator contract\\r\\n    /// @param _from the token we have to liquidate\\r\\n    /// @param _to the token we want to receive\\r\\n    /// @dev Only Governance can call this function\\r\\n    function setLiquidator(\\r\\n        address _liquidator,\\r\\n        address _from,\\r\\n        address _to\\r\\n    ) external onlyGovernance {\\r\\n        require(_liquidator.isContract(), \\\"Manager: Not Contract\\\");\\r\\n        liquidators[_from][_to] = _liquidator;\\r\\n    }\\r\\n\\r\\n    /// @notice Whitelists strategy for Bank use/management\\r\\n    /// @param _contract the strategy contract\\r\\n    /// @param _whitelisted the whitelisted status of the strategy\\r\\n    /// @dev Only Governance can call this function\\r\\n    function setWhitelisted(address _contract, bool _whitelisted) external onlyGovernance {\\r\\n        require(_contract.isContract(), \\\"Registry: Not Contract\\\");\\r\\n        whitelisted[_contract] = _whitelisted;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the protocol buyback percentage (Profit Share)\\r\\n    /// @param _buybackFee The new buyback fee\\r\\n    /// @dev Only Governance; base 1000, 1% = 10\\r\\n    function setBuybackFee(uint256 _buybackFee) external onlyGovernance {\\r\\n        require(_buybackFee > MIN_BUYBACK_FEE, \\\"Registry: Invalid Buyback\\\");\\r\\n        require(_buybackFee < MAX_BUYBACK_FEE, \\\"Registry: Buyback Too High\\\");\\r\\n        buybackFee = _buybackFee;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the protocol management fee percentage\\r\\n    /// @param _managementFee The new management fee\\r\\n    /// @dev Only Governance; base 1000, 1% = 10\\r\\n    function setManagementFee(uint256 _managementFee) external onlyGovernance {\\r\\n        require(_managementFee > 0, \\\"Registry: Invalid Mgmt\\\");\\r\\n        require(_managementFee < 100, \\\"Registry: Mgmt Too High\\\");\\r\\n        managementFee = _managementFee;\\r\\n    }\\r\\n\\r\\n    function getNextStrategy(address bank) internal returns (address) {\\r\\n        \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcf22de4b73ff0ee0cdd477cfc3875af3c41a8f6096e8373dfa0023950ac898bc\",\"license\":\"MIT\"},\"contracts/registry/OhSubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber\\r\\n/// @notice Base Oh! Finance contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriber is ISubscriber {\\r\\n    address internal _registry;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Construct contract with the Registry\\r\\n    /// @param registry_ The address of the Registry\\r\\n    constructor(address registry_) {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _registry = registry_;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return _registry;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n\\r\\n        _registry = registry_;\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0020899072f62d95eafe3202eab714b3c538c0703e952d4a122436f180e00cb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200272538038062002725833981810160405260408110156200003757600080fd5b508051602091820151909182906200005a90829062001e2c620000ec821b17901c565b620000ac576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b039283166001600160a01b031991821617909155600180549390921692169190911790555060c86002556014600355620000f2565b3b151590565b61262380620001026000396000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c8063a1b827231161011a578063d73792a9116100ad578063f697a0361161007c578063f697a03614610581578063fb3e6f29146105a7578063fc0c546a146105cd578063fd263390146105d5578063fe56e2321461060357610205565b8063d73792a914610511578063d936547e14610519578063eb0dff6614610553578063f01cc0a61461057957610205565b8063aa4fbf4a116100e9578063aa4fbf4a14610485578063b19c0aa3146104bd578063bae7c80d146104e3578063d36b59371461050957610205565b8063a1b8272314610421578063a625403a14610429578063a6f7f5d614610457578063a91ee0dc1461045f57610205565b80635aa6e6751161019d5780637b1039991161016c5780637b10399914610391578063921c86d2146103995780639281aa0b146103c75780639908840c146103895780639f8f3244146103f557610205565b80635aa6e67514610323578063606b473a1461032b5780636ed77343146103515780637140f2e81461038957610205565b80633b2d081c116101d95780633b2d081c146102c05780634567bfba146102c8578063481c6a75146102e557806348930428146102ed57610205565b806285ae2b1461020a5780630666fa47146102435780630e3da0b81461027b57806321c281911461029a575b600080fd5b6102276004803603602081101561022057600080fd5b5035610620565b604080516001600160a01b039092168252519081900360200190f35b6102696004803603602081101561025957600080fd5b50356001600160a01b0316610633565b60408051918252519081900360200190f35b6102986004803603602081101561029157600080fd5b5035610645565b005b610298600480360360208110156102b057600080fd5b50356001600160a01b03166106bb565b610269610978565b610298600480360360208110156102de57600080fd5b503561097e565b610227610a89565b6102986004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610afc565b610227610c37565b6102986004803603602081101561034157600080fd5b50356001600160a01b0316610c79565b6102986004803603606081101561036757600080fd5b506001600160a01b038135811691602081013582169160409091013516610f6b565b61026961105d565b610227611062565b610227600480360360408110156103af57600080fd5b506001600160a01b0381358116916020013516611071565b610298600480360360408110156103dd57600080fd5b506001600160a01b0381351690602001351515611097565b6102276004803603604081101561040b57600080fd5b506001600160a01b038135169060200135611179565b6102696111a2565b6102986004803603604081101561043f57600080fd5b506001600160a01b03813581169160200135166111a8565b61026961126e565b6102986004803603602081101561047557600080fd5b50356001600160a01b0316611274565b6102986004803603606081101561049b57600080fd5b506001600160a01b0381358116916020810135909116906040013515156113b4565b610269600480360360208110156104d357600080fd5b50356001600160a01b0316611557565b610298600480360360208110156104f957600080fd5b50356001600160a01b0316611578565b61026961182f565b610269611834565b61053f6004803603602081101561052f57600080fd5b50356001600160a01b031661183a565b604080519115158252519081900360200190f35b6102986004803603602081101561056957600080fd5b50356001600160a01b031661184f565b610269611968565b6102696004803603602081101561059757600080fd5b50356001600160a01b0316611979565b610298600480360360208110156105bd57600080fd5b50356001600160a01b0316611997565b610227611bdc565b610298600480360360408110156105eb57600080fd5b506001600160a01b0381351690602001351515611beb565b6102986004803603602081101561061957600080fd5b5035611d29565b600061062d600683611e32565b92915050565b600b6020526000908152604090205481565b33610651600682611e3e565b610697576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b50336000908152600a60205260409020805460ff191660ff92909216919091179055565b333214806106d857503360009081526005602052604090205460ff165b610717576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b80610723600682611e3e565b610769576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b038216600090815260086020526040812061078a90611e53565b905060005b81811015610822576001600160a01b038416600081815260086020526040902063eb0dff66906107bf9084611e32565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b50506001909201915061078f9050565b506000836001600160a01b03166359356c5c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d602081101561088857600080fd5b5051905060005b8281101561093d5760008383816108a257fe5b6001600160a01b03881660008181526008602052604090209290910492509063b9b8c246906108d19085611e32565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b50506001909301925061088f915050565b506040516001600160a01b038516907fa61bd16ebda9d1c8ec2a61970b39e6640e55ed8433a22765a1b5217b72c4a81290600090a250505050565b60025481565b610986610c37565b6001600160a01b0316336001600160a01b0316146109d9576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b60648111610a2e576040805162461bcd60e51b815260206004820152601960248201527f52656769737472793a20496e76616c6964204275796261636b00000000000000604482015290519081900360640190fd5b6101f48110610a84576040805162461bcd60e51b815260206004820152601a60248201527f52656769737472793a204275796261636b20546f6f2048696768000000000000604482015290519081900360640190fd5b600255565b6000610a93611062565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015610acb57600080fd5b505afa158015610adf573d6000803e3d6000fd5b505050506040513d6020811015610af557600080fd5b5051905090565b6001600160a01b038316600090815260086020526040902083903390610b229082611e3e565b610b6c576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204f6e6c7920537472617465677960501b604482015290519081900360640190fd5b6000610b8f6103e8610b8960025487611e5e90919063ffffffff16565b90611eb7565b90506000610bae6103e8610b8960035488611e5e90919063ffffffff16565b90506000610bc682610bc08886611f1e565b90611f1e565b9050610bd3328884611f7b565b50610bdf338883611f7b565b506040805182815260208101859052808201849052905133916001600160a01b038b16917faa199a16983a8f166eb461939bd1b0bd1881e692fa38dbb98bd89c856052cd849181900360600190a35050505050505050565b6000610c41611062565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610acb57600080fd5b33321480610c9657503360009081526005602052604090205460ff165b610cd5576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b80610ce1600682611e3e565b610d27576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b0382166000908152600860205260408120610d4890611e53565b905060008111610d98576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204e6f205374726174656769657360501b604482015290519081900360640190fd5b6001600160a01b0383166000908152600b60205260409020544211610e04576040805162461bcd60e51b815260206004820152601c60248201527f4d616e616765723a2044656c6179204e6f742053617469736669656400000000604482015290519081900360640190fd5b6000836001600160a01b03166359356c5c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3f57600080fd5b505afa158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b5051905060005b82811015610f1e576000838381610e8357fe5b6001600160a01b03881660008181526008602052604090209290910492509063b9b8c24690610eb29085611e32565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505060019093019250610e70915050565b506001600160a01b0384166000818152600b60205260408082206201518042019055517fb888c73f8596c5d056c9c67c35e5ed784af064b3112cd851b2b860f9c2b6ccc99190a250505050565b610f73610c37565b6001600160a01b0316336001600160a01b031614610fc6576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b610fd8836001600160a01b0316611e2c565b611021576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6001600160a01b0391821660009081526004602090815260408083209385168352929052208054919092166001600160a01b0319909116179055565b606481565b6000546001600160a01b031690565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61109f610c37565b6001600160a01b0316336001600160a01b0316146110f2576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611104826001600160a01b0316611e2c565b61114e576040805162461bcd60e51b8152602060048201526016602482015275149959da5cdd1c9e4e88139bdd0810dbdb9d1c9858dd60521b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6001600160a01b038216600090815260086020526040812061119b9083611e32565b9392505050565b6101f481565b6111b0610c37565b6001600160a01b0316336001600160a01b031614611203576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b816001600160a01b031663eb0dff66826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b505050505050565b60035481565b61127c610c37565b6001600160a01b0316336001600160a01b0316146112cf576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b6112d881611e2c565b611329576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03831617905561134c610c37565b6001600160a01b0316336001600160a01b0316146113b1576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6113bc610c37565b6001600160a01b0316336001600160a01b03161461140f576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611421826001600160a01b0316611e2c565b801561143a575061143a836001600160a01b0316611e2c565b611483576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604081206114a59084611e3e565b905081151581151514156114f5576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204e6f204368616e676560701b604482015290519081900360640190fd5b801561152d5761150584846111a8565b6001600160a01b03841660009081526008602052604090206115279084612047565b50611551565b6001600160a01b038416600090815260086020526040902061154f908461205c565b505b50505050565b6001600160a01b038116600090815260086020526040812061062d90611e53565b3332148061159557503360009081526005602052604090205460ff165b6115d4576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b806115e0600682611e3e565b611626576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b038216600090815260086020526040812061164790611e53565b905060008111611697576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204e6f205374726174656769657360501b604482015290519081900360640190fd5b6001600160a01b0383166000908152600b60205260409020544211611703576040805162461bcd60e51b815260206004820152601c60248201527f4d616e616765723a2044656c6179204e6f742053617469736669656400000000604482015290519081900360640190fd5b6001600160a01b03831660009081526009602052604081205460ff168281101561172f57809150611734565b600091505b6001600160a01b03851660009081526008602052604081206117599060ff8516611e32565b9050856001600160a01b031663753842db826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b505050506001600160a01b038681166000818152600960209081526040808320805460ff191660018a0160ff16179055600b909152808220426201518001905551928416927fffdb70e99f7f3262c2641a400deab1ad02aa7c2a59e0be6a116e71867296b20b9190a3505050505050565b600081565b6103e881565b60056020526000908152604090205460ff1681565b611857610c37565b6001600160a01b0316336001600160a01b0316146118aa576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604081206118cb90611e53565b905060005b81811015611963576001600160a01b038316600081815260086020526040902063eb0dff66906119009084611e32565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b5050600190920191506118d09050565b505050565b60006119746006611e53565b905090565b6001600160a01b03166000908152600a602052604090205460ff1690565b333214806119b457503360009081526005602052604090205460ff165b6119f3576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b6001546001600160a01b0382811660008181526004602081815260408084209686168085529682528084205481516370a0823160e01b8152309481019490945290519516949293926370a08231926024808201939291829003018186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d6020811015611a8757600080fd5b50519050611a96828583611f7b565b5060408051636f70e66f60e01b81523060048201526001600160a01b038681166024830152858116604483015260648201849052600160848301529151600092851691636f70e66f9160a480830192602092919082900301818787803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b505050506040513d6020811015611b2957600080fd5b505160408051630852cd8d60e31b81526004810183905290519192506001600160a01b038616916342966c689160248082019260009290919082900301818387803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b5050604080518581526020810185905281516001600160a01b038a1694507f2dcc2439519c7d06fca9f8ae01e07f4f3c6ca21b5cdf8eff42cb75cf34d223c993509081900390910190a25050505050565b6001546001600160a01b031681565b611bf3610c37565b6001600160a01b0316336001600160a01b031614611c46576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611c58826001600160a01b0316611e2c565b611ca1576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6000611cae600684611e3e565b90508115158115151415611cfe576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204e6f204368616e676560701b604482015290519081900360640190fd5b8015611d1e57611d0d8361184f565b611d18600684612047565b50611963565b61155160068461205c565b611d31610c37565b6001600160a01b0316336001600160a01b031614611d84576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b60008111611dd2576040805162461bcd60e51b8152602060048201526016602482015275149959da5cdd1c9e4e88125b9d985b1a59081359db5d60521b604482015290519081900360640190fd5b60648110611e27576040805162461bcd60e51b815260206004820152601760248201527f52656769737472793a204d676d7420546f6f2048696768000000000000000000604482015290519081900360640190fd5b600355565b3b151590565b600061119b8383612071565b600061119b836001600160a01b0384166120d5565b600061062d826120ed565b600082611e6d5750600061062d565b82820282848281611e7a57fe5b041461119b5760405162461bcd60e51b81526004018080602001828103825260218152602001806125836021913960400191505060405180910390fd5b6000808211611f0d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611f1657fe5b049392505050565b600082821115611f75576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600081611f8a5750600061119b565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611fd957600080fd5b505afa158015611fed573d6000803e3d6000fd5b505050506040513d602081101561200357600080fd5b505190508281101561202a576120236001600160a01b03851686836120f1565b905061119b565b61203e6001600160a01b03851686856120f1565b50909392505050565b600061119b836001600160a01b038416612143565b600061119b836001600160a01b038416612209565b815460009082106120b35760405162461bcd60e51b815260040180806020018281038252602281526020018061251b6022913960400191505060405180910390fd5b8260000182815481106120c257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611963908490612253565b600081815260018301602052604081205480156121ff578354600019808301919081019060009087908390811061217657fe5b906000526020600020015490508087600001848154811061219357fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806121c357fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061062d565b600091505061062d565b600061221583836120d5565b61224b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561062d565b50600061062d565b60006122a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123049092919063ffffffff16565b805190915015611963578080602001905160208110156122c757600080fd5b50516119635760405162461bcd60e51b815260040180806020018281038252602a8152602001806125c4602a913960400191505060405180910390fd5b6060612313848460008561231b565b949350505050565b60608247101561235c5760405162461bcd60e51b815260040180806020018281038252602681526020018061253d6026913960400191505060405180910390fd5b61236585611e2c565b6123b6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106123f45780518252601f1990920191602091820191016123d5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612456576040519150601f19603f3d011682016040523d82523d6000602084013e61245b565b606091505b509150915061246b828286612476565b979650505050505050565b6060831561248557508161119b565b8251156124955782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124df5781810151838201526020016124c7565b50505050905090810190601f16801561250c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c537562736372696265723a204f6e6c7920476f7665726e616e63650000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d616e616765723a204f6e6c7920454f41206f722057686974656c69737400005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d2f244323b59f52ea9601a1077777d69d487f0fa5fed8dec423621daae976d2964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c8063a1b827231161011a578063d73792a9116100ad578063f697a0361161007c578063f697a03614610581578063fb3e6f29146105a7578063fc0c546a146105cd578063fd263390146105d5578063fe56e2321461060357610205565b8063d73792a914610511578063d936547e14610519578063eb0dff6614610553578063f01cc0a61461057957610205565b8063aa4fbf4a116100e9578063aa4fbf4a14610485578063b19c0aa3146104bd578063bae7c80d146104e3578063d36b59371461050957610205565b8063a1b8272314610421578063a625403a14610429578063a6f7f5d614610457578063a91ee0dc1461045f57610205565b80635aa6e6751161019d5780637b1039991161016c5780637b10399914610391578063921c86d2146103995780639281aa0b146103c75780639908840c146103895780639f8f3244146103f557610205565b80635aa6e67514610323578063606b473a1461032b5780636ed77343146103515780637140f2e81461038957610205565b80633b2d081c116101d95780633b2d081c146102c05780634567bfba146102c8578063481c6a75146102e557806348930428146102ed57610205565b806285ae2b1461020a5780630666fa47146102435780630e3da0b81461027b57806321c281911461029a575b600080fd5b6102276004803603602081101561022057600080fd5b5035610620565b604080516001600160a01b039092168252519081900360200190f35b6102696004803603602081101561025957600080fd5b50356001600160a01b0316610633565b60408051918252519081900360200190f35b6102986004803603602081101561029157600080fd5b5035610645565b005b610298600480360360208110156102b057600080fd5b50356001600160a01b03166106bb565b610269610978565b610298600480360360208110156102de57600080fd5b503561097e565b610227610a89565b6102986004803603606081101561030357600080fd5b506001600160a01b03813581169160208101359091169060400135610afc565b610227610c37565b6102986004803603602081101561034157600080fd5b50356001600160a01b0316610c79565b6102986004803603606081101561036757600080fd5b506001600160a01b038135811691602081013582169160409091013516610f6b565b61026961105d565b610227611062565b610227600480360360408110156103af57600080fd5b506001600160a01b0381358116916020013516611071565b610298600480360360408110156103dd57600080fd5b506001600160a01b0381351690602001351515611097565b6102276004803603604081101561040b57600080fd5b506001600160a01b038135169060200135611179565b6102696111a2565b6102986004803603604081101561043f57600080fd5b506001600160a01b03813581169160200135166111a8565b61026961126e565b6102986004803603602081101561047557600080fd5b50356001600160a01b0316611274565b6102986004803603606081101561049b57600080fd5b506001600160a01b0381358116916020810135909116906040013515156113b4565b610269600480360360208110156104d357600080fd5b50356001600160a01b0316611557565b610298600480360360208110156104f957600080fd5b50356001600160a01b0316611578565b61026961182f565b610269611834565b61053f6004803603602081101561052f57600080fd5b50356001600160a01b031661183a565b604080519115158252519081900360200190f35b6102986004803603602081101561056957600080fd5b50356001600160a01b031661184f565b610269611968565b6102696004803603602081101561059757600080fd5b50356001600160a01b0316611979565b610298600480360360208110156105bd57600080fd5b50356001600160a01b0316611997565b610227611bdc565b610298600480360360408110156105eb57600080fd5b506001600160a01b0381351690602001351515611beb565b6102986004803603602081101561061957600080fd5b5035611d29565b600061062d600683611e32565b92915050565b600b6020526000908152604090205481565b33610651600682611e3e565b610697576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b50336000908152600a60205260409020805460ff191660ff92909216919091179055565b333214806106d857503360009081526005602052604090205460ff165b610717576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b80610723600682611e3e565b610769576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b038216600090815260086020526040812061078a90611e53565b905060005b81811015610822576001600160a01b038416600081815260086020526040902063eb0dff66906107bf9084611e32565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156107fe57600080fd5b505af1158015610812573d6000803e3d6000fd5b50506001909201915061078f9050565b506000836001600160a01b03166359356c5c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d602081101561088857600080fd5b5051905060005b8281101561093d5760008383816108a257fe5b6001600160a01b03881660008181526008602052604090209290910492509063b9b8c246906108d19085611e32565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b50506001909301925061088f915050565b506040516001600160a01b038516907fa61bd16ebda9d1c8ec2a61970b39e6640e55ed8433a22765a1b5217b72c4a81290600090a250505050565b60025481565b610986610c37565b6001600160a01b0316336001600160a01b0316146109d9576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b60648111610a2e576040805162461bcd60e51b815260206004820152601960248201527f52656769737472793a20496e76616c6964204275796261636b00000000000000604482015290519081900360640190fd5b6101f48110610a84576040805162461bcd60e51b815260206004820152601a60248201527f52656769737472793a204275796261636b20546f6f2048696768000000000000604482015290519081900360640190fd5b600255565b6000610a93611062565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b158015610acb57600080fd5b505afa158015610adf573d6000803e3d6000fd5b505050506040513d6020811015610af557600080fd5b5051905090565b6001600160a01b038316600090815260086020526040902083903390610b229082611e3e565b610b6c576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204f6e6c7920537472617465677960501b604482015290519081900360640190fd5b6000610b8f6103e8610b8960025487611e5e90919063ffffffff16565b90611eb7565b90506000610bae6103e8610b8960035488611e5e90919063ffffffff16565b90506000610bc682610bc08886611f1e565b90611f1e565b9050610bd3328884611f7b565b50610bdf338883611f7b565b506040805182815260208101859052808201849052905133916001600160a01b038b16917faa199a16983a8f166eb461939bd1b0bd1881e692fa38dbb98bd89c856052cd849181900360600190a35050505050505050565b6000610c41611062565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b158015610acb57600080fd5b33321480610c9657503360009081526005602052604090205460ff165b610cd5576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b80610ce1600682611e3e565b610d27576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b0382166000908152600860205260408120610d4890611e53565b905060008111610d98576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204e6f205374726174656769657360501b604482015290519081900360640190fd5b6001600160a01b0383166000908152600b60205260409020544211610e04576040805162461bcd60e51b815260206004820152601c60248201527f4d616e616765723a2044656c6179204e6f742053617469736669656400000000604482015290519081900360640190fd5b6000836001600160a01b03166359356c5c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3f57600080fd5b505afa158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b5051905060005b82811015610f1e576000838381610e8357fe5b6001600160a01b03881660008181526008602052604090209290910492509063b9b8c24690610eb29085611e32565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b505060019093019250610e70915050565b506001600160a01b0384166000818152600b60205260408082206201518042019055517fb888c73f8596c5d056c9c67c35e5ed784af064b3112cd851b2b860f9c2b6ccc99190a250505050565b610f73610c37565b6001600160a01b0316336001600160a01b031614610fc6576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b610fd8836001600160a01b0316611e2c565b611021576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6001600160a01b0391821660009081526004602090815260408083209385168352929052208054919092166001600160a01b0319909116179055565b606481565b6000546001600160a01b031690565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b61109f610c37565b6001600160a01b0316336001600160a01b0316146110f2576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611104826001600160a01b0316611e2c565b61114e576040805162461bcd60e51b8152602060048201526016602482015275149959da5cdd1c9e4e88139bdd0810dbdb9d1c9858dd60521b604482015290519081900360640190fd5b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6001600160a01b038216600090815260086020526040812061119b9083611e32565b9392505050565b6101f481565b6111b0610c37565b6001600160a01b0316336001600160a01b031614611203576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b816001600160a01b031663eb0dff66826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561125257600080fd5b505af1158015611266573d6000803e3d6000fd5b505050505050565b60035481565b61127c610c37565b6001600160a01b0316336001600160a01b0316146112cf576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b6112d881611e2c565b611329576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b03831617905561134c610c37565b6001600160a01b0316336001600160a01b0316146113b1576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b6113bc610c37565b6001600160a01b0316336001600160a01b03161461140f576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611421826001600160a01b0316611e2c565b801561143a575061143a836001600160a01b0316611e2c565b611483576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604081206114a59084611e3e565b905081151581151514156114f5576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204e6f204368616e676560701b604482015290519081900360640190fd5b801561152d5761150584846111a8565b6001600160a01b03841660009081526008602052604090206115279084612047565b50611551565b6001600160a01b038416600090815260086020526040902061154f908461205c565b505b50505050565b6001600160a01b038116600090815260086020526040812061062d90611e53565b3332148061159557503360009081526005602052604090205460ff165b6115d4576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b806115e0600682611e3e565b611626576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204f6e6c792042616e6b60701b604482015290519081900360640190fd5b6001600160a01b038216600090815260086020526040812061164790611e53565b905060008111611697576040805162461bcd60e51b81526020600482015260166024820152754d616e616765723a204e6f205374726174656769657360501b604482015290519081900360640190fd5b6001600160a01b0383166000908152600b60205260409020544211611703576040805162461bcd60e51b815260206004820152601c60248201527f4d616e616765723a2044656c6179204e6f742053617469736669656400000000604482015290519081900360640190fd5b6001600160a01b03831660009081526009602052604081205460ff168281101561172f57809150611734565b600091505b6001600160a01b03851660009081526008602052604081206117599060ff8516611e32565b9050856001600160a01b031663753842db826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b505050506001600160a01b038681166000818152600960209081526040808320805460ff191660018a0160ff16179055600b909152808220426201518001905551928416927fffdb70e99f7f3262c2641a400deab1ad02aa7c2a59e0be6a116e71867296b20b9190a3505050505050565b600081565b6103e881565b60056020526000908152604090205460ff1681565b611857610c37565b6001600160a01b0316336001600160a01b0316146118aa576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604081206118cb90611e53565b905060005b81811015611963576001600160a01b038316600081815260086020526040902063eb0dff66906119009084611e32565b6040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b5050600190920191506118d09050565b505050565b60006119746006611e53565b905090565b6001600160a01b03166000908152600a602052604090205460ff1690565b333214806119b457503360009081526005602052604090205460ff165b6119f3576040805162461bcd60e51b815260206004820152601e60248201526000805160206125a4833981519152604482015290519081900360640190fd5b6001546001600160a01b0382811660008181526004602081815260408084209686168085529682528084205481516370a0823160e01b8152309481019490945290519516949293926370a08231926024808201939291829003018186803b158015611a5d57600080fd5b505afa158015611a71573d6000803e3d6000fd5b505050506040513d6020811015611a8757600080fd5b50519050611a96828583611f7b565b5060408051636f70e66f60e01b81523060048201526001600160a01b038681166024830152858116604483015260648201849052600160848301529151600092851691636f70e66f9160a480830192602092919082900301818787803b158015611aff57600080fd5b505af1158015611b13573d6000803e3d6000fd5b505050506040513d6020811015611b2957600080fd5b505160408051630852cd8d60e31b81526004810183905290519192506001600160a01b038616916342966c689160248082019260009290919082900301818387803b158015611b7757600080fd5b505af1158015611b8b573d6000803e3d6000fd5b5050604080518581526020810185905281516001600160a01b038a1694507f2dcc2439519c7d06fca9f8ae01e07f4f3c6ca21b5cdf8eff42cb75cf34d223c993509081900390910190a25050505050565b6001546001600160a01b031681565b611bf3610c37565b6001600160a01b0316336001600160a01b031614611c46576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b611c58826001600160a01b0316611e2c565b611ca1576040805162461bcd60e51b815260206004820152601560248201527413585b9859d95c8e88139bdd0810dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b6000611cae600684611e3e565b90508115158115151415611cfe576040805162461bcd60e51b81526020600482015260126024820152714d616e616765723a204e6f204368616e676560701b604482015290519081900360640190fd5b8015611d1e57611d0d8361184f565b611d18600684612047565b50611963565b61155160068461205c565b611d31610c37565b6001600160a01b0316336001600160a01b031614611d84576040805162461bcd60e51b815260206004820152601b6024820152600080516020612563833981519152604482015290519081900360640190fd5b60008111611dd2576040805162461bcd60e51b8152602060048201526016602482015275149959da5cdd1c9e4e88125b9d985b1a59081359db5d60521b604482015290519081900360640190fd5b60648110611e27576040805162461bcd60e51b815260206004820152601760248201527f52656769737472793a204d676d7420546f6f2048696768000000000000000000604482015290519081900360640190fd5b600355565b3b151590565b600061119b8383612071565b600061119b836001600160a01b0384166120d5565b600061062d826120ed565b600082611e6d5750600061062d565b82820282848281611e7a57fe5b041461119b5760405162461bcd60e51b81526004018080602001828103825260218152602001806125836021913960400191505060405180910390fd5b6000808211611f0d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611f1657fe5b049392505050565b600082821115611f75576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600081611f8a5750600061119b565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611fd957600080fd5b505afa158015611fed573d6000803e3d6000fd5b505050506040513d602081101561200357600080fd5b505190508281101561202a576120236001600160a01b03851686836120f1565b905061119b565b61203e6001600160a01b03851686856120f1565b50909392505050565b600061119b836001600160a01b038416612143565b600061119b836001600160a01b038416612209565b815460009082106120b35760405162461bcd60e51b815260040180806020018281038252602281526020018061251b6022913960400191505060405180910390fd5b8260000182815481106120c257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611963908490612253565b600081815260018301602052604081205480156121ff578354600019808301919081019060009087908390811061217657fe5b906000526020600020015490508087600001848154811061219357fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806121c357fe5b6001900381819060005260206000200160009055905586600101600087815260200190815260200160002060009055600194505050505061062d565b600091505061062d565b600061221583836120d5565b61224b5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561062d565b50600061062d565b60006122a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123049092919063ffffffff16565b805190915015611963578080602001905160208110156122c757600080fd5b50516119635760405162461bcd60e51b815260040180806020018281038252602a8152602001806125c4602a913960400191505060405180910390fd5b6060612313848460008561231b565b949350505050565b60608247101561235c5760405162461bcd60e51b815260040180806020018281038252602681526020018061253d6026913960400191505060405180910390fd5b61236585611e2c565b6123b6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106123f45780518252601f1990920191602091820191016123d5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612456576040519150601f19603f3d011682016040523d82523d6000602084013e61245b565b606091505b509150915061246b828286612476565b979650505050505050565b6060831561248557508161119b565b8251156124955782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124df5781810151838201526020016124c7565b50505050905090810190601f16801561250c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c537562736372696265723a204f6e6c7920476f7665726e616e63650000000000536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774d616e616765723a204f6e6c7920454f41206f722057686974656c69737400005361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d2f244323b59f52ea9601a1077777d69d487f0fa5fed8dec423621daae976d2964736f6c63430007060033",
  "devdoc": {
    "details": "This contract is used as the main control point for executing strategies",
    "kind": "dev",
    "methods": {
      "accrueRevenue(address,address,uint256)": {
        "details": "Only callable by approved Strategies",
        "params": {
          "amount": "The total amount of profit received from liquidation",
          "bank": "The address of the Bank which uses the Strategy"
        }
      },
      "buyback(address)": {
        "details": "Burns all proceeds",
        "params": {
          "from": "The address of the token to liquidate for Oh! Tokens"
        }
      },
      "constructor": {
        "details": "Sets initial buyback and management fee parameters",
        "params": {
          "registry_": "The address of the registry",
          "token_": "The address of the Oh! Token"
        }
      },
      "exit(address,address)": {
        "params": {
          "bank": "The bank that will be used to exit the strategy",
          "strategy": "The strategy to be exited"
        }
      },
      "exitAll(address)": {
        "params": {
          "bank": "The bank that will be used to exit the strategy"
        }
      },
      "finance(address)": {
        "details": "Only allow this function to be called on approved Banks",
        "params": {
          "bank": "The address of the Bank to finance"
        }
      },
      "financeAll(address)": {
        "details": "Deposit queue not needed here as all Strategies are equally invested inOnly allow this function to be called on approved Banks",
        "params": {
          "bank": "The address of the Bank to finance"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "rebalance(address)": {
        "params": {
          "bank": "The bank to rebalance"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "setBank(address,bool)": {
        "details": "Only Governance can call this function",
        "params": {
          "_approved": "the approval status of the bank",
          "_bank": "the bank to be approved/unapproved"
        }
      },
      "setBuybackFee(uint256)": {
        "details": "Only Governance; base 1000, 1% = 10",
        "params": {
          "_buybackFee": "The new buyback fee"
        }
      },
      "setLiquidator(address,address,address)": {
        "details": "Only Governance can call this function",
        "params": {
          "_from": "the token we have to liquidate",
          "_liquidator": "the liquidator contract",
          "_to": "the token we want to receive"
        }
      },
      "setManagementFee(uint256)": {
        "details": "Only Governance; base 1000, 1% = 10",
        "params": {
          "_managementFee": "The new management fee"
        }
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "setStrategy(address,address,bool)": {
        "details": "Only Governance can call this function",
        "params": {
          "_approved": "the approval status of the Strategy",
          "_bank": "the bank which uses the strategy",
          "_strategy": "the strategy to be approved/unapproved"
        }
      },
      "setWhitelisted(address,bool)": {
        "details": "Only Governance can call this function",
        "params": {
          "_contract": "the strategy contract",
          "_whitelisted": "the whitelisted status of the strategy"
        }
      },
      "setWithdrawIndex(uint256)": {
        "params": {
          "i": "The "
        }
      },
      "strategies(address,uint256)": {
        "params": {
          "bank": "The address of the Bank that contains the Strategy",
          "i": "The Bank queue index to check"
        }
      },
      "totalStrategies(address)": {
        "params": {
          "bank": "The Bank we are checking"
        },
        "returns": {
          "_0": "Amount of active strategies"
        }
      },
      "withdrawIndex(address)": {
        "params": {
          "bank": "The Bank to check the next Strategy for"
        },
        "returns": {
          "_0": "The index of the Strategy"
        }
      }
    },
    "stateVariables": {
      "_banks": {
        "details": "The set of Banks approved for investing"
      },
      "_depositQueue": {
        "details": "The mapping of Banks to next Strategy index it will deposit to"
      },
      "_strategies": {
        "details": "The mapping of Banks to active Strategies"
      },
      "_withdrawQueue": {
        "details": "The mapping of Banks to next Strategy index it will withdraw from"
      },
      "delays": {
        "details": "The mapping of Banks to delay status"
      }
    },
    "title": "Oh! Finance Manager",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueRevenue(address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when a Bank realizes profit via liquidation "
      },
      "Buyback(address,uint256,uint256)": {
        "notice": "Emitted when a buyback is performed with an amount of from tokens"
      },
      "Finance(address,address)": {
        "notice": "Emitted when a Bank's capital is invested in a single Strategy "
      },
      "FinanceAll(address)": {
        "notice": "Emitted when a Bank's capital is invested in all Strategies"
      },
      "Rebalance(address)": {
        "notice": "Emitted when a Bank's capital is rebalanced"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_DENOMINATOR()": {
        "notice": "Denominator for calculating protocol fees"
      },
      "MAX_BUYBACK_FEE()": {
        "notice": "Maximum buyback fee, 50%"
      },
      "MAX_MANAGEMENT_FEE()": {
        "notice": "Maximum management fee, 10%"
      },
      "MIN_BUYBACK_FEE()": {
        "notice": "Minimum buyback fee, 10%"
      },
      "MIN_MANAGEMENT_FEE()": {
        "notice": "Minimum management fee, 0%"
      },
      "accrueRevenue(address,address,uint256)": {
        "notice": "Accrue revenue from a Strategy"
      },
      "banks(uint256)": {
        "notice": "Get the Bank"
      },
      "buyback(address)": {
        "notice": "Perform a token buyback with accrued revenue"
      },
      "buybackFee()": {
        "notice": "The amount of profits reserved for protocol buybacks, base 1000"
      },
      "constructor": {
        "notice": "Deploy the Manager with the Registry reference"
      },
      "exit(address,address)": {
        "notice": "Exit a given strategy for a given bank"
      },
      "exitAll(address)": {
        "notice": "Exit from all strategies for a given bank"
      },
      "finance(address)": {
        "notice": "Finance the next Strategy in the Bank queue with all available underlying"
      },
      "financeAll(address)": {
        "notice": "Evenly finance underlying to all strategies"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "liquidators(address,address)": {
        "notice": "The mapping of `from` token to `to` token to liquidator contract"
      },
      "managementFee()": {
        "notice": "The amount of profits reserved for fund management, base 1000"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "rebalance(address)": {
        "notice": "Rebalance Bank exposure by withdrawing all, then evenly distributing underlying to all strategies"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "setBank(address,bool)": {
        "notice": "Adds or removes a Bank for investment"
      },
      "setBuybackFee(uint256)": {
        "notice": "Sets the protocol buyback percentage (Profit Share)"
      },
      "setLiquidator(address,address,address)": {
        "notice": "Sets the Liquidator contract for a given token"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the protocol management fee percentage"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "setStrategy(address,address,bool)": {
        "notice": "Adds or removes a Strategy for a given Bank"
      },
      "setWhitelisted(address,bool)": {
        "notice": "Whitelists strategy for Bank use/management"
      },
      "setWithdrawIndex(uint256)": {
        "notice": "Set the withdrawal index"
      },
      "strategies(address,uint256)": {
        "notice": "Get the Strategy at a given index for a given Bank"
      },
      "token()": {
        "notice": "The address of the Oh! Finance Token"
      },
      "totalStrategies(address)": {
        "notice": "Get total number of strategies for a given bank"
      },
      "whitelisted(address)": {
        "notice": "The mapping of contracts that are whitelisted for Bank use/management"
      },
      "withdrawIndex(address)": {
        "notice": "Get the index of the Strategy to withdraw from for a given Bank"
      }
    },
    "notice": "The Manager contains references to all active banks, strategies, and liquidation contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12083,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10752,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10756,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "buybackFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10760,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "managementFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10768,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "liquidators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 10774,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "whitelisted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10777,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "_banks",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)4311_storage"
      },
      {
        "astId": 10782,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "_strategies",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(AddressSet)4311_storage)"
      },
      {
        "astId": 10787,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "_depositQueue",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 10792,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "_withdrawQueue",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 10797,
        "contract": "contracts/manager/OhManager.sol:OhManager",
        "label": "delays",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_struct(AddressSet)4311_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4311_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4311_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4310,
            "contract": "contracts/manager/OhManager.sol:OhManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4046_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4046_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4041,
            "contract": "contracts/manager/OhManager.sol:OhManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4045,
            "contract": "contracts/manager/OhManager.sol:OhManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}