{
  "address": "0xEE858AAa2Aff2d378A82865026Ba032f0e095c7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_votingDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_proposalThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OPERATIONS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUORUM_VOTES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "abdicate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "emergencyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPauseAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "executeSetGovernorPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct OhForumTypes.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "cancelled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "queueSetGovernorPendingAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProposalThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_votingDelay",
          "type": "uint256"
        }
      ],
      "name": "setVotingDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum OhForumTypes.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa0df391e77de184b9e608a89e1e5909a3424c0996a34b9c9e44a3feb5fb7830",
  "receipt": {
    "to": null,
    "from": "0x123456D302B690f8525B4BAC5681101d706e850e",
    "contractAddress": "0xEE858AAa2Aff2d378A82865026Ba032f0e095c7d",
    "transactionIndex": 2,
    "gasUsed": "3309596",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa037c9ca72479775e7b7419b64fb733eba80c27b5c432d6dfdae5db1b8b2bcd2",
    "transactionHash": "0xaa0df391e77de184b9e608a89e1e5909a3424c0996a34b9c9e44a3feb5fb7830",
    "logs": [],
    "blockNumber": 26686263,
    "cumulativeGasUsed": "3372697",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2bA8E99Fedc439da742F023D43b224E3d28eDf5e",
    "0x6b461A994d76d8248a6B439D4a19cDfd821409eE",
    1,
    17280,
    "1000000000000000000000000"
  ],
  "solcInputHash": "d58997e03a516940f0827c0bee3c7f29",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_proposalThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OPERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM_VOTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abdicate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"executeSetGovernorPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"internalType\":\"struct OhForumTypes.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"queueSetGovernorPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum OhForumTypes.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Proposer-Executor Relationship to execute protocol changes\",\"kind\":\"dev\",\"methods\":{\"castVote(uint256,bool)\":{\"params\":{\"proposalId\":\"The id of the Proposal to vote on\",\"support\":\"The boolean representing whether the user supports or rejects the Proposal\"}},\"getActions(uint256)\":{\"params\":{\"proposalId\":\"The id of the Proposal to get actions from\"}},\"getReceipt(uint256,address)\":{\"params\":{\"proposalId\":\"The id of the Proposal to get the Receipt from\",\"voter\":\"The address of the Voter to check\"}},\"governance()\":{\"returns\":{\"_0\":\"The current Governance address\"}},\"manager()\":{\"returns\":{\"_0\":\"The current Manager address\"}},\"registry()\":{\"returns\":{\"_0\":\"The current Registry address\"}},\"setRegistry(address)\":{\"details\":\"Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used\",\"params\":{\"registry_\":\"The new registry\"}},\"state(uint256)\":{\"params\":{\"proposalId\":\"The id of the Proposal to check\"}}},\"title\":\"Oh! Finance Forum\",\"version\":1},\"userdoc\":{\"events\":{\"ProposalAdded(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"notice\":\"An event emitted when a new proposal is created\"},\"ProposalCancelled(uint256)\":{\"notice\":\"An event emitted when a proposal has been canceled\"},\"ProposalExecuted(uint256)\":{\"notice\":\"An event emitted when a proposal has been executed in the Timelock\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"An event emitted when a proposal has been queued in the Timelock\"},\"VoteCast(address,uint256,bool,uint256)\":{\"notice\":\"An event emitted when a vote has been cast on a proposal\"}},\"kind\":\"user\",\"methods\":{\"BALLOT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the ballot struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"MAX_OPERATIONS()\":{\"notice\":\"The maximum number of actions that can be included in a proposal\"},\"MAX_PROPOSAL_THRESHOLD()\":{\"notice\":\"The maximum setable proposal threshold\"},\"MAX_VOTING_DELAY()\":{\"notice\":\"The max setable voting delay\"},\"MAX_VOTING_PERIOD()\":{\"notice\":\"The max setable voting period\"},\"MIN_PROPOSAL_THRESHOLD()\":{\"notice\":\"The minimum setable proposal threshold\"},\"MIN_VOTING_DELAY()\":{\"notice\":\"The min setable voting delay\"},\"MIN_VOTING_PERIOD()\":{\"notice\":\"The minimum setable voting period\"},\"QUORUM_VOTES()\":{\"notice\":\"The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\"},\"abdicate()\":{\"notice\":\"Abdicate Guardian rights when protocol has suffiently matured\"},\"acceptAdmin()\":{\"notice\":\"Allow Guardian to accept admin rights after setting pending admin\"},\"castVote(uint256,bool)\":{\"notice\":\"Cast a vote for a given Proposal\"},\"executeSetGovernorPendingAdmin(address,uint256)\":{\"notice\":\"Allow Guardian to set the pending admin once delay has expired\"},\"getActions(uint256)\":{\"notice\":\"Get the actions for a given Proposal\"},\"getReceipt(uint256,address)\":{\"notice\":\"Get the voting receipt for a given Voter for a given Proposal\"},\"governance()\":{\"notice\":\"Get the Governance address\"},\"guardian()\":{\"notice\":\"The address of Oh! Finance Protocol Guardian\"},\"latestProposalIds(address)\":{\"notice\":\"The latest proposal for each proposer\"},\"manager()\":{\"notice\":\"Get the Manager address\"},\"name()\":{\"notice\":\"Contract Name\"},\"proposalCount()\":{\"notice\":\"The total number of proposals\"},\"proposalThreshold()\":{\"notice\":\"The number of votes required in order for a voter to become a proposer\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed\"},\"queueSetGovernorPendingAdmin(address,uint256)\":{\"notice\":\"Allow Guardian to queue transaction to accept admin rights with delay\"},\"receipts(uint256,address)\":{\"notice\":\"Mapping of proposal to receipts of ballots for the entire set of voters\"},\"registry()\":{\"notice\":\"Get the Registry address\"},\"setRegistry(address)\":{\"notice\":\"Set the Registry for the contract. Only callable by Governance.\"},\"state(uint256)\":{\"notice\":\"Get the current state of a given Proposal\"},\"token()\":{\"notice\":\"The address of the Oh! Finance Token\"},\"votingDelay()\":{\"notice\":\"The delay before voting on a proposal may take place, once proposed, in blocks\"},\"votingPeriod()\":{\"notice\":\"The duration of voting on a proposal, in blocks\"}},\"notice\":\"Manages Protocol proposals and voting receipts to send to the Governor\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/OhForum.sol\":\"OhForum\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/governance/OhForum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {IForum} from \\\"../interfaces/IForum.sol\\\";\\r\\nimport {IGovernor} from \\\"../interfaces/IGovernor.sol\\\";\\r\\nimport {IManager} from \\\"../interfaces/IManager.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\nimport {IToken} from \\\"../interfaces/IToken.sol\\\";\\r\\nimport {OhSubscriber} from \\\"../registry/OhSubscriber.sol\\\";\\r\\nimport {OhForumTypes} from \\\"./OhForumTypes.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Forum\\r\\n/// @notice Manages Protocol proposals and voting receipts to send to the Governor\\r\\n/// @dev Proposer-Executor Relationship to execute protocol changes\\r\\ncontract OhForum is OhSubscriber, OhForumTypes, IForum {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @notice Contract Name\\r\\n    string public constant name = \\\"Oh! Forum\\\";\\r\\n\\r\\n    /// @notice The maximum number of actions that can be included in a proposal\\r\\n    uint256 public constant MAX_OPERATIONS = 10;\\r\\n\\r\\n    /// @notice The minimum setable proposal threshold\\r\\n    uint256 public constant MIN_PROPOSAL_THRESHOLD = 500000e18; // 500,000 = 0.5%\\r\\n\\r\\n    /// @notice The maximum setable proposal threshold\\r\\n    uint256 public constant MAX_PROPOSAL_THRESHOLD = 5000000e18; // 5,000,000 = 5%\\r\\n\\r\\n    /// @notice The minimum setable voting period\\r\\n    uint256 public constant MIN_VOTING_PERIOD = 5760; // About 24 hours\\r\\n\\r\\n    /// @notice The max setable voting period\\r\\n    uint256 public constant MAX_VOTING_PERIOD = 80640; // About 2 weeks\\r\\n\\r\\n    /// @notice The min setable voting delay\\r\\n    uint256 public constant MIN_VOTING_DELAY = 1;\\r\\n\\r\\n    /// @notice The max setable voting delay\\r\\n    uint256 public constant MAX_VOTING_DELAY = 40320; // About 1 week\\r\\n\\r\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\r\\n    uint256 public constant QUORUM_VOTES = 4000000e18; // 4,000,000 = 4%\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\r\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\r\\n\\r\\n    /// @notice The address of Oh! Finance Protocol Guardian\\r\\n    address public guardian;\\r\\n\\r\\n    /// @notice The address of the Oh! Finance Token\\r\\n    address public token;\\r\\n\\r\\n    /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\r\\n    uint256 public votingDelay;\\r\\n\\r\\n    /// @notice The duration of voting on a proposal, in blocks\\r\\n    uint256 public votingPeriod;\\r\\n\\r\\n    /// @notice The number of votes required in order for a voter to become a proposer\\r\\n    uint256 public proposalThreshold;\\r\\n\\r\\n    /// @notice The total number of proposals\\r\\n    uint256 public proposalCount;\\r\\n\\r\\n    /// @notice The official record of all proposals ever proposed\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    /// @notice Mapping of proposal to receipts of ballots for the entire set of voters\\r\\n    mapping(uint256 => mapping(address => Receipt)) public receipts;\\r\\n\\r\\n    /// @notice The latest proposal for each proposer\\r\\n    mapping(address => uint256) public latestProposalIds;\\r\\n\\r\\n    /// @notice An event emitted when a new proposal is created\\r\\n    event ProposalAdded(\\r\\n        uint256 id,\\r\\n        address proposer,\\r\\n        address[] targets,\\r\\n        uint256[] values,\\r\\n        string[] signatures,\\r\\n        bytes[] calldatas,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        string description\\r\\n    );\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been canceled\\r\\n    event ProposalCancelled(uint256 id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\r\\n    event ProposalExecuted(uint256 id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\r\\n    event ProposalQueued(uint256 id, uint256 eta);\\r\\n\\r\\n    /// @notice An event emitted when a vote has been cast on a proposal\\r\\n    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\\r\\n\\r\\n    /// @notice Only allow guardian to execute function\\r\\n    modifier onlyGuardian {\\r\\n        require(msg.sender == guardian, \\\"Forum: Only Guardian\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address registry_,\\r\\n        address _token,\\r\\n        uint256 _votingDelay,\\r\\n        uint256 _votingPeriod,\\r\\n        uint256 _proposalThreshold\\r\\n    ) OhSubscriber(registry_) {\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes(\\\"1\\\")), getChainId(), address(this))\\r\\n        );\\r\\n\\r\\n        guardian = msg.sender;\\r\\n        token = _token;\\r\\n        votingDelay = _votingDelay;\\r\\n        votingPeriod = _votingPeriod;\\r\\n        proposalThreshold = _proposalThreshold;\\r\\n    }\\r\\n\\r\\n    /// @notice Cast a vote for a given Proposal\\r\\n    /// @param proposalId The id of the Proposal to vote on\\r\\n    /// @param support The boolean representing whether the user supports or rejects the Proposal\\r\\n    function castVote(uint256 proposalId, bool support) external {\\r\\n        return _castVote(msg.sender, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function castVoteBySig(\\r\\n        uint256 proposalId,\\r\\n        bool support,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external {\\r\\n        bytes32 digest =\\r\\n            keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))));\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"Forum: Invalid Signature\\\");\\r\\n        return _castVote(signatory, proposalId, support);\\r\\n    }\\r\\n\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        string[] memory signatures,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description\\r\\n    ) external returns (uint256) {\\r\\n        require(IToken(token).getPriorVotes(msg.sender, block.number.sub(1)) > proposalThreshold, \\\"Forum: Votes Below Threshold\\\");\\r\\n        require(\\r\\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\\r\\n            \\\"Forum: Arity Mismatch\\\"\\r\\n        );\\r\\n        require(targets.length != 0, \\\"Forum: No Actions\\\");\\r\\n        require(targets.length <= MAX_OPERATIONS, \\\"Forum: Too Many Actions\\\");\\r\\n\\r\\n        uint256 latestProposalId = latestProposalIds[msg.sender];\\r\\n        if (latestProposalId != 0) {\\r\\n            ProposalState latestProposalState = state(latestProposalId);\\r\\n            require(latestProposalState != ProposalState.Active, \\\"Forum: Proposal Already Active\\\");\\r\\n            require(latestProposalState != ProposalState.Pending, \\\"Forum: Proposal Already Pending\\\");\\r\\n        }\\r\\n\\r\\n        uint256 startBlock = block.number.add(votingDelay);\\r\\n        uint256 endBlock = startBlock.add(votingPeriod);\\r\\n\\r\\n        proposalCount++;\\r\\n        Proposal memory newProposal =\\r\\n            Proposal({\\r\\n                id: proposalCount,\\r\\n                proposer: msg.sender,\\r\\n                eta: 0,\\r\\n                targets: targets,\\r\\n                values: values,\\r\\n                signatures: signatures,\\r\\n                calldatas: calldatas,\\r\\n                startBlock: startBlock,\\r\\n                endBlock: endBlock,\\r\\n                forVotes: 0,\\r\\n                againstVotes: 0,\\r\\n                cancelled: false,\\r\\n                executed: false\\r\\n            });\\r\\n\\r\\n        proposals[newProposal.id] = newProposal;\\r\\n        latestProposalIds[newProposal.proposer] = newProposal.id;\\r\\n\\r\\n        emit ProposalAdded(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\\r\\n        return newProposal.id;\\r\\n    }\\r\\n\\r\\n    function queue(uint256 proposalId) external {\\r\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Forum: Only Successful Proposals\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        uint256 eta = block.timestamp.add(IGovernor(governance()).delay());\\r\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\r\\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\r\\n        }\\r\\n        proposal.eta = eta;\\r\\n        emit ProposalQueued(proposalId, eta);\\r\\n    }\\r\\n\\r\\n    function execute(uint256 proposalId) external payable {\\r\\n        require(state(proposalId) == ProposalState.Queued, \\\"Forum: Must Be Queued\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.executed = true;\\r\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\r\\n            IGovernor(governance()).executeTransaction{value: proposal.values[i]}(\\r\\n                proposal.targets[i],\\r\\n                proposal.values[i],\\r\\n                proposal.signatures[i],\\r\\n                proposal.calldatas[i],\\r\\n                proposal.eta\\r\\n            );\\r\\n        }\\r\\n        emit ProposalExecuted(proposalId);\\r\\n    }\\r\\n\\r\\n    function cancel(uint256 proposalId) external {\\r\\n        require(state(proposalId) != ProposalState.Executed, \\\"Forum: Proposal Already Executed\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(\\r\\n            msg.sender == guardian ||\\r\\n                msg.sender == proposal.proposer ||\\r\\n                IToken(token).getPriorVotes(proposal.proposer, block.number.sub(1)) < proposalThreshold,\\r\\n            \\\"Forum: Valid Proposer\\\"\\r\\n        );\\r\\n\\r\\n        proposal.cancelled = true;\\r\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\r\\n            IGovernor(governance()).cancelTransaction(\\r\\n                proposal.targets[i],\\r\\n                proposal.values[i],\\r\\n                proposal.signatures[i],\\r\\n                proposal.calldatas[i],\\r\\n                proposal.eta\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ProposalCancelled(proposalId);\\r\\n    }\\r\\n\\r\\n    function setProposalThreshold(uint256 _proposalThreshold) external onlyGovernance {\\r\\n        require(_proposalThreshold >= MIN_PROPOSAL_THRESHOLD, \\\"Forum: Threshold Too Low\\\");\\r\\n        require(_proposalThreshold <= MAX_PROPOSAL_THRESHOLD, \\\"Forum: Threshold Too High\\\");\\r\\n        proposalThreshold = _proposalThreshold;\\r\\n    }\\r\\n\\r\\n    function setVotingDelay(uint256 _votingDelay) external onlyGovernance {\\r\\n        require(_votingDelay >= MIN_VOTING_DELAY, \\\"Forum: Delay Too Low\\\");\\r\\n        require(_votingDelay <= MAX_VOTING_DELAY, \\\"Forum: Delay Too High\\\");\\r\\n        votingDelay = _votingDelay;\\r\\n    }\\r\\n\\r\\n    function setVotingPeriod(uint256 _votingPeriod) external onlyGovernance {\\r\\n        require(_votingPeriod >= MIN_VOTING_PERIOD, \\\"Forum: Period Too Low\\\");\\r\\n        require(_votingPeriod <= MAX_VOTING_PERIOD, \\\"Forum: Period Too High\\\");\\r\\n        votingPeriod = _votingPeriod;\\r\\n    }\\r\\n\\r\\n    function emergencyPause(address bank) external onlyGuardian {\\r\\n        IGovernor(governance()).executeEmergencyPause(bank);\\r\\n    }\\r\\n\\r\\n    function emergencyPauseAll() external onlyGuardian {\\r\\n        address manager = manager();\\r\\n        address governance = governance();\\r\\n\\r\\n        uint256 length = IManager(manager).totalBanks();\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            address bank = IManager(manager).banks(i);\\r\\n            IGovernor(governance).executeEmergencyPause(bank);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pause(address bank) external onlyGuardian {\\r\\n        IGovernor(governance()).executePause(bank);\\r\\n    }\\r\\n\\r\\n    function unpause(address bank) external onlyGuardian {\\r\\n        IGovernor(governance()).executeUnpause(bank);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow Guardian to accept admin rights after setting pending admin\\r\\n    function acceptAdmin() external onlyGuardian {\\r\\n        IGovernor(governance()).acceptAdmin();\\r\\n    }\\r\\n\\r\\n    /// @notice Abdicate Guardian rights when protocol has suffiently matured\\r\\n    function abdicate() external onlyGuardian {\\r\\n        guardian = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow Guardian to queue transaction to accept admin rights with delay\\r\\n    function queueSetGovernorPendingAdmin(address newPendingAdmin, uint256 eta) external onlyGuardian {\\r\\n        IGovernor(governance()).queueTransaction(governance(), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\r\\n    }\\r\\n\\r\\n    /// @notice Allow Guardian to set the pending admin once delay has expired\\r\\n    function executeSetGovernorPendingAdmin(address newPendingAdmin, uint256 eta) external onlyGuardian {\\r\\n        IGovernor(governance()).executeTransaction(governance(), 0, \\\"setPendingAdmin(address)\\\", abi.encode(newPendingAdmin), eta);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the actions for a given Proposal\\r\\n    /// @param proposalId The id of the Proposal to get actions from\\r\\n    function getActions(uint256 proposalId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory targets,\\r\\n            uint256[] memory values,\\r\\n            string[] memory signatures,\\r\\n            bytes[] memory calldatas\\r\\n        )\\r\\n    {\\r\\n        Proposal storage p = proposals[proposalId];\\r\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the voting receipt for a given Voter for a given Proposal\\r\\n    /// @param proposalId The id of the Proposal to get the Receipt from\\r\\n    /// @param voter The address of the Voter to check\\r\\n    function getReceipt(uint256 proposalId, address voter) external view returns (Receipt memory) {\\r\\n        return receipts[proposalId][voter];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the current state of a given Proposal\\r\\n    /// @param proposalId The id of the Proposal to check\\r\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\r\\n        require(proposalCount >= proposalId && proposalId > 0, \\\"Forum: Invalid Proposal ID\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        if (proposal.cancelled) {\\r\\n            return ProposalState.Cancelled;\\r\\n        } else if (block.number <= proposal.startBlock) {\\r\\n            return ProposalState.Pending;\\r\\n        } else if (block.number <= proposal.endBlock) {\\r\\n            return ProposalState.Active;\\r\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < QUORUM_VOTES) {\\r\\n            return ProposalState.Defeated;\\r\\n        } else if (proposal.eta == 0) {\\r\\n            return ProposalState.Succeeded;\\r\\n        } else if (proposal.executed) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (block.timestamp >= proposal.eta.add(IGovernor(governance()).GRACE_PERIOD())) {\\r\\n            return ProposalState.Expired;\\r\\n        } else {\\r\\n            return ProposalState.Queued;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _castVote(\\r\\n        address voter,\\r\\n        uint256 proposalId,\\r\\n        bool support\\r\\n    ) internal {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"Forum: Proposal Inactive\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        Receipt storage receipt = receipts[proposalId][voter];\\r\\n        require(receipt.hasVoted == false, \\\"Forum: Already Voted\\\");\\r\\n\\r\\n        uint256 votes = IToken(token).getPriorVotes(voter, proposal.startBlock);\\r\\n        if (support) {\\r\\n            proposal.forVotes = proposal.forVotes.add(votes);\\r\\n        } else {\\r\\n            proposal.againstVotes = proposal.againstVotes.add(votes);\\r\\n        }\\r\\n\\r\\n        receipt.hasVoted = true;\\r\\n        receipt.support = support;\\r\\n        receipt.votes = votes;\\r\\n\\r\\n        emit VoteCast(voter, proposalId, support, votes);\\r\\n    }\\r\\n\\r\\n    function _queueOrRevert(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string memory signature,\\r\\n        bytes memory data,\\r\\n        uint256 eta\\r\\n    ) internal {\\r\\n        require(\\r\\n            !IGovernor(governance()).queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))),\\r\\n            \\\"Forum: Proposal Already Queued\\\"\\r\\n        );\\r\\n        IGovernor(governance()).queueTransaction(target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256 chainId) {\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2a7e4e4ece0fa02eda6655f29fa3a9fc711a12337f79323baa5ea654e1de83c0\",\"license\":\"MIT\"},\"contracts/governance/OhForumTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nabstract contract OhForumTypes {\\r\\n    /// @notice Possible states that a proposal may be in\\r\\n    enum ProposalState {Pending, Active, Cancelled, Defeated, Succeeded, Queued, Expired, Executed}\\r\\n\\r\\n    /// @notice Proposal object used to execute a series of instructions\\r\\n    struct Proposal {\\r\\n        // Unique id for looking up a proposal\\r\\n        uint256 id;\\r\\n        // Creator of the proposal\\r\\n        address proposer;\\r\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\r\\n        uint256 eta;\\r\\n        // the ordered list of target addresses for calls to be made\\r\\n        address[] targets;\\r\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\r\\n        uint256[] values;\\r\\n        // The ordered list of function signatures to be called\\r\\n        string[] signatures;\\r\\n        // The ordered list of calldata to be passed to each call\\r\\n        bytes[] calldatas;\\r\\n        // The block at which voting begins: holders must delegate their votes prior to this block\\r\\n        uint256 startBlock;\\r\\n        // The block at which voting ends: votes must be cast prior to this block\\r\\n        uint256 endBlock;\\r\\n        // Current number of votes in favor of this proposal\\r\\n        uint256 forVotes;\\r\\n        // Current number of votes in opposition to this proposal\\r\\n        uint256 againstVotes;\\r\\n        // Flag marking whether the proposal has been canceled\\r\\n        bool cancelled;\\r\\n        // Flag marking whether the proposal has been executed\\r\\n        bool executed;\\r\\n    }\\r\\n\\r\\n    /// @notice Ballot receipt record for a voter\\r\\n    struct Receipt {\\r\\n        // Whether or not a vote has been cast\\r\\n        bool hasVoted;\\r\\n        // Whether or not the voter supports the proposal\\r\\n        bool support;\\r\\n        // The number of votes the voter had, which were cast\\r\\n        uint256 votes;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x815275a3c49d4c4fc2000f04ebe7a6b8b86e6dfc05a7d222d034c05256c21654\",\"license\":\"MIT\"},\"contracts/interfaces/IForum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IForum {\\r\\n}\\r\\n\",\"keccak256\":\"0xa09b1effa72bc8dba6bda5798dab40216b7e7d2b9ddd40875f7bb95277f6578d\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IGovernor {\\r\\n    function delay() external view returns (uint256);\\r\\n\\r\\n    function GRACE_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function acceptAdmin() external;\\r\\n\\r\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\r\\n\\r\\n    function queueTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function cancelTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external;\\r\\n\\r\\n    function executeTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external payable returns (bytes memory);\\r\\n\\r\\n    function executeEmergencyPause(address bank) external;\\r\\n\\r\\n    function executePause(address bank) external;\\r\\n\\r\\n    function executeUnpause(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x081c240cae9808422f0cbcd6240679ac2b1d402e6285760341e2a44171bfe556\",\"license\":\"MIT\"},\"contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IManager {\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function buybackFee() external view returns (uint256);\\r\\n\\r\\n    function managementFee() external view returns (uint256);\\r\\n\\r\\n    function liquidators(address from, address to) external view returns (address);\\r\\n\\r\\n    function whitelisted(address _contract) external view returns (bool);\\r\\n\\r\\n    function banks(uint256 i) external view returns (address);\\r\\n\\r\\n    function totalBanks() external view returns (uint256);\\r\\n\\r\\n    function strategies(address bank, uint256 i) external view returns (address);\\r\\n\\r\\n    function totalStrategies(address bank) external view returns (uint256);\\r\\n\\r\\n    function withdrawIndex(address bank) external view returns (uint256);\\r\\n\\r\\n    function setWithdrawIndex(uint256 i) external;\\r\\n\\r\\n    function rebalance(address bank) external;\\r\\n\\r\\n    function finance(address bank) external;\\r\\n\\r\\n    function financeAll(address bank) external;\\r\\n\\r\\n    function buyback(address from) external;\\r\\n\\r\\n    function accrueRevenue(\\r\\n        address bank,\\r\\n        address underlying,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function exitAll(address bank) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc0c66419e11208a50a559f26741cba47e8ca11de58bcec2cfb49f89add51b0e4\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IRegistry {\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x0de5594a9448d7ee99418c702cd627b88f4700319d6c8b5810463a5ccdd214d0\",\"license\":\"MIT\"},\"contracts/interfaces/ISubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ISubscriber {\\r\\n    function registry() external view returns (address);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function manager() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf575b8b67d08bf63e597479572fd1b93b64d5b636828859f668bd6c48d404fc\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface IToken {\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegator,\\r\\n        address delegatee,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function mint(address recipient, uint256 amount) external;\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint256);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x0fcb7cd0fca4e8f3b33fd673a91a7bcea47a3639118c8832024594698d788297\",\"license\":\"MIT\"},\"contracts/registry/OhSubscriber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ISubscriber} from \\\"../interfaces/ISubscriber.sol\\\";\\r\\nimport {IRegistry} from \\\"../interfaces/IRegistry.sol\\\";\\r\\n\\r\\n/// @title Oh! Finance Subscriber\\r\\n/// @notice Base Oh! Finance contract used to control access throughout the protocol\\r\\nabstract contract OhSubscriber is ISubscriber {\\r\\n    address internal _registry;\\r\\n\\r\\n    /// @notice Only allow authorized addresses (governance or manager) to execute a function\\r\\n    modifier onlyAuthorized {\\r\\n        require(msg.sender == governance() || msg.sender == manager(), \\\"Subscriber: Only Authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Only allow the governance address to execute a function\\r\\n    modifier onlyGovernance {\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Only Governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Construct contract with the Registry\\r\\n    /// @param registry_ The address of the Registry\\r\\n    constructor(address registry_) {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n        _registry = registry_;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Governance address\\r\\n    /// @return The current Governance address\\r\\n    function governance() public view override returns (address) {\\r\\n        return IRegistry(registry()).governance();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Manager address\\r\\n    /// @return The current Manager address\\r\\n    function manager() public view override returns (address) {\\r\\n        return IRegistry(registry()).manager();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the Registry address\\r\\n    /// @return The current Registry address\\r\\n    function registry() public view override returns (address) {\\r\\n        return _registry;\\r\\n    }\\r\\n\\r\\n    /// @notice Set the Registry for the contract. Only callable by Governance.\\r\\n    /// @param registry_ The new registry\\r\\n    /// @dev Requires sender to be Governance of the new Registry to avoid bricking.\\r\\n    /// @dev Ideally should not be used\\r\\n    function setRegistry(address registry_) external onlyGovernance {\\r\\n        require(Address.isContract(registry_), \\\"Subscriber: Invalid Registry\\\");\\r\\n\\r\\n        _registry = registry_;\\r\\n        require(msg.sender == governance(), \\\"Subscriber: Bad Governance\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0020899072f62d95eafe3202eab714b3c538c0703e952d4a122436f180e00cb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003adb38038062003adb8339810160408190526200003491620001f8565b846200004b81620001d260201b620023491760201c565b6200009d576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b039290921691909117905560408051808201825260098152684f682120466f72756d60b81b602091820152815180830190925260018252603160f81b9101527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f3dca84630c23a10d9c822345822bc489cc2461af81e383b1adb3c8db48148e317fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66200015e620001dc565b30604051602001620001759594939291906200024a565b60408051808303601f19018152919052805160209091012060805260018054336001600160a01b031991821617909155600280549091166001600160a01b0395909516949094179093556003919091556004556005555062000276565b803b15155b919050565b4690565b80516001600160a01b0381168114620001d757600080fd5b600080600080600060a0868803121562000210578081fd5b6200021b86620001e0565b94506200022b60208701620001e0565b6040870151606088015160809098015196999198509695945092505050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6080516138456200029660003980610d6c52806111c652506138456000f3fe6080604052600436106102725760003560e01c80635dc2803a1161014f578063c0903088116100c1578063e23a9a521161007a578063e23a9a52146106d8578063e48083fe14610705578063ea0217cf1461071a578063ece40cc11461073a578063fc0c546a1461075a578063fe0d94c11461076f57610272565b8063c09030881461062e578063cce4f91f1461064e578063da35c6641461066e578063da95691a14610683578063ddf0b009146106a3578063deaaa7cc146106c357610272565b8063791f5d2311610113578063791f5d23146105a55780637b103999146105ba578063a64e024a146105cf578063a91ee0dc146105e4578063b112626314610604578063b58131b01461061957610272565b80635dc2803a1461051b578063671dd275146105305780637041b48a1461054557806370b0f6601461056557806376a67a511461058557610272565b8063328dd982116101e85780634178b249116101ac5780634178b24914610460578063452a93201461048f5780634634c61f146104b1578063481c6a75146104d157806357b001f9146104e65780635aa6e6751461050657610272565b8063328dd982146103b95780633644e515146103e95780633932abb1146103fe5780633e4f49e61461041357806340e58ee51461044057610272565b806315373e3d1161023a57806315373e3d1461032557806317977c611461034557806320606b7014610365578063215809ca1461037a57806325fd935a1461038f578063314e99a2146103a457610272565b8063013cf08b1461027757806302a251a3146102b557806306fdde03146102d75780630775ef0f146102f95780630e18b68114610310575b600080fd5b34801561028357600080fd5b50610297610292366004612d4d565b610782565b6040516102ac999897969594939291906136d6565b60405180910390f35b3480156102c157600080fd5b506102ca6107de565b6040516102ac9190613153565b3480156102e357600080fd5b506102ec6107e4565b6040516102ac91906131a6565b34801561030557600080fd5b5061030e610809565b005b34801561031c57600080fd5b5061030e6109c5565b34801561033157600080fd5b5061030e610340366004612d94565b610a45565b34801561035157600080fd5b506102ca610360366004612b77565b610a54565b34801561037157600080fd5b506102ca610a66565b34801561038657600080fd5b506102ca610a8a565b34801561039b57600080fd5b506102ca610a90565b3480156103b057600080fd5b5061030e610a9f565b3480156103c557600080fd5b506103d96103d4366004612d4d565b610adb565b6040516102ac94939291906130e3565b3480156103f557600080fd5b506102ca610d6a565b34801561040a57600080fd5b506102ca610d8e565b34801561041f57600080fd5b5061043361042e366004612d4d565b610d94565b6040516102ac9190613192565b34801561044c57600080fd5b5061030e61045b366004612d4d565b610f17565b34801561046c57600080fd5b5061048061047b366004612d65565b611182565b6040516102ac9392919061313b565b34801561049b57600080fd5b506104a46111b3565b6040516102ac9190612f9d565b3480156104bd57600080fd5b5061030e6104cc366004612db8565b6111c2565b3480156104dd57600080fd5b506104a46112e8565b3480156104f257600080fd5b5061030e610501366004612b77565b61135b565b34801561051257600080fd5b506104a46113e6565b34801561052757600080fd5b506102ca611428565b34801561053c57600080fd5b506102ca61142d565b34801561055157600080fd5b5061030e610560366004612b77565b61143c565b34801561057157600080fd5b5061030e610580366004612d4d565b611499565b34801561059157600080fd5b5061030e6105a0366004612b77565b61153c565b3480156105b157600080fd5b506102ca611599565b3480156105c657600080fd5b506104a46115a7565b3480156105db57600080fd5b506102ca6115b6565b3480156105f057600080fd5b5061030e6105ff366004612b77565b6115bd565b34801561061057600080fd5b506102ca6116fd565b34801561062557600080fd5b506102ca611703565b34801561063a57600080fd5b5061030e610649366004612baf565b611709565b34801561065a57600080fd5b5061030e610669366004612baf565b6117ea565b34801561067a57600080fd5b506102ca6118ca565b34801561068f57600080fd5b506102ca61069e366004612bda565b6118d0565b3480156106af57600080fd5b5061030e6106be366004612d4d565b611cef565b3480156106cf57600080fd5b506102ca611fa2565b3480156106e457600080fd5b506106f86106f3366004612d65565b611fc6565b6040516102ac9190613619565b34801561071157600080fd5b506102ca612023565b34801561072657600080fd5b5061030e610735366004612d4d565b612028565b34801561074657600080fd5b5061030e610755366004612d4d565b6120cd565b34801561076657600080fd5b506104a4612182565b61030e61077d366004612d4d565b612191565b60076020819052600091825260409091208054600182015460028301549383015460088401546009850154600a860154600b9096015494966001600160a01b039094169593949293919290919060ff8082169161010090041689565b60045481565b604051806040016040528060098152602001684f682120466f72756d60b81b81525081565b6001546001600160a01b0316331461083c5760405162461bcd60e51b8152600401610833906135eb565b60405180910390fd5b60006108466112e8565b905060006108526113e6565b90506000826001600160a01b031663f01cc0a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c79190612cc2565b905060005b818110156109bf576040516285ae2b60e01b81526000906001600160a01b038616906285ae2b90610901908590600401613153565b60206040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190612b93565b60405163a407f62b60e01b81529091506001600160a01b0385169063a407f62b90610980908490600401612f9d565b600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b5050600190930192506108cc915050565b50505050565b6001546001600160a01b031633146109ef5760405162461bcd60e51b8152600401610833906135eb565b6109f76113e6565b6001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a3157600080fd5b505af11580156109bf573d6000803e3d6000fd5b610a5033838361234f565b5050565b60096020526000908152604090205481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61168081565b6a0422ca8b0a00a42500000081565b6001546001600160a01b03163314610ac95760405162461bcd60e51b8152600401610833906135eb565b600180546001600160a01b0319169055565b60608060608060006007600087815260200190815260200160002090508060030181600401826005018360060183805480602002602001604051908101604052809291908181526020018280548015610b5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3f575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610baf57602002820191906000526020600020905b815481526020019060010190808311610b9b575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015610c825760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610c6e5780601f10610c4357610100808354040283529160200191610c6e565b820191906000526020600020905b815481529060010190602001808311610c5157829003601f168201915b505050505081526020019060010190610bd7565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610d545760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610d405780601f10610d1557610100808354040283529160200191610d40565b820191906000526020600020905b815481529060010190602001808311610d2357829003601f168201915b505050505081526020019060010190610ca9565b5050505090509450945094509450509193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b60008160065410158015610da85750600082115b610dc45760405162461bcd60e51b8152600401610833906134bd565b6000828152600760205260409020600b81015460ff1615610de9576002915050610f12565b80600701544311610dfe576000915050610f12565b80600801544311610e13576001915050610f12565b80600a01548160090154111580610e3857506a034f086f3b33b6840000008160090154105b15610e47576003915050610f12565b6002810154610e5a576004915050610f12565b600b810154610100900460ff1615610e76576007915050610f12565b610efc610e816113e6565b6001600160a01b031663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190612cc2565b6002830154906124f0565b4210610f0c576006915050610f12565b60059150505b919050565b6007610f2282610d94565b6007811115610f2d57fe5b1415610f4b5760405162461bcd60e51b8152600401610833906132ea565b60008181526007602052604090206001546001600160a01b0316331480610f7e575060018101546001600160a01b031633145b8061101f57506005546002546001838101546001600160a01b039283169263782d6fe192911690610fb0904390612551565b6040518363ffffffff1660e01b8152600401610fcd929190612fb1565b60206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190612cc2565b105b61103b5760405162461bcd60e51b81526004016108339061348e565b600b8101805460ff1916600117905560005b6003820154811015611146576110616113e6565b6001600160a01b031663591fcdfe83600301838154811061107e57fe5b6000918252602090912001546004850180546001600160a01b0390921691859081106110a657fe5b90600052602060002001548560050185815481106110c057fe5b906000526020600020018660060186815481106110d957fe5b9060005260206000200187600201546040518663ffffffff1660e01b81526004016111089594939291906130aa565b600060405180830381600087803b15801561112257600080fd5b505af1158015611136573d6000803e3d6000fd5b50506001909201915061104d9050565b507f416e669c63d9a3a5e36ee7cc7e2104b8db28ccd286aa18966e98fa230c73b08c826040516111769190613153565b60405180910390a15050565b60086020908152600092835260408084209091529082529020805460019091015460ff808316926101009004169083565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee878760405160200161121a9392919061315c565b60405160208183030381529060405280519060200120604051602001611241929190612f82565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161127e9493929190613174565b6020604051602081039080840390855afa1580156112a0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112d35760405162461bcd60e51b8152600401610833906135b4565b6112de81888861234f565b50505b5050505050565b60006112f26115a7565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132a57600080fd5b505afa15801561133e573d6000803e3d6000fd5b505050506040513d602081101561135457600080fd5b5051905090565b6001546001600160a01b031633146113855760405162461bcd60e51b8152600401610833906135eb565b61138d6113e6565b6001600160a01b03166335ac63b1826040518263ffffffff1660e01b81526004016113b89190612f9d565b600060405180830381600087803b1580156113d257600080fd5b505af11580156112e1573d6000803e3d6000fd5b60006113f06115a7565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132a57600080fd5b600a81565b6a034f086f3b33b68400000081565b6001546001600160a01b031633146114665760405162461bcd60e51b8152600401610833906135eb565b61146e6113e6565b6001600160a01b031663a407f62b826040518263ffffffff1660e01b81526004016113b89190612f9d565b6114a16113e6565b6001600160a01b0316336001600160a01b0316146114f4576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b60018110156115155760405162461bcd60e51b8152600401610833906131f0565b619d808111156115375760405162461bcd60e51b815260040161083390613385565b600355565b6001546001600160a01b031633146115665760405162461bcd60e51b8152600401610833906135eb565b61156e6113e6565b6001600160a01b0316634d11dcf3826040518263ffffffff1660e01b81526004016113b89190612f9d565b6969e10de76676d080000081565b6000546001600160a01b031690565b62013b0081565b6115c56113e6565b6001600160a01b0316336001600160a01b031614611618576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b61162181612349565b611672576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790556116956113e6565b6001600160a01b0316336001600160a01b0316146116fa576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b619d8081565b60055481565b6001546001600160a01b031633146117335760405162461bcd60e51b8152600401610833906135eb565b61173b6113e6565b6001600160a01b0316633a66f9016117516113e6565b6000856040516020016117649190612f9d565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016117939493929190612fca565b602060405180830381600087803b1580156117ad57600080fd5b505af11580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e59190612cc2565b505050565b6001546001600160a01b031633146118145760405162461bcd60e51b8152600401610833906135eb565b61181c6113e6565b6001600160a01b0316630825f38f6118326113e6565b6000856040516020016118459190612f9d565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016118749493929190612fca565b600060405180830381600087803b15801561188e57600080fd5b505af11580156118a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117e59190810190612cda565b60065481565b600554600254600091906001600160a01b031663782d6fe1336118f4436001612551565b6040518363ffffffff1660e01b8152600401611911929190612fb1565b60206040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190612cc2565b1161197e5760405162461bcd60e51b815260040161083390613457565b84518651148015611990575083518651145b801561199d575082518651145b6119b95760405162461bcd60e51b815260040161083390613523565b85516119d75760405162461bcd60e51b815260040161083390613552565b600a865111156119f95760405162461bcd60e51b8152600401610833906133b4565b336000908152600960205260409020548015611a76576000611a1a82610d94565b90506001816007811115611a2a57fe5b1415611a485760405162461bcd60e51b8152600401610833906131b9565b6000816007811115611a5657fe5b1415611a745760405162461bcd60e51b81526004016108339061334e565b505b6000611a8d600354436124f090919063ffffffff16565b90506000611aa6600454836124f090919063ffffffff16565b90506006600081548092919060010191905055506000604051806101a001604052806006548152602001336001600160a01b03168152602001600081526020018b81526020018a815260200189815260200188815260200184815260200183815260200160008152602001600081526020016000151581526020016000151581525090508060076000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003019080519060200190611b9f929190612711565b5060808201518051611bbb916004840191602090910190612776565b5060a08201518051611bd79160058401916020909101906127b1565b5060c08201518051611bf391600684019160209091019061280a565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b0160006101000a81548160ff02191690831515021790555061018082015181600b0160016101000a81548160ff02191690831515021790555090505080600001516009600083602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507f146c119ea9c23578b17508cc3cc09fdef9132ce7f26867ffa71994f3fa5b8a9e8160000151338c8c8c8c89898e604051611cd99998979695949392919061363e565b60405180910390a1519998505050505050505050565b6004611cfa82610d94565b6007811115611d0557fe5b14611d225760405162461bcd60e51b8152600401610833906133eb565b600081815260076020526040812090611db3611d3c6113e6565b6001600160a01b0316636a42b8f86040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190612cc2565b42906124f0565b905060005b6003830154811015611f5b57611f53836003018281548110611dd657fe5b6000918252602090912001546004850180546001600160a01b039092169184908110611dfe57fe5b9060005260206000200154856005018481548110611e1857fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611ea65780601f10611e7b57610100808354040283529160200191611ea6565b820191906000526020600020905b815481529060010190602001808311611e8957829003601f168201915b5050505050866006018581548110611eba57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611f485780601f10611f1d57610100808354040283529160200191611f48565b820191906000526020600020905b815481529060010190602001808311611f2b57829003601f168201915b5050505050866125ae565b600101611db8565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290611f959085908490613722565b60405180910390a1505050565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b611fce612863565b5060009182526008602090815260408084206001600160a01b03939093168452918152918190208151606081018352815460ff8082161515835261010090910416151593810193909352600101549082015290565b600181565b6120306113e6565b6001600160a01b0316336001600160a01b031614612083576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b6116808110156120a55760405162461bcd60e51b8152600401610833906134f4565b62013b008111156120c85760405162461bcd60e51b81526004016108339061328c565b600455565b6120d56113e6565b6001600160a01b0316336001600160a01b031614612128576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b6969e10de76676d08000008110156121525760405162461bcd60e51b815260040161083390613255565b6a0422ca8b0a00a42500000081111561217d5760405162461bcd60e51b81526004016108339061321e565b600555565b6002546001600160a01b031681565b600561219c82610d94565b60078111156121a757fe5b146121c45760405162461bcd60e51b81526004016108339061331f565b6000818152600760205260408120600b8101805461ff001916610100179055905b6003820154811015612319576121f96113e6565b6001600160a01b0316630825f38f83600401838154811061221657fe5b906000526020600020015484600301848154811061223057fe5b6000918252602090912001546004860180546001600160a01b03909216918690811061225857fe5b906000526020600020015486600501868154811061227257fe5b9060005260206000200187600601878154811061228b57fe5b9060005260206000200188600201546040518763ffffffff1660e01b81526004016122ba9594939291906130aa565b6000604051808303818588803b1580156122d357600080fd5b505af11580156122e7573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526123109190810190612cda565b506001016121e5565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f826040516111769190613153565b3b151590565b600161235a83610d94565b600781111561236557fe5b146123825760405162461bcd60e51b81526004016108339061357d565b6000828152600760209081526040808320600883528184206001600160a01b0388168552909252909120805460ff16156123ce5760405162461bcd60e51b8152600401610833906132bc565b600254600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe191612404918a91600401612fb1565b60206040518083038186803b15801561241c57600080fd5b505afa158015612430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124549190612cc2565b9050831561247557600983015461246b90826124f0565b600984015561248a565b600a83015461248490826124f0565b600a8401555b8154600160ff19909116811761ff0019166101008615150217835582018190556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c46906124e0908890889088908690613036565b60405180910390a1505050505050565b60008282018381101561254a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000828211156125a8576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6125b66113e6565b6001600160a01b031663f2b0653786868686866040516020016125dd95949392919061305e565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161260f9190613153565b60206040518083038186803b15801561262757600080fd5b505afa15801561263b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265f9190612ca6565b1561267c5760405162461bcd60e51b815260040161083390613420565b6126846113e6565b6001600160a01b0316633a66f90186868686866040518663ffffffff1660e01b81526004016126b795949392919061305e565b602060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127099190612cc2565b505050505050565b828054828255906000526020600020908101928215612766579160200282015b8281111561276657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612731565b50612772929150612883565b5090565b828054828255906000526020600020908101928215612766579160200282015b82811115612766578251825591602001919060010190612796565b8280548282559060005260206000209081019282156127fe579160200282015b828111156127fe57825180516127ee918491602090910190612898565b50916020019190600101906127d1565b50612772929150612913565b828054828255906000526020600020908101928215612857579160200282015b828111156128575782518051612847918491602090910190612898565b509160200191906001019061282a565b50612772929150612930565b604080516060810182526000808252602082018190529181019190915290565b5b808211156127725760008155600101612884565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826128ce5760008555612766565b82601f106128e757805160ff1916838001178555612766565b828001600101855582156127665791820182811115612766578251825591602001919060010190612796565b80821115612772576000612927828261294d565b50600101612913565b80821115612772576000612944828261294d565b50600101612930565b50805460018160011615610100020316600290046000825580601f1061297357506116fa565b601f0160209004906000526020600020908101906116fa9190612883565b60006129a461299f84613772565b613730565b90508281528383830111156129b857600080fd5b828260208301376000602084830101529392505050565b600082601f8301126129df578081fd5b813560206129ef61299f83613754565b8281528181019085830183850287018401881015612a0b578586fd5b855b85811015612a32578135612a20816137cc565b84529284019290840190600101612a0d565b5090979650505050505050565b600082601f830112612a4f578081fd5b81356020612a5f61299f83613754565b82815281810190858301855b85811015612a32578135880189603f820112612a85578788fd5b612a968a8783013560408401612991565b8552509284019290840190600101612a6b565b600082601f830112612ab9578081fd5b81356020612ac961299f83613754565b82815281810190858301855b85811015612a3257612aec898684358b0101612b58565b84529284019290840190600101612ad5565b600082601f830112612b0e578081fd5b81356020612b1e61299f83613754565b8281528181019085830183850287018401881015612b3a578586fd5b855b85811015612a3257813584529284019290840190600101612b3c565b600082601f830112612b68578081fd5b61254a83833560208501612991565b600060208284031215612b88578081fd5b813561254a816137cc565b600060208284031215612ba4578081fd5b815161254a816137cc565b60008060408385031215612bc1578081fd5b8235612bcc816137cc565b946020939093013593505050565b600080600080600060a08688031215612bf1578081fd5b853567ffffffffffffffff80821115612c08578283fd5b612c1489838a016129cf565b96506020880135915080821115612c29578283fd5b612c3589838a01612afe565b95506040880135915080821115612c4a578283fd5b612c5689838a01612aa9565b94506060880135915080821115612c6b578283fd5b612c7789838a01612a3f565b93506080880135915080821115612c8c578283fd5b50612c9988828901612b58565b9150509295509295909350565b600060208284031215612cb7578081fd5b815161254a816137e1565b600060208284031215612cd3578081fd5b5051919050565b600060208284031215612ceb578081fd5b815167ffffffffffffffff811115612d01578182fd5b8201601f81018413612d11578182fd5b8051612d1f61299f82613772565b818152856020838501011115612d33578384fd5b612d448260208301602086016137a0565b95945050505050565b600060208284031215612d5e578081fd5b5035919050565b60008060408385031215612d77578182fd5b823591506020830135612d89816137cc565b809150509250929050565b60008060408385031215612da6578182fd5b823591506020830135612d89816137e1565b600080600080600060a08688031215612dcf578283fd5b853594506020860135612de1816137e1565b9350604086013560ff81168114612df6578384fd5b94979396509394606081013594506080013592915050565b6000815180845260208085019450808401835b83811015612e465781516001600160a01b031687529582019590820190600101612e21565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015612e97578284038952612e85848351612ed3565b98850198935090840190600101612e6d565b5091979650505050505050565b6000815180845260208085019450808401835b83811015612e4657815187529582019590820190600101612eb7565b60008151808452612eeb8160208601602086016137a0565b601f01601f19169290920160200192915050565b60008154600180821660008114612f1d5760018114612f3b57612f79565b60028304607f16865260ff1983166020870152604086019350612f79565b60028304808752612f4b86613794565b60005b82811015612f6f5781546020828b0101528482019150602081019050612f4e565b8801602001955050505b50505092915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038616825284602083015260a06040830152601860a08301527f73657450656e64696e6741646d696e286164647265737329000000000000000060c083015260e0606083015261302560e0830185612ed3565b905082608083015295945050505050565b6001600160a01b03949094168452602084019290925215156040830152606082015260800190565b600060018060a01b038716825285602083015260a0604083015261308560a0830186612ed3565b82810360608401526130978186612ed3565b9150508260808301529695505050505050565b600060018060a01b038716825285602083015260a060408301526130d160a0830186612eff565b82810360608401526130978186612eff565b6000608082526130f66080830187612e0e565b82810360208401526131088187612ea4565b9050828103604084015261311c8186612e51565b905082810360608401526131308185612e51565b979650505050505050565b92151583529015156020830152604082015260600190565b90815260200190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208101600883106131a057fe5b91905290565b60006020825261254a6020830184612ed3565b6020808252601e908201527f466f72756d3a2050726f706f73616c20416c7265616479204163746976650000604082015260600190565b602080825260149082015273466f72756d3a2044656c617920546f6f204c6f7760601b604082015260600190565b60208082526019908201527f466f72756d3a205468726573686f6c6420546f6f204869676800000000000000604082015260600190565b60208082526018908201527f466f72756d3a205468726573686f6c6420546f6f204c6f770000000000000000604082015260600190565b60208082526016908201527508cdee4eada7440a0cae4d2dec840a8dede4090d2ced60531b604082015260600190565b602080825260149082015273119bdc9d5b4e88105b1c9958591e48159bdd195960621b604082015260600190565b6020808252818101527f466f72756d3a2050726f706f73616c20416c7265616479204578656375746564604082015260600190565b602080825260159082015274119bdc9d5b4e88135d5cdd08109948145d595d5959605a1b604082015260600190565b6020808252601f908201527f466f72756d3a2050726f706f73616c20416c72656164792050656e64696e6700604082015260600190565b60208082526015908201527408cdee4eada744088cad8c2f240a8dede4090d2ced605b1b604082015260600190565b60208082526017908201527f466f72756d3a20546f6f204d616e7920416374696f6e73000000000000000000604082015260600190565b6020808252818101527f466f72756d3a204f6e6c79205375636365737366756c2050726f706f73616c73604082015260600190565b6020808252601e908201527f466f72756d3a2050726f706f73616c20416c7265616479205175657565640000604082015260600190565b6020808252601c908201527f466f72756d3a20566f7465732042656c6f77205468726573686f6c6400000000604082015260600190565b6020808252601590820152742337b93ab69d102b30b634b210283937b837b9b2b960591b604082015260600190565b6020808252601a908201527f466f72756d3a20496e76616c69642050726f706f73616c204944000000000000604082015260600190565b602080825260159082015274466f72756d3a20506572696f6420546f6f204c6f7760581b604082015260600190565b60208082526015908201527408cdee4eada744082e4d2e8f2409ad2e6dac2e8c6d605b1b604082015260600190565b602080825260119082015270466f72756d3a204e6f20416374696f6e7360781b604082015260600190565b60208082526018908201527f466f72756d3a2050726f706f73616c20496e6163746976650000000000000000604082015260600190565b60208082526018908201527f466f72756d3a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6020808252601490820152732337b93ab69d1027b7363c9023bab0b93234b0b760611b604082015260600190565b8151151581526020808301511515908201526040918201519181019190915260600190565b8981526001600160a01b0389166020820152610120604082018190526000906136698382018b612e0e565b9050828103606084015261367d818a612ea4565b905082810360808401526136918189612e51565b905082810360a08401526136a58188612e51565b90508560c08401528460e08401528281036101008401526136c68185612ed3565b9c9b505050505050505050505050565b9889526001600160a01b0397909716602089015260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561374c57fe5b604052919050565b600067ffffffffffffffff82111561376857fe5b5060209081020190565b600067ffffffffffffffff82111561378657fe5b50601f01601f191660200190565b60009081526020902090565b60005b838110156137bb5781810151838201526020016137a3565b838111156109bf5750506000910152565b6001600160a01b03811681146116fa57600080fd5b80151581146116fa57600080fdfe537562736372696265723a204f6e6c7920476f7665726e616e63650000000000a26469706673582212202b3edd94f6b8219c0cd8b3a088d6b712e43148f494fc3dd56abc7d411aab0d2164736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c80635dc2803a1161014f578063c0903088116100c1578063e23a9a521161007a578063e23a9a52146106d8578063e48083fe14610705578063ea0217cf1461071a578063ece40cc11461073a578063fc0c546a1461075a578063fe0d94c11461076f57610272565b8063c09030881461062e578063cce4f91f1461064e578063da35c6641461066e578063da95691a14610683578063ddf0b009146106a3578063deaaa7cc146106c357610272565b8063791f5d2311610113578063791f5d23146105a55780637b103999146105ba578063a64e024a146105cf578063a91ee0dc146105e4578063b112626314610604578063b58131b01461061957610272565b80635dc2803a1461051b578063671dd275146105305780637041b48a1461054557806370b0f6601461056557806376a67a511461058557610272565b8063328dd982116101e85780634178b249116101ac5780634178b24914610460578063452a93201461048f5780634634c61f146104b1578063481c6a75146104d157806357b001f9146104e65780635aa6e6751461050657610272565b8063328dd982146103b95780633644e515146103e95780633932abb1146103fe5780633e4f49e61461041357806340e58ee51461044057610272565b806315373e3d1161023a57806315373e3d1461032557806317977c611461034557806320606b7014610365578063215809ca1461037a57806325fd935a1461038f578063314e99a2146103a457610272565b8063013cf08b1461027757806302a251a3146102b557806306fdde03146102d75780630775ef0f146102f95780630e18b68114610310575b600080fd5b34801561028357600080fd5b50610297610292366004612d4d565b610782565b6040516102ac999897969594939291906136d6565b60405180910390f35b3480156102c157600080fd5b506102ca6107de565b6040516102ac9190613153565b3480156102e357600080fd5b506102ec6107e4565b6040516102ac91906131a6565b34801561030557600080fd5b5061030e610809565b005b34801561031c57600080fd5b5061030e6109c5565b34801561033157600080fd5b5061030e610340366004612d94565b610a45565b34801561035157600080fd5b506102ca610360366004612b77565b610a54565b34801561037157600080fd5b506102ca610a66565b34801561038657600080fd5b506102ca610a8a565b34801561039b57600080fd5b506102ca610a90565b3480156103b057600080fd5b5061030e610a9f565b3480156103c557600080fd5b506103d96103d4366004612d4d565b610adb565b6040516102ac94939291906130e3565b3480156103f557600080fd5b506102ca610d6a565b34801561040a57600080fd5b506102ca610d8e565b34801561041f57600080fd5b5061043361042e366004612d4d565b610d94565b6040516102ac9190613192565b34801561044c57600080fd5b5061030e61045b366004612d4d565b610f17565b34801561046c57600080fd5b5061048061047b366004612d65565b611182565b6040516102ac9392919061313b565b34801561049b57600080fd5b506104a46111b3565b6040516102ac9190612f9d565b3480156104bd57600080fd5b5061030e6104cc366004612db8565b6111c2565b3480156104dd57600080fd5b506104a46112e8565b3480156104f257600080fd5b5061030e610501366004612b77565b61135b565b34801561051257600080fd5b506104a46113e6565b34801561052757600080fd5b506102ca611428565b34801561053c57600080fd5b506102ca61142d565b34801561055157600080fd5b5061030e610560366004612b77565b61143c565b34801561057157600080fd5b5061030e610580366004612d4d565b611499565b34801561059157600080fd5b5061030e6105a0366004612b77565b61153c565b3480156105b157600080fd5b506102ca611599565b3480156105c657600080fd5b506104a46115a7565b3480156105db57600080fd5b506102ca6115b6565b3480156105f057600080fd5b5061030e6105ff366004612b77565b6115bd565b34801561061057600080fd5b506102ca6116fd565b34801561062557600080fd5b506102ca611703565b34801561063a57600080fd5b5061030e610649366004612baf565b611709565b34801561065a57600080fd5b5061030e610669366004612baf565b6117ea565b34801561067a57600080fd5b506102ca6118ca565b34801561068f57600080fd5b506102ca61069e366004612bda565b6118d0565b3480156106af57600080fd5b5061030e6106be366004612d4d565b611cef565b3480156106cf57600080fd5b506102ca611fa2565b3480156106e457600080fd5b506106f86106f3366004612d65565b611fc6565b6040516102ac9190613619565b34801561071157600080fd5b506102ca612023565b34801561072657600080fd5b5061030e610735366004612d4d565b612028565b34801561074657600080fd5b5061030e610755366004612d4d565b6120cd565b34801561076657600080fd5b506104a4612182565b61030e61077d366004612d4d565b612191565b60076020819052600091825260409091208054600182015460028301549383015460088401546009850154600a860154600b9096015494966001600160a01b039094169593949293919290919060ff8082169161010090041689565b60045481565b604051806040016040528060098152602001684f682120466f72756d60b81b81525081565b6001546001600160a01b0316331461083c5760405162461bcd60e51b8152600401610833906135eb565b60405180910390fd5b60006108466112e8565b905060006108526113e6565b90506000826001600160a01b031663f01cc0a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c79190612cc2565b905060005b818110156109bf576040516285ae2b60e01b81526000906001600160a01b038616906285ae2b90610901908590600401613153565b60206040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190612b93565b60405163a407f62b60e01b81529091506001600160a01b0385169063a407f62b90610980908490600401612f9d565b600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b5050600190930192506108cc915050565b50505050565b6001546001600160a01b031633146109ef5760405162461bcd60e51b8152600401610833906135eb565b6109f76113e6565b6001600160a01b0316630e18b6816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a3157600080fd5b505af11580156109bf573d6000803e3d6000fd5b610a5033838361234f565b5050565b60096020526000908152604090205481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61168081565b6a0422ca8b0a00a42500000081565b6001546001600160a01b03163314610ac95760405162461bcd60e51b8152600401610833906135eb565b600180546001600160a01b0319169055565b60608060608060006007600087815260200190815260200160002090508060030181600401826005018360060183805480602002602001604051908101604052809291908181526020018280548015610b5d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3f575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610baf57602002820191906000526020600020905b815481526020019060010190808311610b9b575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015610c825760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610c6e5780601f10610c4357610100808354040283529160200191610c6e565b820191906000526020600020905b815481529060010190602001808311610c5157829003601f168201915b505050505081526020019060010190610bd7565b50505050915080805480602002602001604051908101604052809291908181526020016000905b82821015610d545760008481526020908190208301805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015610d405780601f10610d1557610100808354040283529160200191610d40565b820191906000526020600020905b815481529060010190602001808311610d2357829003601f168201915b505050505081526020019060010190610ca9565b5050505090509450945094509450509193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b60035481565b60008160065410158015610da85750600082115b610dc45760405162461bcd60e51b8152600401610833906134bd565b6000828152600760205260409020600b81015460ff1615610de9576002915050610f12565b80600701544311610dfe576000915050610f12565b80600801544311610e13576001915050610f12565b80600a01548160090154111580610e3857506a034f086f3b33b6840000008160090154105b15610e47576003915050610f12565b6002810154610e5a576004915050610f12565b600b810154610100900460ff1615610e76576007915050610f12565b610efc610e816113e6565b6001600160a01b031663c1a287e26040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef19190612cc2565b6002830154906124f0565b4210610f0c576006915050610f12565b60059150505b919050565b6007610f2282610d94565b6007811115610f2d57fe5b1415610f4b5760405162461bcd60e51b8152600401610833906132ea565b60008181526007602052604090206001546001600160a01b0316331480610f7e575060018101546001600160a01b031633145b8061101f57506005546002546001838101546001600160a01b039283169263782d6fe192911690610fb0904390612551565b6040518363ffffffff1660e01b8152600401610fcd929190612fb1565b60206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190612cc2565b105b61103b5760405162461bcd60e51b81526004016108339061348e565b600b8101805460ff1916600117905560005b6003820154811015611146576110616113e6565b6001600160a01b031663591fcdfe83600301838154811061107e57fe5b6000918252602090912001546004850180546001600160a01b0390921691859081106110a657fe5b90600052602060002001548560050185815481106110c057fe5b906000526020600020018660060186815481106110d957fe5b9060005260206000200187600201546040518663ffffffff1660e01b81526004016111089594939291906130aa565b600060405180830381600087803b15801561112257600080fd5b505af1158015611136573d6000803e3d6000fd5b50506001909201915061104d9050565b507f416e669c63d9a3a5e36ee7cc7e2104b8db28ccd286aa18966e98fa230c73b08c826040516111769190613153565b60405180910390a15050565b60086020908152600092835260408084209091529082529020805460019091015460ff808316926101009004169083565b6001546001600160a01b031681565b60007f00000000000000000000000000000000000000000000000000000000000000007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee878760405160200161121a9392919061315c565b60405160208183030381529060405280519060200120604051602001611241929190612f82565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161127e9493929190613174565b6020604051602081039080840390855afa1580156112a0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112d35760405162461bcd60e51b8152600401610833906135b4565b6112de81888861234f565b50505b5050505050565b60006112f26115a7565b6001600160a01b031663481c6a756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132a57600080fd5b505afa15801561133e573d6000803e3d6000fd5b505050506040513d602081101561135457600080fd5b5051905090565b6001546001600160a01b031633146113855760405162461bcd60e51b8152600401610833906135eb565b61138d6113e6565b6001600160a01b03166335ac63b1826040518263ffffffff1660e01b81526004016113b89190612f9d565b600060405180830381600087803b1580156113d257600080fd5b505af11580156112e1573d6000803e3d6000fd5b60006113f06115a7565b6001600160a01b0316635aa6e6756040518163ffffffff1660e01b815260040160206040518083038186803b15801561132a57600080fd5b600a81565b6a034f086f3b33b68400000081565b6001546001600160a01b031633146114665760405162461bcd60e51b8152600401610833906135eb565b61146e6113e6565b6001600160a01b031663a407f62b826040518263ffffffff1660e01b81526004016113b89190612f9d565b6114a16113e6565b6001600160a01b0316336001600160a01b0316146114f4576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b60018110156115155760405162461bcd60e51b8152600401610833906131f0565b619d808111156115375760405162461bcd60e51b815260040161083390613385565b600355565b6001546001600160a01b031633146115665760405162461bcd60e51b8152600401610833906135eb565b61156e6113e6565b6001600160a01b0316634d11dcf3826040518263ffffffff1660e01b81526004016113b89190612f9d565b6969e10de76676d080000081565b6000546001600160a01b031690565b62013b0081565b6115c56113e6565b6001600160a01b0316336001600160a01b031614611618576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b61162181612349565b611672576040805162461bcd60e51b815260206004820152601c60248201527f537562736372696265723a20496e76616c696420526567697374727900000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790556116956113e6565b6001600160a01b0316336001600160a01b0316146116fa576040805162461bcd60e51b815260206004820152601a60248201527f537562736372696265723a2042616420476f7665726e616e6365000000000000604482015290519081900360640190fd5b50565b619d8081565b60055481565b6001546001600160a01b031633146117335760405162461bcd60e51b8152600401610833906135eb565b61173b6113e6565b6001600160a01b0316633a66f9016117516113e6565b6000856040516020016117649190612f9d565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016117939493929190612fca565b602060405180830381600087803b1580156117ad57600080fd5b505af11580156117c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e59190612cc2565b505050565b6001546001600160a01b031633146118145760405162461bcd60e51b8152600401610833906135eb565b61181c6113e6565b6001600160a01b0316630825f38f6118326113e6565b6000856040516020016118459190612f9d565b604051602081830303815290604052856040518563ffffffff1660e01b81526004016118749493929190612fca565b600060405180830381600087803b15801561188e57600080fd5b505af11580156118a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117e59190810190612cda565b60065481565b600554600254600091906001600160a01b031663782d6fe1336118f4436001612551565b6040518363ffffffff1660e01b8152600401611911929190612fb1565b60206040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190612cc2565b1161197e5760405162461bcd60e51b815260040161083390613457565b84518651148015611990575083518651145b801561199d575082518651145b6119b95760405162461bcd60e51b815260040161083390613523565b85516119d75760405162461bcd60e51b815260040161083390613552565b600a865111156119f95760405162461bcd60e51b8152600401610833906133b4565b336000908152600960205260409020548015611a76576000611a1a82610d94565b90506001816007811115611a2a57fe5b1415611a485760405162461bcd60e51b8152600401610833906131b9565b6000816007811115611a5657fe5b1415611a745760405162461bcd60e51b81526004016108339061334e565b505b6000611a8d600354436124f090919063ffffffff16565b90506000611aa6600454836124f090919063ffffffff16565b90506006600081548092919060010191905055506000604051806101a001604052806006548152602001336001600160a01b03168152602001600081526020018b81526020018a815260200189815260200188815260200184815260200183815260200160008152602001600081526020016000151581526020016000151581525090508060076000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550604082015181600201556060820151816003019080519060200190611b9f929190612711565b5060808201518051611bbb916004840191602090910190612776565b5060a08201518051611bd79160058401916020909101906127b1565b5060c08201518051611bf391600684019160209091019061280a565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b0160006101000a81548160ff02191690831515021790555061018082015181600b0160016101000a81548160ff02191690831515021790555090505080600001516009600083602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507f146c119ea9c23578b17508cc3cc09fdef9132ce7f26867ffa71994f3fa5b8a9e8160000151338c8c8c8c89898e604051611cd99998979695949392919061363e565b60405180910390a1519998505050505050505050565b6004611cfa82610d94565b6007811115611d0557fe5b14611d225760405162461bcd60e51b8152600401610833906133eb565b600081815260076020526040812090611db3611d3c6113e6565b6001600160a01b0316636a42b8f86040518163ffffffff1660e01b815260040160206040518083038186803b158015611d7457600080fd5b505afa158015611d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dac9190612cc2565b42906124f0565b905060005b6003830154811015611f5b57611f53836003018281548110611dd657fe5b6000918252602090912001546004850180546001600160a01b039092169184908110611dfe57fe5b9060005260206000200154856005018481548110611e1857fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611ea65780601f10611e7b57610100808354040283529160200191611ea6565b820191906000526020600020905b815481529060010190602001808311611e8957829003601f168201915b5050505050866006018581548110611eba57fe5b600091825260209182902001805460408051601f6002600019610100600187161502019094169390930492830185900485028101850190915281815292830182828015611f485780601f10611f1d57610100808354040283529160200191611f48565b820191906000526020600020905b815481529060010190602001808311611f2b57829003601f168201915b5050505050866125ae565b600101611db8565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290611f959085908490613722565b60405180910390a1505050565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b611fce612863565b5060009182526008602090815260408084206001600160a01b03939093168452918152918190208151606081018352815460ff8082161515835261010090910416151593810193909352600101549082015290565b600181565b6120306113e6565b6001600160a01b0316336001600160a01b031614612083576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b6116808110156120a55760405162461bcd60e51b8152600401610833906134f4565b62013b008111156120c85760405162461bcd60e51b81526004016108339061328c565b600455565b6120d56113e6565b6001600160a01b0316336001600160a01b031614612128576040805162461bcd60e51b815260206004820152601b60248201526000805160206137f0833981519152604482015290519081900360640190fd5b6969e10de76676d08000008110156121525760405162461bcd60e51b815260040161083390613255565b6a0422ca8b0a00a42500000081111561217d5760405162461bcd60e51b81526004016108339061321e565b600555565b6002546001600160a01b031681565b600561219c82610d94565b60078111156121a757fe5b146121c45760405162461bcd60e51b81526004016108339061331f565b6000818152600760205260408120600b8101805461ff001916610100179055905b6003820154811015612319576121f96113e6565b6001600160a01b0316630825f38f83600401838154811061221657fe5b906000526020600020015484600301848154811061223057fe5b6000918252602090912001546004860180546001600160a01b03909216918690811061225857fe5b906000526020600020015486600501868154811061227257fe5b9060005260206000200187600601878154811061228b57fe5b9060005260206000200188600201546040518763ffffffff1660e01b81526004016122ba9594939291906130aa565b6000604051808303818588803b1580156122d357600080fd5b505af11580156122e7573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526123109190810190612cda565b506001016121e5565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f826040516111769190613153565b3b151590565b600161235a83610d94565b600781111561236557fe5b146123825760405162461bcd60e51b81526004016108339061357d565b6000828152600760209081526040808320600883528184206001600160a01b0388168552909252909120805460ff16156123ce5760405162461bcd60e51b8152600401610833906132bc565b600254600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe191612404918a91600401612fb1565b60206040518083038186803b15801561241c57600080fd5b505afa158015612430573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124549190612cc2565b9050831561247557600983015461246b90826124f0565b600984015561248a565b600a83015461248490826124f0565b600a8401555b8154600160ff19909116811761ff0019166101008615150217835582018190556040517f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c46906124e0908890889088908690613036565b60405180910390a1505050505050565b60008282018381101561254a576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000828211156125a8576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6125b66113e6565b6001600160a01b031663f2b0653786868686866040516020016125dd95949392919061305e565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161260f9190613153565b60206040518083038186803b15801561262757600080fd5b505afa15801561263b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265f9190612ca6565b1561267c5760405162461bcd60e51b815260040161083390613420565b6126846113e6565b6001600160a01b0316633a66f90186868686866040518663ffffffff1660e01b81526004016126b795949392919061305e565b602060405180830381600087803b1580156126d157600080fd5b505af11580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127099190612cc2565b505050505050565b828054828255906000526020600020908101928215612766579160200282015b8281111561276657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612731565b50612772929150612883565b5090565b828054828255906000526020600020908101928215612766579160200282015b82811115612766578251825591602001919060010190612796565b8280548282559060005260206000209081019282156127fe579160200282015b828111156127fe57825180516127ee918491602090910190612898565b50916020019190600101906127d1565b50612772929150612913565b828054828255906000526020600020908101928215612857579160200282015b828111156128575782518051612847918491602090910190612898565b509160200191906001019061282a565b50612772929150612930565b604080516060810182526000808252602082018190529181019190915290565b5b808211156127725760008155600101612884565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826128ce5760008555612766565b82601f106128e757805160ff1916838001178555612766565b828001600101855582156127665791820182811115612766578251825591602001919060010190612796565b80821115612772576000612927828261294d565b50600101612913565b80821115612772576000612944828261294d565b50600101612930565b50805460018160011615610100020316600290046000825580601f1061297357506116fa565b601f0160209004906000526020600020908101906116fa9190612883565b60006129a461299f84613772565b613730565b90508281528383830111156129b857600080fd5b828260208301376000602084830101529392505050565b600082601f8301126129df578081fd5b813560206129ef61299f83613754565b8281528181019085830183850287018401881015612a0b578586fd5b855b85811015612a32578135612a20816137cc565b84529284019290840190600101612a0d565b5090979650505050505050565b600082601f830112612a4f578081fd5b81356020612a5f61299f83613754565b82815281810190858301855b85811015612a32578135880189603f820112612a85578788fd5b612a968a8783013560408401612991565b8552509284019290840190600101612a6b565b600082601f830112612ab9578081fd5b81356020612ac961299f83613754565b82815281810190858301855b85811015612a3257612aec898684358b0101612b58565b84529284019290840190600101612ad5565b600082601f830112612b0e578081fd5b81356020612b1e61299f83613754565b8281528181019085830183850287018401881015612b3a578586fd5b855b85811015612a3257813584529284019290840190600101612b3c565b600082601f830112612b68578081fd5b61254a83833560208501612991565b600060208284031215612b88578081fd5b813561254a816137cc565b600060208284031215612ba4578081fd5b815161254a816137cc565b60008060408385031215612bc1578081fd5b8235612bcc816137cc565b946020939093013593505050565b600080600080600060a08688031215612bf1578081fd5b853567ffffffffffffffff80821115612c08578283fd5b612c1489838a016129cf565b96506020880135915080821115612c29578283fd5b612c3589838a01612afe565b95506040880135915080821115612c4a578283fd5b612c5689838a01612aa9565b94506060880135915080821115612c6b578283fd5b612c7789838a01612a3f565b93506080880135915080821115612c8c578283fd5b50612c9988828901612b58565b9150509295509295909350565b600060208284031215612cb7578081fd5b815161254a816137e1565b600060208284031215612cd3578081fd5b5051919050565b600060208284031215612ceb578081fd5b815167ffffffffffffffff811115612d01578182fd5b8201601f81018413612d11578182fd5b8051612d1f61299f82613772565b818152856020838501011115612d33578384fd5b612d448260208301602086016137a0565b95945050505050565b600060208284031215612d5e578081fd5b5035919050565b60008060408385031215612d77578182fd5b823591506020830135612d89816137cc565b809150509250929050565b60008060408385031215612da6578182fd5b823591506020830135612d89816137e1565b600080600080600060a08688031215612dcf578283fd5b853594506020860135612de1816137e1565b9350604086013560ff81168114612df6578384fd5b94979396509394606081013594506080013592915050565b6000815180845260208085019450808401835b83811015612e465781516001600160a01b031687529582019590820190600101612e21565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015612e97578284038952612e85848351612ed3565b98850198935090840190600101612e6d565b5091979650505050505050565b6000815180845260208085019450808401835b83811015612e4657815187529582019590820190600101612eb7565b60008151808452612eeb8160208601602086016137a0565b601f01601f19169290920160200192915050565b60008154600180821660008114612f1d5760018114612f3b57612f79565b60028304607f16865260ff1983166020870152604086019350612f79565b60028304808752612f4b86613794565b60005b82811015612f6f5781546020828b0101528482019150602081019050612f4e565b8801602001955050505b50505092915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b600060018060a01b038616825284602083015260a06040830152601860a08301527f73657450656e64696e6741646d696e286164647265737329000000000000000060c083015260e0606083015261302560e0830185612ed3565b905082608083015295945050505050565b6001600160a01b03949094168452602084019290925215156040830152606082015260800190565b600060018060a01b038716825285602083015260a0604083015261308560a0830186612ed3565b82810360608401526130978186612ed3565b9150508260808301529695505050505050565b600060018060a01b038716825285602083015260a060408301526130d160a0830186612eff565b82810360608401526130978186612eff565b6000608082526130f66080830187612e0e565b82810360208401526131088187612ea4565b9050828103604084015261311c8186612e51565b905082810360608401526131308185612e51565b979650505050505050565b92151583529015156020830152604082015260600190565b90815260200190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208101600883106131a057fe5b91905290565b60006020825261254a6020830184612ed3565b6020808252601e908201527f466f72756d3a2050726f706f73616c20416c7265616479204163746976650000604082015260600190565b602080825260149082015273466f72756d3a2044656c617920546f6f204c6f7760601b604082015260600190565b60208082526019908201527f466f72756d3a205468726573686f6c6420546f6f204869676800000000000000604082015260600190565b60208082526018908201527f466f72756d3a205468726573686f6c6420546f6f204c6f770000000000000000604082015260600190565b60208082526016908201527508cdee4eada7440a0cae4d2dec840a8dede4090d2ced60531b604082015260600190565b602080825260149082015273119bdc9d5b4e88105b1c9958591e48159bdd195960621b604082015260600190565b6020808252818101527f466f72756d3a2050726f706f73616c20416c7265616479204578656375746564604082015260600190565b602080825260159082015274119bdc9d5b4e88135d5cdd08109948145d595d5959605a1b604082015260600190565b6020808252601f908201527f466f72756d3a2050726f706f73616c20416c72656164792050656e64696e6700604082015260600190565b60208082526015908201527408cdee4eada744088cad8c2f240a8dede4090d2ced605b1b604082015260600190565b60208082526017908201527f466f72756d3a20546f6f204d616e7920416374696f6e73000000000000000000604082015260600190565b6020808252818101527f466f72756d3a204f6e6c79205375636365737366756c2050726f706f73616c73604082015260600190565b6020808252601e908201527f466f72756d3a2050726f706f73616c20416c7265616479205175657565640000604082015260600190565b6020808252601c908201527f466f72756d3a20566f7465732042656c6f77205468726573686f6c6400000000604082015260600190565b6020808252601590820152742337b93ab69d102b30b634b210283937b837b9b2b960591b604082015260600190565b6020808252601a908201527f466f72756d3a20496e76616c69642050726f706f73616c204944000000000000604082015260600190565b602080825260159082015274466f72756d3a20506572696f6420546f6f204c6f7760581b604082015260600190565b60208082526015908201527408cdee4eada744082e4d2e8f2409ad2e6dac2e8c6d605b1b604082015260600190565b602080825260119082015270466f72756d3a204e6f20416374696f6e7360781b604082015260600190565b60208082526018908201527f466f72756d3a2050726f706f73616c20496e6163746976650000000000000000604082015260600190565b60208082526018908201527f466f72756d3a20496e76616c6964205369676e61747572650000000000000000604082015260600190565b6020808252601490820152732337b93ab69d1027b7363c9023bab0b93234b0b760611b604082015260600190565b8151151581526020808301511515908201526040918201519181019190915260600190565b8981526001600160a01b0389166020820152610120604082018190526000906136698382018b612e0e565b9050828103606084015261367d818a612ea4565b905082810360808401526136918189612e51565b905082810360a08401526136a58188612e51565b90508560c08401528460e08401528281036101008401526136c68185612ed3565b9c9b505050505050505050505050565b9889526001600160a01b0397909716602089015260408801959095526060870193909352608086019190915260a085015260c0840152151560e083015215156101008201526101200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561374c57fe5b604052919050565b600067ffffffffffffffff82111561376857fe5b5060209081020190565b600067ffffffffffffffff82111561378657fe5b50601f01601f191660200190565b60009081526020902090565b60005b838110156137bb5781810151838201526020016137a3565b838111156109bf5750506000910152565b6001600160a01b03811681146116fa57600080fd5b80151581146116fa57600080fdfe537562736372696265723a204f6e6c7920476f7665726e616e63650000000000a26469706673582212202b3edd94f6b8219c0cd8b3a088d6b712e43148f494fc3dd56abc7d411aab0d2164736f6c63430007060033",
  "devdoc": {
    "details": "Proposer-Executor Relationship to execute protocol changes",
    "kind": "dev",
    "methods": {
      "castVote(uint256,bool)": {
        "params": {
          "proposalId": "The id of the Proposal to vote on",
          "support": "The boolean representing whether the user supports or rejects the Proposal"
        }
      },
      "getActions(uint256)": {
        "params": {
          "proposalId": "The id of the Proposal to get actions from"
        }
      },
      "getReceipt(uint256,address)": {
        "params": {
          "proposalId": "The id of the Proposal to get the Receipt from",
          "voter": "The address of the Voter to check"
        }
      },
      "governance()": {
        "returns": {
          "_0": "The current Governance address"
        }
      },
      "manager()": {
        "returns": {
          "_0": "The current Manager address"
        }
      },
      "registry()": {
        "returns": {
          "_0": "The current Registry address"
        }
      },
      "setRegistry(address)": {
        "details": "Requires sender to be Governance of the new Registry to avoid bricking.Ideally should not be used",
        "params": {
          "registry_": "The new registry"
        }
      },
      "state(uint256)": {
        "params": {
          "proposalId": "The id of the Proposal to check"
        }
      }
    },
    "title": "Oh! Finance Forum",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ProposalAdded(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": {
        "notice": "An event emitted when a new proposal is created"
      },
      "ProposalCancelled(uint256)": {
        "notice": "An event emitted when a proposal has been canceled"
      },
      "ProposalExecuted(uint256)": {
        "notice": "An event emitted when a proposal has been executed in the Timelock"
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "An event emitted when a proposal has been queued in the Timelock"
      },
      "VoteCast(address,uint256,bool,uint256)": {
        "notice": "An event emitted when a vote has been cast on a proposal"
      }
    },
    "kind": "user",
    "methods": {
      "BALLOT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the ballot struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "MAX_OPERATIONS()": {
        "notice": "The maximum number of actions that can be included in a proposal"
      },
      "MAX_PROPOSAL_THRESHOLD()": {
        "notice": "The maximum setable proposal threshold"
      },
      "MAX_VOTING_DELAY()": {
        "notice": "The max setable voting delay"
      },
      "MAX_VOTING_PERIOD()": {
        "notice": "The max setable voting period"
      },
      "MIN_PROPOSAL_THRESHOLD()": {
        "notice": "The minimum setable proposal threshold"
      },
      "MIN_VOTING_DELAY()": {
        "notice": "The min setable voting delay"
      },
      "MIN_VOTING_PERIOD()": {
        "notice": "The minimum setable voting period"
      },
      "QUORUM_VOTES()": {
        "notice": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed"
      },
      "abdicate()": {
        "notice": "Abdicate Guardian rights when protocol has suffiently matured"
      },
      "acceptAdmin()": {
        "notice": "Allow Guardian to accept admin rights after setting pending admin"
      },
      "castVote(uint256,bool)": {
        "notice": "Cast a vote for a given Proposal"
      },
      "executeSetGovernorPendingAdmin(address,uint256)": {
        "notice": "Allow Guardian to set the pending admin once delay has expired"
      },
      "getActions(uint256)": {
        "notice": "Get the actions for a given Proposal"
      },
      "getReceipt(uint256,address)": {
        "notice": "Get the voting receipt for a given Voter for a given Proposal"
      },
      "governance()": {
        "notice": "Get the Governance address"
      },
      "guardian()": {
        "notice": "The address of Oh! Finance Protocol Guardian"
      },
      "latestProposalIds(address)": {
        "notice": "The latest proposal for each proposer"
      },
      "manager()": {
        "notice": "Get the Manager address"
      },
      "name()": {
        "notice": "Contract Name"
      },
      "proposalCount()": {
        "notice": "The total number of proposals"
      },
      "proposalThreshold()": {
        "notice": "The number of votes required in order for a voter to become a proposer"
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed"
      },
      "queueSetGovernorPendingAdmin(address,uint256)": {
        "notice": "Allow Guardian to queue transaction to accept admin rights with delay"
      },
      "receipts(uint256,address)": {
        "notice": "Mapping of proposal to receipts of ballots for the entire set of voters"
      },
      "registry()": {
        "notice": "Get the Registry address"
      },
      "setRegistry(address)": {
        "notice": "Set the Registry for the contract. Only callable by Governance."
      },
      "state(uint256)": {
        "notice": "Get the current state of a given Proposal"
      },
      "token()": {
        "notice": "The address of the Oh! Finance Token"
      },
      "votingDelay()": {
        "notice": "The delay before voting on a proposal may take place, once proposed, in blocks"
      },
      "votingPeriod()": {
        "notice": "The duration of voting on a proposal, in blocks"
      }
    },
    "notice": "Manages Protocol proposals and voting receipts to send to the Governor",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12083,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7875,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "guardian",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7878,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7881,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "votingDelay",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7884,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "votingPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 7887,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "proposalThreshold",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7890,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "proposalCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7895,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "proposals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Proposal)9162_storage)"
      },
      {
        "astId": 7902,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "receipts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)9169_storage))"
      },
      {
        "astId": 7907,
        "contract": "contracts/governance/OhForum.sol:OhForum",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Receipt)9169_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OhForumTypes.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)9169_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)9169_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct OhForumTypes.Receipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Receipt)9169_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)9162_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OhForumTypes.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)9162_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)9162_storage": {
        "encoding": "inplace",
        "label": "struct OhForumTypes.Proposal",
        "members": [
          {
            "astId": 9133,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9135,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9137,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9140,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "targets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9143,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9146,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "signatures",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 9149,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "calldatas",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 9151,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9153,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "endBlock",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 9155,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "forVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9157,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "againstVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 9159,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "cancelled",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 9161,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "executed",
            "offset": 1,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Receipt)9169_storage": {
        "encoding": "inplace",
        "label": "struct OhForumTypes.Receipt",
        "members": [
          {
            "astId": 9164,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9166,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9168,
            "contract": "contracts/governance/OhForum.sol:OhForum",
            "label": "votes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}